name: Lint and Test
on:
  workflow_dispatch:
  pull_request:

jobs:
  test:
    name: Lint and Test
    runs-on: ubuntu-20.04
    env:
      SA_PASSWORD: abcdefgh1!
    steps:        
      - name: Checkout code   
        uses: actions/checkout@ec3a7ce113134d7a93b817d10a8272cb61118579 # v2.4.0

      - name: Set up Node
        uses: actions/setup-node@1f8c6b94b26d0feae1e387ca63ccbdc44d27b561 # v2.5.1
        with:
          node-version: '16'
          check-latest: true
          registry-url: 'https://www.myget.org/F/ed-fi/npm/'

      - name: Install
        run: yarn install
        shell: bash

      - name: Lint
        run: yarn test:lint
        shell: bash

      - name: Start Docker for SQL Server
        # Starting before unit tests to give plenty of spin-up time - unit tests do not depend on this
        run: |
          docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=${{ env.SA_PASSWORD }}' -e 'MSSQL_PID=Express' -p 1433:1433 \
            --name mssql -d mcr.microsoft.com/mssql/server:2019-latest
        shell: bash
    
      - name: Unit tests
        run: yarn test:unit:ci --ci  --config ./jest.ci-config.js
        shell: bash
        env:
          JEST_JUNIT_OUTPUT_DIR: unit-tests

      - name: Create SQL Server Testing Database
        run: |
          docker exec -i mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${{ env.SA_PASSWORD }} -d master \
            -Q "CREATE DATABASE MetaEd_Ods_Integration_Tests"
        shell: bash

      - name: SQLServer Unit tests
        run: yarn test:unit:ods:sqlserver:db --ci  --config ./jest.ci-config.js
        shell: bash
        env:
          MSSQL_USERNAME: sa
          MSSQL_PASSWORD: ${{ env.SA_PASSWORD }}
          MSSQL_TRUST_CERTIFICATE: 'true' # This is required for successful auth to the docker SQL Server
          JEST_JUNIT_OUTPUT_DIR: sqlserver-tests

      - name: Setup PostgreSQL for testing
        # Postgres on Ubuntu is installed locally but the service needs to be started. The default postgres 
        # super user password is blank, so updating to what the unit tests expect, also creating the testing database
        run: |
          sudo systemctl start postgresql.service
          sudo -u postgres psql -U postgres -c "create database metaed_integration_tests;"
          sudo -u postgres psql -U postgres -c "alter user postgres with password 'docker';"
        shell: bash

      - name: PostgreSQL Unit tests
        run: yarn test:unit:ods:postgresql:db --ci --config ./jest.ci-config.js
        shell: bash
        env:
          JEST_JUNIT_OUTPUT_DIR: postgresql-tests

      - name: Unit Test Report
        uses: dorny/test-reporter@0d00bb14cb0cc2c9b8985df6e81dd333188224e1 #v1.5.0
        if: success() || failure()
        with:
          name: Unit Test Results
          path: 'unit-tests/*.xml'
          reporter: jest-junit

      - name: SQLServer Test Report
        uses: dorny/test-reporter@0d00bb14cb0cc2c9b8985df6e81dd333188224e1 #v1.5.0
        if: success() || failure()
        with:
          name: SQLServer Test Results
          path: 'sqlserver-tests/*.xml'
          reporter: jest-junit

      - name: PostgreSQL Test Report
        uses: dorny/test-reporter@0d00bb14cb0cc2c9b8985df6e81dd333188224e1 #v1.5.0
        if: success() || failure()
        with:
          name: PostgreSQL Test Results
          path: 'postgresql-tests/*.xml'
          reporter: jest-junit