name: Lint and Test
on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      debug_enabled:
        description: Run the build with tmate debugging enabled
        required: true
        default: "false"
        type: choice
        options:
          - "false"
          - "true"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - name: Setup Node
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Node modules cache
        id: modules-cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 #v3.0.11
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.modules-cache.outputs.cache-hit != 'true' }}
        run: npm install

      - name: Linter
        run: npm run test:lint

  unit-tests:
    name: Unit Test
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - name: Setup Node
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Node modules cache
        id: modules-cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 #v3.0.11
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.modules-cache.outputs.cache-hit != 'true' }}
        run: npm install

      - name: Unit Tests
        run: npm run test:unit:ci
        env:
          JEST_JUNIT_OUTPUT_DIR: unit-tests

      # Enable tmate debugging if the input option was provided (cd )
      - name: Setup tmate session
        if: always() && inputs.debug_enabled == 'true'
        uses: mxschmitt/action-tmate@28f608baaa037465aa887c21a7924e9e6b66a9e0 # v3.13
        timeout-minutes: 10

      - name: Unit Test Report
        uses: dorny/test-reporter@c9b3d0e2bd2a4e96aaf424dbaa31c46b42318226 #v1.6.0
        if: success() || failure()
        with:
          name: Unit Test Results
          path: "unit-tests/*.xml"
          reporter: jest-junit

  sql-server-tests:
    name: SQL Server Tests
    needs: lint
    runs-on: ubuntu-latest
    env:
      SA_PASSWORD: abcdefgh1!
    services:
      mssql:
        image: mcr.microsoft.com/mssql/server:2019-latest
        env:
          SA_PASSWORD: ${{ env.SA_PASSWORD }}
          ACCEPT_EULA: "Y"
          MSSQL_PID: "Express"
        ports:
          - 1433:1433
        options: "--name mssql"

    steps:
      - name: Checkout repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - name: Setup Node
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Node modules cache
        id: modules-cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 #v3.0.11
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.modules-cache.outputs.cache-hit != 'true' }}
        run: npm install

      - name: Create SQL Server Testing Database
        run: |
          docker exec -i mssql /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${{ env.SA_PASSWORD }} -d master \
            -Q "CREATE DATABASE MetaEd_Ods_Integration_Tests"

      - name: SQLServer Unit tests
        run: npm run test:unit:ods:sqlserver:db -- --ci  --config ./jest.ci-config.js
        env:
          MSSQL_USERNAME: sa
          MSSQL_PASSWORD: ${{ env.SA_PASSWORD }}
          MSSQL_TRUST_CERTIFICATE: "true" # This is required for successful auth to the docker SQL Server
          JEST_JUNIT_OUTPUT_DIR: sqlserver-tests

      - name: SQLServer Test Report
        uses: dorny/test-reporter@c9b3d0e2bd2a4e96aaf424dbaa31c46b42318226 #v1.6.0
        if: success() || failure()
        with:
          name: SQLServer Test Results
          path: "sqlserver-tests/*.xml"
          reporter: jest-junit

  postgres-tests:
    name: PostgreSQL Tests
    needs: lint
    runs-on: ubuntu-latest
    env:
      SA_PASSWORD: abcdefgh1!
    steps:
      - name: Checkout repository
        uses: actions/checkout@755da8c3cf115ac066823e79a1e1788f8940201b # v3.2.0

      - name: Setup Node
        uses: actions/setup-node@8c91899e586c5b171469028077307d293428b516 # v3.5.1
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: "**/package-lock.json"

      - name: Node modules cache
        id: modules-cache
        uses: actions/cache@9b0c1fce7a93df8e3bb8926b0d6e9d89e92f20a7 #v3.0.11
        with:
          path: "**/node_modules"
          key: ${{ runner.os }}-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        if: ${{ steps.modules-cache.outputs.cache-hit != 'true' }}
        run: npm install

      - name: Setup PostgreSQL for testing
        # Postgres on Ubuntu is installed locally but the service needs to be started. The default postgres
        # super user password is blank, so updating to what the unit tests expect, also creating the testing database
        run: |
          sudo systemctl start postgresql.service
          sudo -u postgres psql -U postgres -c "create database metaed_integration_tests;"
          sudo -u postgres psql -U postgres -c "alter user postgres with password 'docker';"

      - name: PostgreSQL Unit tests
        run: npm run test:unit:ods:postgresql:db -- --ci --config ./jest.ci-config.js
        env:
          JEST_JUNIT_OUTPUT_DIR: postgresql-tests

      - name: PostgreSQL Test Report
        uses: dorny/test-reporter@c9b3d0e2bd2a4e96aaf424dbaa31c46b42318226 #v1.6.0
        if: success() || failure()
        with:
          name: PostgreSQL Test Results
          path: "postgresql-tests/*.xml"
          reporter: jest-junit
