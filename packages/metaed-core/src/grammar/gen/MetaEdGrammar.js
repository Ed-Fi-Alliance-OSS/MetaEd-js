// Generated from ./packages/metaed-core/src/grammar/language/MetaEdGrammar.g4 by ANTLR 4.6
// jshint ignore: start
var antlr4 = require('antlr4/index');
var MetaEdGrammarListener = require('./MetaEdGrammarListener').MetaEdGrammarListener;
var grammarFileName = "MetaEdGrammar.g4";

var serializedATN = ["\u0003\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd",
    "\u0003a\u04f3\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004\t",
    "\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007\u0004",
    "\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f\u0004",
    "\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010\u0004",
    "\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014\t",
    "\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017\u0004",
    "\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b\t",
    "\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e\u0004",
    "\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004$\t$\u0004",
    "%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004+\t+\u0004",
    ",\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u00042\t2\u0004",
    "3\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u00049\t9\u0004",
    ":\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004@\t@\u0004",
    "A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004G\tG\u0004",
    "H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004N\tN\u0004",
    "O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004U\tU\u0004",
    "V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004\\\t\\\u0004",
    "]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004c\tc\u0004",
    "d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004j\tj\u0004",
    "k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004q\tq\u0004",
    "r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0004w\tw\u0004x\tx\u0004",
    "y\ty\u0004z\tz\u0004{\t{\u0004|\t|\u0004}\t}\u0004~\t~\u0004\u007f\t",
    "\u007f\u0004\u0080\t\u0080\u0004\u0081\t\u0081\u0004\u0082\t\u0082\u0004",
    "\u0083\t\u0083\u0004\u0084\t\u0084\u0004\u0085\t\u0085\u0004\u0086\t",
    "\u0086\u0004\u0087\t\u0087\u0004\u0088\t\u0088\u0004\u0089\t\u0089\u0004",
    "\u008a\t\u008a\u0004\u008b\t\u008b\u0004\u008c\t\u008c\u0003\u0002\u0006",
    "\u0002\u011a\n\u0002\r\u0002\u000e\u0002\u011b\u0003\u0003\u0003\u0003",
    "\u0003\u0003\u0003\u0003\u0006\u0003\u0122\n\u0003\r\u0003\u000e\u0003",
    "\u0123\u0003\u0003\u0003\u0003\u0003\u0004\u0003\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0140\n\u0005\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0007\u0003\u0007\u0003\u0007\u0003\b",
    "\u0003\b\u0003\b\u0003\t\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003",
    "\u000b\u0003\u000b\u0003\u000b\u0003\f\u0003\f\u0003\f\u0005\f\u0157",
    "\n\f\u0003\f\u0005\f\u015a\n\f\u0003\f\u0003\f\u0006\f\u015e\n\f\r\f",
    "\u000e\f\u015f\u0003\r\u0003\r\u0003\u000e\u0003\u000e\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0005\u000f\u0169\n\u000f\u0003\u000f\u0005\u000f",
    "\u016c\n\u000f\u0003\u000f\u0003\u000f\u0005\u000f\u0170\n\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0007\u000f\u0175\n\u000f\f\u000f\u000e",
    "\u000f\u0178\u000b\u000f\u0003\u0010\u0003\u0010\u0003\u0010\u0005\u0010",
    "\u017d\n\u0010\u0003\u0010\u0005\u0010\u0180\n\u0010\u0003\u0010\u0003",
    "\u0010\u0005\u0010\u0184\n\u0010\u0003\u0010\u0007\u0010\u0187\n\u0010",
    "\f\u0010\u000e\u0010\u018a\u000b\u0010\u0003\u0011\u0003\u0011\u0003",
    "\u0011\u0003\u0011\u0005\u0011\u0190\n\u0011\u0003\u0011\u0005\u0011",
    "\u0193\n\u0011\u0003\u0011\u0006\u0011\u0196\n\u0011\r\u0011\u000e\u0011",
    "\u0197\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012\u0005",
    "\u0012\u019f\n\u0012\u0003\u0012\u0005\u0012\u01a2\n\u0012\u0003\u0012",
    "\u0003\u0012\u0006\u0012\u01a6\n\u0012\r\u0012\u000e\u0012\u01a7\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0005\u0013\u01ad\n\u0013\u0003\u0013",
    "\u0005\u0013\u01b0\n\u0013\u0003\u0013\u0003\u0013\u0006\u0013\u01b4",
    "\n\u0013\r\u0013\u000e\u0013\u01b5\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u01bb\n\u0014\u0003\u0014\u0005\u0014\u01be\n\u0014\u0003",
    "\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0005\u0014\u01c4\n\u0014",
    "\u0003\u0014\u0005\u0014\u01c7\n\u0014\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0005\u0015\u01cc\n\u0015\u0003\u0015\u0005\u0015\u01cf\n\u0015",
    "\u0003\u0015\u0003\u0015\u0005\u0015\u01d3\n\u0015\u0003\u0015\u0005",
    "\u0015\u01d6\n\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0005\u0016",
    "\u01db\n\u0016\u0003\u0016\u0005\u0016\u01de\n\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u01e2\n\u0016\u0003\u0016\u0005\u0016\u01e5\n\u0016",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0005\u0017\u01ea\n\u0017\u0003",
    "\u0017\u0005\u0017\u01ed\n\u0017\u0003\u0017\u0003\u0017\u0005\u0017",
    "\u01f1\n\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018\u0003",
    "\u0018\u0005\u0018\u01f8\n\u0018\u0003\u0018\u0005\u0018\u01fb\n\u0018",
    "\u0003\u0018\u0003\u0018\u0006\u0018\u01ff\n\u0018\r\u0018\u000e\u0018",
    "\u0200\u0003\u0019\u0003\u0019\u0003\u0019\u0003\u0019\u0005\u0019\u0207",
    "\n\u0019\u0003\u0019\u0005\u0019\u020a\n\u0019\u0003\u0019\u0006\u0019",
    "\u020d\n\u0019\r\u0019\u000e\u0019\u020e\u0003\u001a\u0003\u001a\u0003",
    "\u001a\u0003\u001a\u0003\u001a\u0005\u001a\u0216\n\u001a\u0003\u001a",
    "\u0005\u001a\u0219\n\u001a\u0003\u001a\u0003\u001a\u0006\u001a\u021d",
    "\n\u001a\r\u001a\u000e\u001a\u021e\u0003\u001b\u0003\u001b\u0003\u001b",
    "\u0005\u001b\u0224\n\u001b\u0003\u001b\u0005\u001b\u0227\n\u001b\u0003",
    "\u001b\u0003\u001b\u0007\u001b\u022b\n\u001b\f\u001b\u000e\u001b\u022e",
    "\u000b\u001b\u0003\u001b\u0005\u001b\u0231\n\u001b\u0003\u001c\u0003",
    "\u001c\u0005\u001c\u0235\n\u001c\u0003\u001c\u0003\u001c\u0006\u001c",
    "\u0239\n\u001c\r\u001c\u000e\u001c\u023a\u0003\u001d\u0003\u001d\u0003",
    "\u001e\u0003\u001e\u0003\u001f\u0003\u001f\u0003\u001f\u0005\u001f\u0244",
    "\n\u001f\u0003\u001f\u0005\u001f\u0247\n\u001f\u0003\u001f\u0003\u001f",
    "\u0006\u001f\u024b\n\u001f\r\u001f\u000e\u001f\u024c\u0003\u001f\u0005",
    "\u001f\u0250\n\u001f\u0003 \u0003 \u0003 \u0003 \u0005 \u0256\n \u0003",
    " \u0003 \u0005 \u025a\n \u0003!\u0003!\u0003!\u0003\"\u0003\"\u0003",
    "\"\u0005\"\u0262\n\"\u0003\"\u0005\"\u0265\n\"\u0003\"\u0003\"\u0005",
    "\"\u0269\n\"\u0003\"\u0006\"\u026c\n\"\r\"\u000e\"\u026d\u0003#\u0003",
    "#\u0003#\u0003#\u0005#\u0274\n#\u0003#\u0005#\u0277\n#\u0003#\u0006",
    "#\u027a\n#\r#\u000e#\u027b\u0003$\u0003$\u0003$\u0003$\u0003$\u0005",
    "$\u0283\n$\u0003$\u0005$\u0286\n$\u0003$\u0003$\u0006$\u028a\n$\r$\u000e",
    "$\u028b\u0003%\u0003%\u0003%\u0005%\u0291\n%\u0003%\u0005%\u0294\n%",
    "\u0003%\u0003%\u0006%\u0298\n%\r%\u000e%\u0299\u0003&\u0003&\u0003&",
    "\u0005&\u029f\n&\u0003&\u0005&\u02a2\n&\u0003\'\u0003\'\u0003(\u0003",
    "(\u0003(\u0005(\u02a9\n(\u0003(\u0005(\u02ac\n(\u0003(\u0003(\u0006",
    "(\u02b0\n(\r(\u000e(\u02b1\u0003)\u0003)\u0003)\u0005)\u02b7\n)\u0003",
    ")\u0005)\u02ba\n)\u0003)\u0003)\u0005)\u02be\n)\u0003)\u0005)\u02c1",
    "\n)\u0003)\u0003)\u0003*\u0003*\u0003*\u0003+\u0003+\u0003+\u0003,\u0007",
    ",\u02cc\n,\f,\u000e,\u02cf\u000b,\u0003,\u0003,\u0003,\u0007,\u02d4",
    "\n,\f,\u000e,\u02d7\u000b,\u0003-\u0003-\u0003-\u0003-\u0005-\u02dd",
    "\n-\u0003-\u0003-\u0005-\u02e1\n-\u0003.\u0003.\u0003.\u0003.\u0005",
    ".\u02e7\n.\u0003.\u0003.\u0005.\u02eb\n.\u0003/\u0003/\u0003/\u0003",
    "/\u0005/\u02f1\n/\u0003/\u0005/\u02f4\n/\u0003/\u0003/\u00030\u0003",
    "0\u00060\u02fa\n0\r0\u000e0\u02fb\u00031\u00031\u00031\u00031\u0003",
    "1\u00051\u0303\n1\u00031\u00051\u0306\n1\u00031\u00031\u00061\u030a",
    "\n1\r1\u000e1\u030b\u00031\u00031\u00051\u0310\n1\u00032\u00032\u0003",
    "3\u00033\u00033\u00034\u00034\u00034\u00035\u00035\u00035\u00036\u0003",
    "6\u00036\u00037\u00037\u00057\u0322\n7\u00038\u00038\u00038\u00039\u0003",
    "9\u00039\u0003:\u0003:\u0003;\u0003;\u0003;\u0003;\u0003;\u0003;\u0005",
    ";\u0332\n;\u0003<\u0003<\u0003=\u0003=\u0003=\u0003>\u0003>\u0003?\u0003",
    "?\u0003@\u0003@\u0005@\u033f\n@\u0003A\u0003A\u0003B\u0003B\u0003C\u0003",
    "C\u0003D\u0005D\u0348\nD\u0003D\u0003D\u0003D\u0005D\u034d\nD\u0003",
    "D\u0005D\u0350\nD\u0003E\u0003E\u0003F\u0003F\u0003F\u0003F\u0005F\u0358",
    "\nF\u0003G\u0003G\u0003G\u0003H\u0003H\u0003H\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003",
    "I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0003I\u0005",
    "I\u0377\nI\u0003J\u0003J\u0003J\u0005J\u037c\nJ\u0003J\u0003J\u0003",
    "K\u0003K\u0003K\u0005K\u0383\nK\u0003K\u0003K\u0003L\u0003L\u0003L\u0005",
    "L\u038a\nL\u0003L\u0003L\u0003M\u0003M\u0003M\u0005M\u0391\nM\u0003",
    "M\u0003M\u0003N\u0003N\u0003N\u0005N\u0398\nN\u0003N\u0003N\u0003N\u0003",
    "N\u0005N\u039e\nN\u0003N\u0005N\u03a1\nN\u0003O\u0003O\u0003O\u0005",
    "O\u03a6\nO\u0003O\u0003O\u0003P\u0003P\u0003P\u0005P\u03ad\nP\u0003",
    "P\u0003P\u0003Q\u0003Q\u0003Q\u0005Q\u03b4\nQ\u0003Q\u0003Q\u0003R\u0003",
    "R\u0005R\u03ba\nR\u0003R\u0003R\u0005R\u03be\nR\u0003R\u0003R\u0007",
    "R\u03c2\nR\fR\u000eR\u03c5\u000bR\u0003S\u0003S\u0003S\u0005S\u03ca",
    "\nS\u0003S\u0003S\u0007S\u03ce\nS\fS\u000eS\u03d1\u000bS\u0003T\u0003",
    "T\u0003T\u0005T\u03d6\nT\u0003T\u0003T\u0007T\u03da\nT\fT\u000eT\u03dd",
    "\u000bT\u0003U\u0003U\u0003U\u0005U\u03e2\nU\u0003U\u0003U\u0005U\u03e6",
    "\nU\u0003U\u0005U\u03e9\nU\u0003V\u0003V\u0003V\u0005V\u03ee\nV\u0003",
    "V\u0003V\u0003W\u0003W\u0003W\u0005W\u03f5\nW\u0003W\u0003W\u0005W\u03f9",
    "\nW\u0003W\u0005W\u03fc\nW\u0003W\u0007W\u03ff\nW\fW\u000eW\u0402\u000b",
    "W\u0003X\u0003X\u0003X\u0005X\u0407\nX\u0003X\u0003X\u0005X\u040b\n",
    "X\u0003X\u0005X\u040e\nX\u0003X\u0007X\u0411\nX\fX\u000eX\u0414\u000b",
    "X\u0003Y\u0003Y\u0003Y\u0003Y\u0005Y\u041a\nY\u0003Y\u0005Y\u041d\n",
    "Y\u0003Y\u0003Y\u0007Y\u0421\nY\fY\u000eY\u0424\u000bY\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0005Z\u042a\nZ\u0003Z\u0005Z\u042d\nZ\u0003Z\u0003",
    "Z\u0007Z\u0431\nZ\fZ\u000eZ\u0434\u000bZ\u0003[\u0003[\u0003[\u0003",
    "[\u0005[\u043a\n[\u0003[\u0005[\u043d\n[\u0003[\u0003[\u0007[\u0441",
    "\n[\f[\u000e[\u0444\u000b[\u0003\\\u0003\\\u0003\\\u0003\\\u0005\\\u044a",
    "\n\\\u0003\\\u0005\\\u044d\n\\\u0003\\\u0003\\\u0007\\\u0451\n\\\f\\",
    "\u000e\\\u0454\u000b\\\u0003]\u0003]\u0003]\u0005]\u0459\n]\u0003]\u0003",
    "]\u0005]\u045d\n]\u0003]\u0005]\u0460\n]\u0003^\u0003^\u0003^\u0005",
    "^\u0465\n^\u0003^\u0003^\u0005^\u0469\n^\u0003^\u0003^\u0003_\u0003",
    "_\u0003_\u0005_\u0470\n_\u0003_\u0003_\u0003`\u0003`\u0003`\u0005`\u0477",
    "\n`\u0003`\u0003`\u0003a\u0003a\u0003b\u0003b\u0003c\u0003c\u0003c\u0003",
    "c\u0003c\u0003d\u0003d\u0003e\u0003e\u0003f\u0003f\u0003f\u0007f\u048b",
    "\nf\ff\u000ef\u048e\u000bf\u0003g\u0005g\u0491\ng\u0003g\u0003g\u0003",
    "h\u0003h\u0003i\u0003i\u0003j\u0003j\u0003k\u0003k\u0003l\u0003l\u0003",
    "l\u0005l\u04a0\nl\u0003l\u0003l\u0003m\u0003m\u0003n\u0003n\u0003o\u0003",
    "o\u0003p\u0003p\u0003q\u0003q\u0003r\u0003r\u0003s\u0003s\u0003t\u0003",
    "t\u0003u\u0003u\u0003v\u0003v\u0003w\u0003w\u0003x\u0003x\u0003x\u0005",
    "x\u04bd\nx\u0003x\u0003x\u0003y\u0003y\u0003z\u0003z\u0003{\u0003{\u0003",
    "|\u0003|\u0003}\u0003}\u0003~\u0003~\u0003\u007f\u0003\u007f\u0003\u0080",
    "\u0003\u0080\u0003\u0081\u0003\u0081\u0003\u0082\u0003\u0082\u0003\u0083",
    "\u0003\u0083\u0003\u0083\u0005\u0083\u04d8\n\u0083\u0003\u0083\u0003",
    "\u0083\u0003\u0084\u0003\u0084\u0003\u0085\u0003\u0085\u0003\u0086\u0003",
    "\u0086\u0003\u0087\u0003\u0087\u0003\u0087\u0005\u0087\u04e5\n\u0087",
    "\u0003\u0087\u0003\u0087\u0003\u0088\u0003\u0088\u0003\u0089\u0003\u0089",
    "\u0003\u008a\u0003\u008a\u0003\u008b\u0003\u008b\u0003\u008c\u0003\u008c",
    "\u0003\u008c\u0002\u0002\u008d\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012",
    "\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<>@BDFHJLNPRTVXZ",
    "\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e",
    "\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6",
    "\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be",
    "\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4\u00d6",
    "\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6\u00e8\u00ea\u00ec\u00ee",
    "\u00f0\u00f2\u00f4\u00f6\u00f8\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106",
    "\u0108\u010a\u010c\u010e\u0110\u0112\u0114\u0116\u0002\b\u0004\u0002",
    "77WW\u0004\u0002SSZZ\u0006\u0002\u0016\u0016\u001a\u001a !((\u0004\u0002",
    "\u0016\u0016 !\u0004\u0002\u0017\u0017\"\"\u0003\u0002\\]\u0532\u0002",
    "\u0119\u0003\u0002\u0002\u0002\u0004\u011d\u0003\u0002\u0002\u0002\u0006",
    "\u0127\u0003\u0002\u0002\u0002\b\u013f\u0003\u0002\u0002\u0002\n\u0141",
    "\u0003\u0002\u0002\u0002\f\u0144\u0003\u0002\u0002\u0002\u000e\u0147",
    "\u0003\u0002\u0002\u0002\u0010\u014a\u0003\u0002\u0002\u0002\u0012\u014d",
    "\u0003\u0002\u0002\u0002\u0014\u0150\u0003\u0002\u0002\u0002\u0016\u0153",
    "\u0003\u0002\u0002\u0002\u0018\u0161\u0003\u0002\u0002\u0002\u001a\u0163",
    "\u0003\u0002\u0002\u0002\u001c\u0165\u0003\u0002\u0002\u0002\u001e\u0179",
    "\u0003\u0002\u0002\u0002 \u018b\u0003\u0002\u0002\u0002\"\u0199\u0003",
    "\u0002\u0002\u0002$\u01a9\u0003\u0002\u0002\u0002&\u01b7\u0003\u0002",
    "\u0002\u0002(\u01c8\u0003\u0002\u0002\u0002*\u01d7\u0003\u0002\u0002",
    "\u0002,\u01e6\u0003\u0002\u0002\u0002.\u01f4\u0003\u0002\u0002\u0002",
    "0\u0202\u0003\u0002\u0002\u00022\u0210\u0003\u0002\u0002\u00024\u0220",
    "\u0003\u0002\u0002\u00026\u0234\u0003\u0002\u0002\u00028\u023c\u0003",
    "\u0002\u0002\u0002:\u023e\u0003\u0002\u0002\u0002<\u0240\u0003\u0002",
    "\u0002\u0002>\u0251\u0003\u0002\u0002\u0002@\u025b\u0003\u0002\u0002",
    "\u0002B\u025e\u0003\u0002\u0002\u0002D\u026f\u0003\u0002\u0002\u0002",
    "F\u027d\u0003\u0002\u0002\u0002H\u028d\u0003\u0002\u0002\u0002J\u029b",
    "\u0003\u0002\u0002\u0002L\u02a3\u0003\u0002\u0002\u0002N\u02a5\u0003",
    "\u0002\u0002\u0002P\u02b3\u0003\u0002\u0002\u0002R\u02c4\u0003\u0002",
    "\u0002\u0002T\u02c7\u0003\u0002\u0002\u0002V\u02cd\u0003\u0002\u0002",
    "\u0002X\u02d8\u0003\u0002\u0002\u0002Z\u02e2\u0003\u0002\u0002\u0002",
    "\\\u02ec\u0003\u0002\u0002\u0002^\u02f9\u0003\u0002\u0002\u0002`\u02fd",
    "\u0003\u0002\u0002\u0002b\u0311\u0003\u0002\u0002\u0002d\u0313\u0003",
    "\u0002\u0002\u0002f\u0316\u0003\u0002\u0002\u0002h\u0319\u0003\u0002",
    "\u0002\u0002j\u031c\u0003\u0002\u0002\u0002l\u0321\u0003\u0002\u0002",
    "\u0002n\u0323\u0003\u0002\u0002\u0002p\u0326\u0003\u0002\u0002\u0002",
    "r\u0329\u0003\u0002\u0002\u0002t\u0331\u0003\u0002\u0002\u0002v\u0333",
    "\u0003\u0002\u0002\u0002x\u0335\u0003\u0002\u0002\u0002z\u0338\u0003",
    "\u0002\u0002\u0002|\u033a\u0003\u0002\u0002\u0002~\u033e\u0003\u0002",
    "\u0002\u0002\u0080\u0340\u0003\u0002\u0002\u0002\u0082\u0342\u0003\u0002",
    "\u0002\u0002\u0084\u0344\u0003\u0002\u0002\u0002\u0086\u0347\u0003\u0002",
    "\u0002\u0002\u0088\u0351\u0003\u0002\u0002\u0002\u008a\u0353\u0003\u0002",
    "\u0002\u0002\u008c\u0359\u0003\u0002\u0002\u0002\u008e\u035c\u0003\u0002",
    "\u0002\u0002\u0090\u0376\u0003\u0002\u0002\u0002\u0092\u0378\u0003\u0002",
    "\u0002\u0002\u0094\u037f\u0003\u0002\u0002\u0002\u0096\u0386\u0003\u0002",
    "\u0002\u0002\u0098\u038d\u0003\u0002\u0002\u0002\u009a\u0394\u0003\u0002",
    "\u0002\u0002\u009c\u03a2\u0003\u0002\u0002\u0002\u009e\u03a9\u0003\u0002",
    "\u0002\u0002\u00a0\u03b0\u0003\u0002\u0002\u0002\u00a2\u03b9\u0003\u0002",
    "\u0002\u0002\u00a4\u03c6\u0003\u0002\u0002\u0002\u00a6\u03d2\u0003\u0002",
    "\u0002\u0002\u00a8\u03de\u0003\u0002\u0002\u0002\u00aa\u03ea\u0003\u0002",
    "\u0002\u0002\u00ac\u03f1\u0003\u0002\u0002\u0002\u00ae\u0403\u0003\u0002",
    "\u0002\u0002\u00b0\u0415\u0003\u0002\u0002\u0002\u00b2\u0425\u0003\u0002",
    "\u0002\u0002\u00b4\u0435\u0003\u0002\u0002\u0002\u00b6\u0445\u0003\u0002",
    "\u0002\u0002\u00b8\u0455\u0003\u0002\u0002\u0002\u00ba\u0461\u0003\u0002",
    "\u0002\u0002\u00bc\u046c\u0003\u0002\u0002\u0002\u00be\u0473\u0003\u0002",
    "\u0002\u0002\u00c0\u047a\u0003\u0002\u0002\u0002\u00c2\u047c\u0003\u0002",
    "\u0002\u0002\u00c4\u047e\u0003\u0002\u0002\u0002\u00c6\u0483\u0003\u0002",
    "\u0002\u0002\u00c8\u0485\u0003\u0002\u0002\u0002\u00ca\u0487\u0003\u0002",
    "\u0002\u0002\u00cc\u0490\u0003\u0002\u0002\u0002\u00ce\u0494\u0003\u0002",
    "\u0002\u0002\u00d0\u0496\u0003\u0002\u0002\u0002\u00d2\u0498\u0003\u0002",
    "\u0002\u0002\u00d4\u049a\u0003\u0002\u0002\u0002\u00d6\u049f\u0003\u0002",
    "\u0002\u0002\u00d8\u04a3\u0003\u0002\u0002\u0002\u00da\u04a5\u0003\u0002",
    "\u0002\u0002\u00dc\u04a7\u0003\u0002\u0002\u0002\u00de\u04a9\u0003\u0002",
    "\u0002\u0002\u00e0\u04ab\u0003\u0002\u0002\u0002\u00e2\u04ad\u0003\u0002",
    "\u0002\u0002\u00e4\u04af\u0003\u0002\u0002\u0002\u00e6\u04b1\u0003\u0002",
    "\u0002\u0002\u00e8\u04b3\u0003\u0002\u0002\u0002\u00ea\u04b5\u0003\u0002",
    "\u0002\u0002\u00ec\u04b7\u0003\u0002\u0002\u0002\u00ee\u04bc\u0003\u0002",
    "\u0002\u0002\u00f0\u04c0\u0003\u0002\u0002\u0002\u00f2\u04c2\u0003\u0002",
    "\u0002\u0002\u00f4\u04c4\u0003\u0002\u0002\u0002\u00f6\u04c6\u0003\u0002",
    "\u0002\u0002\u00f8\u04c8\u0003\u0002\u0002\u0002\u00fa\u04ca\u0003\u0002",
    "\u0002\u0002\u00fc\u04cc\u0003\u0002\u0002\u0002\u00fe\u04ce\u0003\u0002",
    "\u0002\u0002\u0100\u04d0\u0003\u0002\u0002\u0002\u0102\u04d2\u0003\u0002",
    "\u0002\u0002\u0104\u04d7\u0003\u0002\u0002\u0002\u0106\u04db\u0003\u0002",
    "\u0002\u0002\u0108\u04dd\u0003\u0002\u0002\u0002\u010a\u04df\u0003\u0002",
    "\u0002\u0002\u010c\u04e4\u0003\u0002\u0002\u0002\u010e\u04e8\u0003\u0002",
    "\u0002\u0002\u0110\u04ea\u0003\u0002\u0002\u0002\u0112\u04ec\u0003\u0002",
    "\u0002\u0002\u0114\u04ee\u0003\u0002\u0002\u0002\u0116\u04f0\u0003\u0002",
    "\u0002\u0002\u0118\u011a\u0005\u0004\u0003\u0002\u0119\u0118\u0003\u0002",
    "\u0002\u0002\u011a\u011b\u0003\u0002\u0002\u0002\u011b\u0119\u0003\u0002",
    "\u0002\u0002\u011b\u011c\u0003\u0002\u0002\u0002\u011c\u0003\u0003\u0002",
    "\u0002\u0002\u011d\u011e\u0007\u0005\u0002\u0002\u011e\u011f\u0005\u0114",
    "\u008b\u0002\u011f\u0121\u0005\u0006\u0004\u0002\u0120\u0122\u0005\b",
    "\u0005\u0002\u0121\u0120\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002",
    "\u0002\u0002\u0123\u0121\u0003\u0002\u0002\u0002\u0123\u0124\u0003\u0002",
    "\u0002\u0002\u0124\u0125\u0003\u0002\u0002\u0002\u0125\u0126\u0007\u0006",
    "\u0002\u0002\u0126\u0005\u0003\u0002\u0002\u0002\u0127\u0128\t\u0002",
    "\u0002\u0002\u0128\u0007\u0003\u0002\u0002\u0002\u0129\u0140\u0005\u0016",
    "\f\u0002\u012a\u0140\u0005\u001c\u000f\u0002\u012b\u0140\u0005 \u0011",
    "\u0002\u012c\u0140\u0005\"\u0012\u0002\u012d\u0140\u0005$\u0013\u0002",
    "\u012e\u0140\u0005&\u0014\u0002\u012f\u0140\u0005(\u0015\u0002\u0130",
    "\u0140\u0005*\u0016\u0002\u0131\u0140\u0005,\u0017\u0002\u0132\u0140",
    "\u0005.\u0018\u0002\u0133\u0140\u00050\u0019\u0002\u0134\u0140\u0005",
    "2\u001a\u0002\u0135\u0140\u00054\u001b\u0002\u0136\u0140\u0005B\"\u0002",
    "\u0137\u0140\u0005D#\u0002\u0138\u0140\u0005F$\u0002\u0139\u0140\u0005",
    "H%\u0002\u013a\u0140\u0005N(\u0002\u013b\u0140\u0005P)\u0002\u013c\u0140",
    "\u0005\\/\u0002\u013d\u0140\u0005<\u001f\u0002\u013e\u0140\u0005`1\u0002",
    "\u013f\u0129\u0003\u0002\u0002\u0002\u013f\u012a\u0003\u0002\u0002\u0002",
    "\u013f\u012b\u0003\u0002\u0002\u0002\u013f\u012c\u0003\u0002\u0002\u0002",
    "\u013f\u012d\u0003\u0002\u0002\u0002\u013f\u012e\u0003\u0002\u0002\u0002",
    "\u013f\u012f\u0003\u0002\u0002\u0002\u013f\u0130\u0003\u0002\u0002\u0002",
    "\u013f\u0131\u0003\u0002\u0002\u0002\u013f\u0132\u0003\u0002\u0002\u0002",
    "\u013f\u0133\u0003\u0002\u0002\u0002\u013f\u0134\u0003\u0002\u0002\u0002",
    "\u013f\u0135\u0003\u0002\u0002\u0002\u013f\u0136\u0003\u0002\u0002\u0002",
    "\u013f\u0137\u0003\u0002\u0002\u0002\u013f\u0138\u0003\u0002\u0002\u0002",
    "\u013f\u0139\u0003\u0002\u0002\u0002\u013f\u013a\u0003\u0002\u0002\u0002",
    "\u013f\u013b\u0003\u0002\u0002\u0002\u013f\u013c\u0003\u0002\u0002\u0002",
    "\u013f\u013d\u0003\u0002\u0002\u0002\u013f\u013e\u0003\u0002\u0002\u0002",
    "\u0140\t\u0003\u0002\u0002\u0002\u0141\u0142\u0007Q\u0002\u0002\u0142",
    "\u0143\u0007Z\u0002\u0002\u0143\u000b\u0003\u0002\u0002\u0002\u0144",
    "\u0145\u0007Q\u0002\u0002\u0145\u0146\u0007Z\u0002\u0002\u0146\r\u0003",
    "\u0002\u0002\u0002\u0147\u0148\u0007R\u0002\u0002\u0148\u0149\u0007",
    "Z\u0002\u0002\u0149\u000f\u0003\u0002\u0002\u0002\u014a\u014b\u0007",
    "R\u0002\u0002\u014b\u014c\u0007Z\u0002\u0002\u014c\u0011\u0003\u0002",
    "\u0002\u0002\u014d\u014e\u0007R\u0002\u0002\u014e\u014f\u0007Z\u0002",
    "\u0002\u014f\u0013\u0003\u0002\u0002\u0002\u0150\u0151\u0007R\u0002",
    "\u0002\u0151\u0152\t\u0003\u0002\u0002\u0152\u0015\u0003\u0002\u0002",
    "\u0002\u0153\u0154\u0007\u0003\u0002\u0002\u0154\u0156\u0005\u00d0i",
    "\u0002\u0155\u0157\u0005\u0116\u008c\u0002\u0156\u0155\u0003\u0002\u0002",
    "\u0002\u0156\u0157\u0003\u0002\u0002\u0002\u0157\u0159\u0003\u0002\u0002",
    "\u0002\u0158\u015a\u0005\n\u0006\u0002\u0159\u0158\u0003\u0002\u0002",
    "\u0002\u0159\u015a\u0003\u0002\u0002\u0002\u015a\u015b\u0003\u0002\u0002",
    "\u0002\u015b\u015d\u0005\u000e\b\u0002\u015c\u015e\u0005\u0090I\u0002",
    "\u015d\u015c\u0003\u0002\u0002\u0002\u015e\u015f\u0003\u0002\u0002\u0002",
    "\u015f\u015d\u0003\u0002\u0002\u0002\u015f\u0160\u0003\u0002\u0002\u0002",
    "\u0160\u0017\u0003\u0002\u0002\u0002\u0161\u0162\u0005\u001a\u000e\u0002",
    "\u0162\u0019\u0003\u0002\u0002\u0002\u0163\u0164\u00078\u0002\u0002",
    "\u0164\u001b\u0003\u0002\u0002\u0002\u0165\u0166\u0007\u0004\u0002\u0002",
    "\u0166\u0168\u0005\u00d2j\u0002\u0167\u0169\u0005\u0116\u008c\u0002",
    "\u0168\u0167\u0003\u0002\u0002\u0002\u0168\u0169\u0003\u0002\u0002\u0002",
    "\u0169\u016b\u0003\u0002\u0002\u0002\u016a\u016c\u0005\n\u0006\u0002",
    "\u016b\u016a\u0003\u0002\u0002\u0002\u016b\u016c\u0003\u0002\u0002\u0002",
    "\u016c\u016d\u0003\u0002\u0002\u0002\u016d\u016f\u0005\u000e\b\u0002",
    "\u016e\u0170\u0005\u0018\r\u0002\u016f\u016e\u0003\u0002\u0002\u0002",
    "\u016f\u0170\u0003\u0002\u0002\u0002\u0170\u0171\u0003\u0002\u0002\u0002",
    "\u0171\u0172\u0005\u001e\u0010\u0002\u0172\u0176\u0005\u001e\u0010\u0002",
    "\u0173\u0175\u0005\u0090I\u0002\u0174\u0173\u0003\u0002\u0002\u0002",
    "\u0175\u0178\u0003\u0002\u0002\u0002\u0176\u0174\u0003\u0002\u0002\u0002",
    "\u0176\u0177\u0003\u0002\u0002\u0002\u0177\u001d\u0003\u0002\u0002\u0002",
    "\u0178\u0176\u0003\u0002\u0002\u0002\u0179\u017a\u0007!\u0002\u0002",
    "\u017a\u017c\u0005\u0104\u0083\u0002\u017b\u017d\u0005\u0116\u008c\u0002",
    "\u017c\u017b\u0003\u0002\u0002\u0002\u017c\u017d\u0003\u0002\u0002\u0002",
    "\u017d\u017f\u0003\u0002\u0002\u0002\u017e\u0180\u0005\f\u0007\u0002",
    "\u017f\u017e\u0003\u0002\u0002\u0002\u017f\u0180\u0003\u0002\u0002\u0002",
    "\u0180\u0181\u0003\u0002\u0002\u0002\u0181\u0183\u0005\u0014\u000b\u0002",
    "\u0182\u0184\u0005\u008aF\u0002\u0183\u0182\u0003\u0002\u0002\u0002",
    "\u0183\u0184\u0003\u0002\u0002\u0002\u0184\u0188\u0003\u0002\u0002\u0002",
    "\u0185\u0187\u0005\u00c4c\u0002\u0186\u0185\u0003\u0002\u0002\u0002",
    "\u0187\u018a\u0003\u0002\u0002\u0002\u0188\u0186\u0003\u0002\u0002\u0002",
    "\u0188\u0189\u0003\u0002\u0002\u0002\u0189\u001f\u0003\u0002\u0002\u0002",
    "\u018a\u0188\u0003\u0002\u0002\u0002\u018b\u018c\u0007\u0004\u0002\u0002",
    "\u018c\u018d\u0005\u00eex\u0002\u018d\u018f\u00075\u0002\u0002\u018e",
    "\u0190\u0005\u0116\u008c\u0002\u018f\u018e\u0003\u0002\u0002\u0002\u018f",
    "\u0190\u0003\u0002\u0002\u0002\u0190\u0192\u0003\u0002\u0002\u0002\u0191",
    "\u0193\u0005\n\u0006\u0002\u0192\u0191\u0003\u0002\u0002\u0002\u0192",
    "\u0193\u0003\u0002\u0002\u0002\u0193\u0195\u0003\u0002\u0002\u0002\u0194",
    "\u0196\u0005\u0090I\u0002\u0195\u0194\u0003\u0002\u0002\u0002\u0196",
    "\u0197\u0003\u0002\u0002\u0002\u0197\u0195\u0003\u0002\u0002\u0002\u0197",
    "\u0198\u0003\u0002\u0002\u0002\u0198!\u0003\u0002\u0002\u0002\u0199",
    "\u019a\u0007\u0004\u0002\u0002\u019a\u019b\u0005\u00d2j\u0002\u019b",
    "\u019c\u00076\u0002\u0002\u019c\u019e\u0005\u00d6l\u0002\u019d\u019f",
    "\u0005\u0116\u008c\u0002\u019e\u019d\u0003\u0002\u0002\u0002\u019e\u019f",
    "\u0003\u0002\u0002\u0002\u019f\u01a1\u0003\u0002\u0002\u0002\u01a0\u01a2",
    "\u0005\n\u0006\u0002\u01a1\u01a0\u0003\u0002\u0002\u0002\u01a1\u01a2",
    "\u0003\u0002\u0002\u0002\u01a2\u01a3\u0003\u0002\u0002\u0002\u01a3\u01a5",
    "\u0005\u000e\b\u0002\u01a4\u01a6\u0005\u0090I\u0002\u01a5\u01a4\u0003",
    "\u0002\u0002\u0002\u01a6\u01a7\u0003\u0002\u0002\u0002\u01a7\u01a5\u0003",
    "\u0002\u0002\u0002\u01a7\u01a8\u0003\u0002\u0002\u0002\u01a8#\u0003",
    "\u0002\u0002\u0002\u01a9\u01aa\u0007\u0007\u0002\u0002\u01aa\u01ac\u0005",
    "\u00dan\u0002\u01ab\u01ad\u0005\u0116\u008c\u0002\u01ac\u01ab\u0003",
    "\u0002\u0002\u0002\u01ac\u01ad\u0003\u0002\u0002\u0002\u01ad\u01af\u0003",
    "\u0002\u0002\u0002\u01ae\u01b0\u0005\n\u0006\u0002\u01af\u01ae\u0003",
    "\u0002\u0002\u0002\u01af\u01b0\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003",
    "\u0002\u0002\u0002\u01b1\u01b3\u0005\u000e\b\u0002\u01b2\u01b4\u0005",
    "\u0090I\u0002\u01b3\u01b2\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003",
    "\u0002\u0002\u0002\u01b5\u01b3\u0003\u0002\u0002\u0002\u01b5\u01b6\u0003",
    "\u0002\u0002\u0002\u01b6%\u0003\u0002\u0002\u0002\u01b7\u01b8\u0007",
    "\u0010\u0002\u0002\u01b8\u01ba\u0005\u00dco\u0002\u01b9\u01bb\u0005",
    "\u0116\u008c\u0002\u01ba\u01b9\u0003\u0002\u0002\u0002\u01ba\u01bb\u0003",
    "\u0002\u0002\u0002\u01bb\u01bd\u0003\u0002\u0002\u0002\u01bc\u01be\u0005",
    "\n\u0006\u0002\u01bd\u01bc\u0003\u0002\u0002\u0002\u01bd\u01be\u0003",
    "\u0002\u0002\u0002\u01be\u01bf\u0003\u0002\u0002\u0002\u01bf\u01c0\u0005",
    "\u000e\b\u0002\u01c0\u01c1\u0005n8\u0002\u01c1\u01c3\u0005p9\u0002\u01c2",
    "\u01c4\u0005h5\u0002\u01c3\u01c2\u0003\u0002\u0002\u0002\u01c3\u01c4",
    "\u0003\u0002\u0002\u0002\u01c4\u01c6\u0003\u0002\u0002\u0002\u01c5\u01c7",
    "\u0005j6\u0002\u01c6\u01c5\u0003\u0002\u0002\u0002\u01c6\u01c7\u0003",
    "\u0002\u0002\u0002\u01c7\'\u0003\u0002\u0002\u0002\u01c8\u01c9\u0007",
    "\u0011\u0002\u0002\u01c9\u01cb\u0005\u00dep\u0002\u01ca\u01cc\u0005",
    "\u0116\u008c\u0002\u01cb\u01ca\u0003\u0002\u0002\u0002\u01cb\u01cc\u0003",
    "\u0002\u0002\u0002\u01cc\u01ce\u0003\u0002\u0002\u0002\u01cd\u01cf\u0005",
    "\n\u0006\u0002\u01ce\u01cd\u0003\u0002\u0002\u0002\u01ce\u01cf\u0003",
    "\u0002\u0002\u0002\u01cf\u01d0\u0003\u0002\u0002\u0002\u01d0\u01d2\u0005",
    "\u000e\b\u0002\u01d1\u01d3\u0005d3\u0002\u01d2\u01d1\u0003\u0002\u0002",
    "\u0002\u01d2\u01d3\u0003\u0002\u0002\u0002\u01d3\u01d5\u0003\u0002\u0002",
    "\u0002\u01d4\u01d6\u0005f4\u0002\u01d5\u01d4\u0003\u0002\u0002\u0002",
    "\u01d5\u01d6\u0003\u0002\u0002\u0002\u01d6)\u0003\u0002\u0002\u0002",
    "\u01d7\u01d8\u0007\u0012\u0002\u0002\u01d8\u01da\u0005\u00e2r\u0002",
    "\u01d9\u01db\u0005\u0116\u008c\u0002\u01da\u01d9\u0003\u0002\u0002\u0002",
    "\u01da\u01db\u0003\u0002\u0002\u0002\u01db\u01dd\u0003\u0002\u0002\u0002",
    "\u01dc\u01de\u0005\n\u0006\u0002\u01dd\u01dc\u0003\u0002\u0002\u0002",
    "\u01dd\u01de\u0003\u0002\u0002\u0002\u01de\u01df\u0003\u0002\u0002\u0002",
    "\u01df\u01e1\u0005\u000e\b\u0002\u01e0\u01e2\u0005d3\u0002\u01e1\u01e0",
    "\u0003\u0002\u0002\u0002\u01e1\u01e2\u0003\u0002\u0002\u0002\u01e2\u01e4",
    "\u0003\u0002\u0002\u0002\u01e3\u01e5\u0005f4\u0002\u01e4\u01e3\u0003",
    "\u0002\u0002\u0002\u01e4\u01e5\u0003\u0002\u0002\u0002\u01e5+\u0003",
    "\u0002\u0002\u0002\u01e6\u01e7\u0007\u0013\u0002\u0002\u01e7\u01e9\u0005",
    "\u00e4s\u0002\u01e8\u01ea\u0005\u0116\u008c\u0002\u01e9\u01e8\u0003",
    "\u0002\u0002\u0002\u01e9\u01ea\u0003\u0002\u0002\u0002\u01ea\u01ec\u0003",
    "\u0002\u0002\u0002\u01eb\u01ed\u0005\n\u0006\u0002\u01ec\u01eb\u0003",
    "\u0002\u0002\u0002\u01ec\u01ed\u0003\u0002\u0002\u0002\u01ed\u01ee\u0003",
    "\u0002\u0002\u0002\u01ee\u01f0\u0005\u000e\b\u0002\u01ef\u01f1\u0005",
    "\u008cG\u0002\u01f0\u01ef\u0003\u0002\u0002\u0002\u01f0\u01f1\u0003",
    "\u0002\u0002\u0002\u01f1\u01f2\u0003\u0002\u0002\u0002\u01f2\u01f3\u0005",
    "\u008eH\u0002\u01f3-\u0003\u0002\u0002\u0002\u01f4\u01f5\u0007\b\u0002",
    "\u0002\u01f5\u01f7\u0005\u00e0q\u0002\u01f6\u01f8\u0005\u0116\u008c",
    "\u0002\u01f7\u01f6\u0003\u0002\u0002\u0002\u01f7\u01f8\u0003\u0002\u0002",
    "\u0002\u01f8\u01fa\u0003\u0002\u0002\u0002\u01f9\u01fb\u0005\n\u0006",
    "\u0002\u01fa\u01f9\u0003\u0002\u0002\u0002\u01fa\u01fb\u0003\u0002\u0002",
    "\u0002\u01fb\u01fc\u0003\u0002\u0002\u0002\u01fc\u01fe\u0005\u000e\b",
    "\u0002\u01fd\u01ff\u0005\u0090I\u0002\u01fe\u01fd\u0003\u0002\u0002",
    "\u0002\u01ff\u0200\u0003\u0002\u0002\u0002\u0200\u01fe\u0003\u0002\u0002",
    "\u0002\u0200\u0201\u0003\u0002\u0002\u0002\u0201/\u0003\u0002\u0002",
    "\u0002\u0202\u0203\u0007\b\u0002\u0002\u0203\u0204\u0005\u00eex\u0002",
    "\u0204\u0206\u00075\u0002\u0002\u0205\u0207\u0005\u0116\u008c\u0002",
    "\u0206\u0205\u0003\u0002\u0002\u0002\u0206\u0207\u0003\u0002\u0002\u0002",
    "\u0207\u0209\u0003\u0002\u0002\u0002\u0208\u020a\u0005\n\u0006\u0002",
    "\u0209\u0208\u0003\u0002\u0002\u0002\u0209\u020a\u0003\u0002\u0002\u0002",
    "\u020a\u020c\u0003\u0002\u0002\u0002\u020b\u020d\u0005\u0090I\u0002",
    "\u020c\u020b\u0003\u0002\u0002\u0002\u020d\u020e\u0003\u0002\u0002\u0002",
    "\u020e\u020c\u0003\u0002\u0002\u0002\u020e\u020f\u0003\u0002\u0002\u0002",
    "\u020f1\u0003\u0002\u0002\u0002\u0210\u0211\u0007\b\u0002\u0002\u0211",
    "\u0212\u0005\u00e0q\u0002\u0212\u0213\u00076\u0002\u0002\u0213\u0215",
    "\u0005\u00d6l\u0002\u0214\u0216\u0005\u0116\u008c\u0002\u0215\u0214",
    "\u0003\u0002\u0002\u0002\u0215\u0216\u0003\u0002\u0002\u0002\u0216\u0218",
    "\u0003\u0002\u0002\u0002\u0217\u0219\u0005\n\u0006\u0002\u0218\u0217",
    "\u0003\u0002\u0002\u0002\u0218\u0219\u0003\u0002\u0002\u0002\u0219\u021a",
    "\u0003\u0002\u0002\u0002\u021a\u021c\u0005\u000e\b\u0002\u021b\u021d",
    "\u0005\u0090I\u0002\u021c\u021b\u0003\u0002\u0002\u0002\u021d\u021e",
    "\u0003\u0002\u0002\u0002\u021e\u021c\u0003\u0002\u0002\u0002\u021e\u021f",
    "\u0003\u0002\u0002\u0002\u021f3\u0003\u0002\u0002\u0002\u0220\u0221",
    "\u0007\t\u0002\u0002\u0221\u0223\u0005\u00e6t\u0002\u0222\u0224\u0005",
    "\u0116\u008c\u0002\u0223\u0222\u0003\u0002\u0002\u0002\u0223\u0224\u0003",
    "\u0002\u0002\u0002\u0224\u0226\u0003\u0002\u0002\u0002\u0225\u0227\u0005",
    "\n\u0006\u0002\u0226\u0225\u0003\u0002\u0002\u0002\u0226\u0227\u0003",
    "\u0002\u0002\u0002\u0227\u0228\u0003\u0002\u0002\u0002\u0228\u022c\u0005",
    "\u000e\b\u0002\u0229\u022b\u0005\u0090I\u0002\u022a\u0229\u0003\u0002",
    "\u0002\u0002\u022b\u022e\u0003\u0002\u0002\u0002\u022c\u022a\u0003\u0002",
    "\u0002\u0002\u022c\u022d\u0003\u0002\u0002\u0002\u022d\u0230\u0003\u0002",
    "\u0002\u0002\u022e\u022c\u0003\u0002\u0002\u0002\u022f\u0231\u00056",
    "\u001c\u0002\u0230\u022f\u0003\u0002\u0002\u0002\u0230\u0231\u0003\u0002",
    "\u0002\u0002\u02315\u0003\u0002\u0002\u0002\u0232\u0235\u00058\u001d",
    "\u0002\u0233\u0235\u0005:\u001e\u0002\u0234\u0232\u0003\u0002\u0002",
    "\u0002\u0234\u0233\u0003\u0002\u0002\u0002\u0235\u0236\u0003\u0002\u0002",
    "\u0002\u0236\u0238\u0005\u0012\n\u0002\u0237\u0239\u0005J&\u0002\u0238",
    "\u0237\u0003\u0002\u0002\u0002\u0239\u023a\u0003\u0002\u0002\u0002\u023a",
    "\u0238\u0003\u0002\u0002\u0002\u023a\u023b\u0003\u0002\u0002\u0002\u023b",
    "7\u0003\u0002\u0002\u0002\u023c\u023d\u0007P\u0002\u0002\u023d9\u0003",
    "\u0002\u0002\u0002\u023e\u023f\u0007O\u0002\u0002\u023f;\u0003\u0002",
    "\u0002\u0002\u0240\u0241\u0007\n\u0002\u0002\u0241\u0243\u0005\u00e8",
    "u\u0002\u0242\u0244\u0005\u0116\u008c\u0002\u0243\u0242\u0003\u0002",
    "\u0002\u0002\u0243\u0244\u0003\u0002\u0002\u0002\u0244\u0246\u0003\u0002",
    "\u0002\u0002\u0245\u0247\u0005\n\u0006\u0002\u0246\u0245\u0003\u0002",
    "\u0002\u0002\u0246\u0247\u0003\u0002\u0002\u0002\u0247\u0248\u0003\u0002",
    "\u0002\u0002\u0248\u024a\u0005\u000e\b\u0002\u0249\u024b\u0005> \u0002",
    "\u024a\u0249\u0003\u0002\u0002\u0002\u024b\u024c\u0003\u0002\u0002\u0002",
    "\u024c\u024a\u0003\u0002\u0002\u0002\u024c\u024d\u0003\u0002\u0002\u0002",
    "\u024d\u024f\u0003\u0002\u0002\u0002\u024e\u0250\u0005@!\u0002\u024f",
    "\u024e\u0003\u0002\u0002\u0002\u024f\u0250\u0003\u0002\u0002\u0002\u0250",
    "=\u0003\u0002\u0002\u0002\u0251\u0255\t\u0004\u0002\u0002\u0252\u0253",
    "\u0005\u00d8m\u0002\u0253\u0254\u0007^\u0002\u0002\u0254\u0256\u0003",
    "\u0002\u0002\u0002\u0255\u0252\u0003\u0002\u0002\u0002\u0255\u0256\u0003",
    "\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0259\u0005",
    "\u00f8}\u0002\u0258\u025a\u0005\u0116\u008c\u0002\u0259\u0258\u0003",
    "\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a?\u0003",
    "\u0002\u0002\u0002\u025b\u025c\u0007V\u0002\u0002\u025c\u025d\u0007",
    "Z\u0002\u0002\u025dA\u0003\u0002\u0002\u0002\u025e\u025f\u0007\u000b",
    "\u0002\u0002\u025f\u0261\u0005\u00eav\u0002\u0260\u0262\u0005\u0116",
    "\u008c\u0002\u0261\u0260\u0003\u0002\u0002\u0002\u0261\u0262\u0003\u0002",
    "\u0002\u0002\u0262\u0264\u0003\u0002\u0002\u0002\u0263\u0265\u0005\n",
    "\u0006\u0002\u0264\u0263\u0003\u0002\u0002\u0002\u0264\u0265\u0003\u0002",
    "\u0002\u0002\u0265\u0266\u0003\u0002\u0002\u0002\u0266\u0268\u0005\u000e",
    "\b\u0002\u0267\u0269\u0005\u0018\r\u0002\u0268\u0267\u0003\u0002\u0002",
    "\u0002\u0268\u0269\u0003\u0002\u0002\u0002\u0269\u026b\u0003\u0002\u0002",
    "\u0002\u026a\u026c\u0005\u0090I\u0002\u026b\u026a\u0003\u0002\u0002",
    "\u0002\u026c\u026d\u0003\u0002\u0002\u0002\u026d\u026b\u0003\u0002\u0002",
    "\u0002\u026d\u026e\u0003\u0002\u0002\u0002\u026eC\u0003\u0002\u0002",
    "\u0002\u026f\u0270\u0007\u000b\u0002\u0002\u0270\u0271\u0005\u00eex",
    "\u0002\u0271\u0273\u00075\u0002\u0002\u0272\u0274\u0005\u0116\u008c",
    "\u0002\u0273\u0272\u0003\u0002\u0002\u0002\u0273\u0274\u0003\u0002\u0002",
    "\u0002\u0274\u0276\u0003\u0002\u0002\u0002\u0275\u0277\u0005\n\u0006",
    "\u0002\u0276\u0275\u0003\u0002\u0002\u0002\u0276\u0277\u0003\u0002\u0002",
    "\u0002\u0277\u0279\u0003\u0002\u0002\u0002\u0278\u027a\u0005\u0090I",
    "\u0002\u0279\u0278\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002",
    "\u0002\u027b\u0279\u0003\u0002\u0002\u0002\u027b\u027c\u0003\u0002\u0002",
    "\u0002\u027cE\u0003\u0002\u0002\u0002\u027d\u027e\u0007\u000b\u0002",
    "\u0002\u027e\u027f\u0005\u00eav\u0002\u027f\u0280\u00076\u0002\u0002",
    "\u0280\u0282\u0005\u00d6l\u0002\u0281\u0283\u0005\u0116\u008c\u0002",
    "\u0282\u0281\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002\u0002",
    "\u0283\u0285\u0003\u0002\u0002\u0002\u0284\u0286\u0005\n\u0006\u0002",
    "\u0285\u0284\u0003\u0002\u0002\u0002\u0285\u0286\u0003\u0002\u0002\u0002",
    "\u0286\u0287\u0003\u0002\u0002\u0002\u0287\u0289\u0005\u000e\b\u0002",
    "\u0288\u028a\u0005\u0090I\u0002\u0289\u0288\u0003\u0002\u0002\u0002",
    "\u028a\u028b\u0003\u0002\u0002\u0002\u028b\u0289\u0003\u0002\u0002\u0002",
    "\u028b\u028c\u0003\u0002\u0002\u0002\u028cG\u0003\u0002\u0002\u0002",
    "\u028d\u028e\u0007\f\u0002\u0002\u028e\u0290\u0005\u00ecw\u0002\u028f",
    "\u0291\u0005\u0116\u008c\u0002\u0290\u028f\u0003\u0002\u0002\u0002\u0290",
    "\u0291\u0003\u0002\u0002\u0002\u0291\u0293\u0003\u0002\u0002\u0002\u0292",
    "\u0294\u0005\n\u0006\u0002\u0293\u0292\u0003\u0002\u0002\u0002\u0293",
    "\u0294\u0003\u0002\u0002\u0002\u0294\u0295\u0003\u0002\u0002\u0002\u0295",
    "\u0297\u0005\u000e\b\u0002\u0296\u0298\u0005J&\u0002\u0297\u0296\u0003",
    "\u0002\u0002\u0002\u0298\u0299\u0003\u0002\u0002\u0002\u0299\u0297\u0003",
    "\u0002\u0002\u0002\u0299\u029a\u0003\u0002\u0002\u0002\u029aI\u0003",
    "\u0002\u0002\u0002\u029b\u029c\u0007\'\u0002\u0002\u029c\u029e\u0005",
    "L\'\u0002\u029d\u029f\u0005\u0116\u008c\u0002\u029e\u029d\u0003\u0002",
    "\u0002\u0002\u029e\u029f\u0003\u0002\u0002\u0002\u029f\u02a1\u0003\u0002",
    "\u0002\u0002\u02a0\u02a2\u0005\u0010\t\u0002\u02a1\u02a0\u0003\u0002",
    "\u0002\u0002\u02a1\u02a2\u0003\u0002\u0002\u0002\u02a2K\u0003\u0002",
    "\u0002\u0002\u02a3\u02a4\u0007Z\u0002\u0002\u02a4M\u0003\u0002\u0002",
    "\u0002\u02a5\u02a6\u0007\u000f\u0002\u0002\u02a6\u02a8\u0005\u00f2z",
    "\u0002\u02a7\u02a9\u0005\u0116\u008c\u0002\u02a8\u02a7\u0003\u0002\u0002",
    "\u0002\u02a8\u02a9\u0003\u0002\u0002\u0002\u02a9\u02ab\u0003\u0002\u0002",
    "\u0002\u02aa\u02ac\u0005\n\u0006\u0002\u02ab\u02aa\u0003\u0002\u0002",
    "\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac\u02ad\u0003\u0002\u0002",
    "\u0002\u02ad\u02af\u0005\u000e\b\u0002\u02ae\u02b0\u0005\u0090I\u0002",
    "\u02af\u02ae\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002",
    "\u02b1\u02af\u0003\u0002\u0002\u0002\u02b1\u02b2\u0003\u0002\u0002\u0002",
    "\u02b2O\u0003\u0002\u0002\u0002\u02b3\u02b4\u0007\u000e\u0002\u0002",
    "\u02b4\u02b6\u0005\u00f4{\u0002\u02b5\u02b7\u0005\u0116\u008c\u0002",
    "\u02b6\u02b5\u0003\u0002\u0002\u0002\u02b6\u02b7\u0003\u0002\u0002\u0002",
    "\u02b7\u02b9\u0003\u0002\u0002\u0002\u02b8\u02ba\u0005\n\u0006\u0002",
    "\u02b9\u02b8\u0003\u0002\u0002\u0002\u02b9\u02ba\u0003\u0002\u0002\u0002",
    "\u02ba\u02bb\u0003\u0002\u0002\u0002\u02bb\u02bd\u0005\u000e\b\u0002",
    "\u02bc\u02be\u0005R*\u0002\u02bd\u02bc\u0003\u0002\u0002\u0002\u02bd",
    "\u02be\u0003\u0002\u0002\u0002\u02be\u02c0\u0003\u0002\u0002\u0002\u02bf",
    "\u02c1\u0005T+\u0002\u02c0\u02bf\u0003\u0002\u0002\u0002\u02c0\u02c1",
    "\u0003\u0002\u0002\u0002\u02c1\u02c2\u0003\u0002\u0002\u0002\u02c2\u02c3",
    "\u0005V,\u0002\u02c3Q\u0003\u0002\u0002\u0002\u02c4\u02c5\u0007T\u0002",
    "\u0002\u02c5\u02c6\u0007Z\u0002\u0002\u02c6S\u0003\u0002\u0002\u0002",
    "\u02c7\u02c8\u0007U\u0002\u0002\u02c8\u02c9\u0007Z\u0002\u0002\u02c9",
    "U\u0003\u0002\u0002\u0002\u02ca\u02cc\u0005Z.\u0002\u02cb\u02ca\u0003",
    "\u0002\u0002\u0002\u02cc\u02cf\u0003\u0002\u0002\u0002\u02cd\u02cb\u0003",
    "\u0002\u0002\u0002\u02cd\u02ce\u0003\u0002\u0002\u0002\u02ce\u02d0\u0003",
    "\u0002\u0002\u0002\u02cf\u02cd\u0003\u0002\u0002\u0002\u02d0\u02d5\u0005",
    "X-\u0002\u02d1\u02d4\u0005X-\u0002\u02d2\u02d4\u0005Z.\u0002\u02d3\u02d1",
    "\u0003\u0002\u0002\u0002\u02d3\u02d2\u0003\u0002\u0002\u0002\u02d4\u02d7",
    "\u0003\u0002\u0002\u0002\u02d5\u02d3\u0003\u0002\u0002\u0002\u02d5\u02d6",
    "\u0003\u0002\u0002\u0002\u02d6W\u0003\u0002\u0002\u0002\u02d7\u02d5",
    "\u0003\u0002\u0002\u0002\u02d8\u02dc\t\u0005\u0002\u0002\u02d9\u02da",
    "\u0005\u00d8m\u0002\u02da\u02db\u0007^\u0002\u0002\u02db\u02dd\u0003",
    "\u0002\u0002\u0002\u02dc\u02d9\u0003\u0002\u0002\u0002\u02dc\u02dd\u0003",
    "\u0002\u0002\u0002\u02dd\u02de\u0003\u0002\u0002\u0002\u02de\u02e0\u0005",
    "\u00fc\u007f\u0002\u02df\u02e1\u0005\u0116\u008c\u0002\u02e0\u02df\u0003",
    "\u0002\u0002\u0002\u02e0\u02e1\u0003\u0002\u0002\u0002\u02e1Y\u0003",
    "\u0002\u0002\u0002\u02e2\u02e6\t\u0006\u0002\u0002\u02e3\u02e4\u0005",
    "\u00d8m\u0002\u02e4\u02e5\u0007^\u0002\u0002\u02e5\u02e7\u0003\u0002",
    "\u0002\u0002\u02e6\u02e3\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002",
    "\u0002\u0002\u02e7\u02e8\u0003\u0002\u0002\u0002\u02e8\u02ea\u0005\u00fc",
    "\u007f\u0002\u02e9\u02eb\u0005\u0116\u008c\u0002\u02ea\u02e9\u0003\u0002",
    "\u0002\u0002\u02ea\u02eb\u0003\u0002\u0002\u0002\u02eb[\u0003\u0002",
    "\u0002\u0002\u02ec\u02ed\u0007\u000e\u0002\u0002\u02ed\u02ee\u0005\u00ee",
    "x\u0002\u02ee\u02f0\u00075\u0002\u0002\u02ef\u02f1\u0005\u0116\u008c",
    "\u0002\u02f0\u02ef\u0003\u0002\u0002\u0002\u02f0\u02f1\u0003\u0002\u0002",
    "\u0002\u02f1\u02f3\u0003\u0002\u0002\u0002\u02f2\u02f4\u0005\n\u0006",
    "\u0002\u02f3\u02f2\u0003\u0002\u0002\u0002\u02f3\u02f4\u0003\u0002\u0002",
    "\u0002\u02f4\u02f5\u0003\u0002\u0002\u0002\u02f5\u02f6\u0005^0\u0002",
    "\u02f6]\u0003\u0002\u0002\u0002\u02f7\u02fa\u0005X-\u0002\u02f8\u02fa",
    "\u0005Z.\u0002\u02f9\u02f7\u0003\u0002\u0002\u0002\u02f9\u02f8\u0003",
    "\u0002\u0002\u0002\u02fa\u02fb\u0003\u0002\u0002\u0002\u02fb\u02f9\u0003",
    "\u0002\u0002\u0002\u02fb\u02fc\u0003\u0002\u0002\u0002\u02fc_\u0003",
    "\u0002\u0002\u0002\u02fd\u02fe\u0007\u0014\u0002\u0002\u02fe\u02ff\u0005",
    "\u0112\u008a\u0002\u02ff\u0300\u0007K\u0002\u0002\u0300\u0302\u0005",
    "\u0102\u0082\u0002\u0301\u0303\u0005\u0116\u008c\u0002\u0302\u0301\u0003",
    "\u0002\u0002\u0002\u0302\u0303\u0003\u0002\u0002\u0002\u0303\u0305\u0003",
    "\u0002\u0002\u0002\u0304\u0306\u0005\n\u0006\u0002\u0305\u0304\u0003",
    "\u0002\u0002\u0002\u0305\u0306\u0003\u0002\u0002\u0002\u0306\u0307\u0003",
    "\u0002\u0002\u0002\u0307\u0309\u0005\u000e\b\u0002\u0308\u030a\u0005",
    "> \u0002\u0309\u0308\u0003\u0002\u0002\u0002\u030a\u030b\u0003\u0002",
    "\u0002\u0002\u030b\u0309\u0003\u0002\u0002\u0002\u030b\u030c\u0003\u0002",
    "\u0002\u0002\u030c\u030f\u0003\u0002\u0002\u0002\u030d\u030e\u0007L",
    "\u0002\u0002\u030e\u0310\u0005b2\u0002\u030f\u030d\u0003\u0002\u0002",
    "\u0002\u030f\u0310\u0003\u0002\u0002\u0002\u0310a\u0003\u0002\u0002",
    "\u0002\u0311\u0312\u0007X\u0002\u0002\u0312c\u0003\u0002\u0002\u0002",
    "\u0313\u0314\u0007C\u0002\u0002\u0314\u0315\u0005\u00ccg\u0002\u0315",
    "e\u0003\u0002\u0002\u0002\u0316\u0317\u0007D\u0002\u0002\u0317\u0318",
    "\u0005\u00ccg\u0002\u0318g\u0003\u0002\u0002\u0002\u0319\u031a\u0007",
    "C\u0002\u0002\u031a\u031b\u0005l7\u0002\u031bi\u0003\u0002\u0002\u0002",
    "\u031c\u031d\u0007D\u0002\u0002\u031d\u031e\u0005l7\u0002\u031ek\u0003",
    "\u0002\u0002\u0002\u031f\u0322\u0007Y\u0002\u0002\u0320\u0322\u0005",
    "\u00ccg\u0002\u0321\u031f\u0003\u0002\u0002\u0002\u0321\u0320\u0003",
    "\u0002\u0002\u0002\u0322m\u0003\u0002\u0002\u0002\u0323\u0324\u0007",
    "M\u0002\u0002\u0324\u0325\u0007X\u0002\u0002\u0325o\u0003\u0002\u0002",
    "\u0002\u0326\u0327\u00079\u0002\u0002\u0327\u0328\u0007X\u0002\u0002",
    "\u0328q\u0003\u0002\u0002\u0002\u0329\u032a\u0007\u001b\u0002\u0002",
    "\u032as\u0003\u0002\u0002\u0002\u032b\u0332\u0005v<\u0002\u032c\u0332",
    "\u0005x=\u0002\u032d\u0332\u0005z>\u0002\u032e\u0332\u0005|?\u0002\u032f",
    "\u0332\u0005~@\u0002\u0330\u0332\u0005\u0084C\u0002\u0331\u032b\u0003",
    "\u0002\u0002\u0002\u0331\u032c\u0003\u0002\u0002\u0002\u0331\u032d\u0003",
    "\u0002\u0002\u0002\u0331\u032e\u0003\u0002\u0002\u0002\u0331\u032f\u0003",
    "\u0002\u0002\u0002\u0331\u0330\u0003\u0002\u0002\u0002\u0332u\u0003",
    "\u0002\u0002\u0002\u0333\u0334\u0007:\u0002\u0002\u0334w\u0003\u0002",
    "\u0002\u0002\u0335\u0336\u0007;\u0002\u0002\u0336\u0337\u0005\u00d4",
    "k\u0002\u0337y\u0003\u0002\u0002\u0002\u0338\u0339\u0007G\u0002\u0002",
    "\u0339{\u0003\u0002\u0002\u0002\u033a\u033b\u0007E\u0002\u0002\u033b",
    "}\u0003\u0002\u0002\u0002\u033c\u033f\u0005\u0080A\u0002\u033d\u033f",
    "\u0005\u0082B\u0002\u033e\u033c\u0003\u0002\u0002\u0002\u033e\u033d",
    "\u0003\u0002\u0002\u0002\u033f\u007f\u0003\u0002\u0002\u0002\u0340\u0341",
    "\u0007H\u0002\u0002\u0341\u0081\u0003\u0002\u0002\u0002\u0342\u0343",
    "\u0007F\u0002\u0002\u0343\u0083\u0003\u0002\u0002\u0002\u0344\u0345",
    "\u0007=\u0002\u0002\u0345\u0085\u0003\u0002\u0002\u0002\u0346\u0348",
    "\u0005\f\u0007\u0002\u0347\u0346\u0003\u0002\u0002\u0002\u0347\u0348",
    "\u0003\u0002\u0002\u0002\u0348\u0349\u0003\u0002\u0002\u0002\u0349\u034a",
    "\u0005\u0014\u000b\u0002\u034a\u034c\u0005t;\u0002\u034b\u034d\u0005",
    "\u008aF\u0002\u034c\u034b\u0003\u0002\u0002\u0002\u034c\u034d\u0003",
    "\u0002\u0002\u0002\u034d\u034f\u0003\u0002\u0002\u0002\u034e\u0350\u0005",
    "\u0088E\u0002\u034f\u034e\u0003\u0002\u0002\u0002\u034f\u0350\u0003",
    "\u0002\u0002\u0002\u0350\u0087\u0003\u0002\u0002\u0002\u0351\u0352\u0007",
    "<\u0002\u0002\u0352\u0089\u0003\u0002\u0002\u0002\u0353\u0354\u0007",
    "I\u0002\u0002\u0354\u0357\u0005\u0108\u0085\u0002\u0355\u0356\u0007",
    "J\u0002\u0002\u0356\u0358\u0005\u010e\u0088\u0002\u0357\u0355\u0003",
    "\u0002\u0002\u0002\u0357\u0358\u0003\u0002\u0002\u0002\u0358\u008b\u0003",
    "\u0002\u0002\u0002\u0359\u035a\u0007A\u0002\u0002\u035a\u035b\u0007",
    "X\u0002\u0002\u035b\u008d\u0003\u0002\u0002\u0002\u035c\u035d\u0007",
    "B\u0002\u0002\u035d\u035e\u0007X\u0002\u0002\u035e\u008f\u0003\u0002",
    "\u0002\u0002\u035f\u0377\u0005\u00acW\u0002\u0360\u0377\u0005\u0092",
    "J\u0002\u0361\u0377\u0005\u00a6T\u0002\u0362\u0377\u0005\u00a2R\u0002",
    "\u0363\u0377\u0005\u0094K\u0002\u0364\u0377\u0005\u0096L\u0002\u0365",
    "\u0377\u0005\u0098M\u0002\u0366\u0377\u0005\u009aN\u0002\u0367\u0377",
    "\u0005\u009cO\u0002\u0368\u0377\u0005\u00aeX\u0002\u0369\u0377\u0005",
    "\u009eP\u0002\u036a\u0377\u0005\u00a0Q\u0002\u036b\u0377\u0005\u00a4",
    "S\u0002\u036c\u0377\u0005\u00a8U\u0002\u036d\u0377\u0005\u00aaV\u0002",
    "\u036e\u0377\u0005\u00b0Y\u0002\u036f\u0377\u0005\u00b2Z\u0002\u0370",
    "\u0377\u0005\u00b4[\u0002\u0371\u0377\u0005\u00b6\\\u0002\u0372\u0377",
    "\u0005\u00b8]\u0002\u0373\u0377\u0005\u00ba^\u0002\u0374\u0377\u0005",
    "\u00bc_\u0002\u0375\u0377\u0005\u00be`\u0002\u0376\u035f\u0003\u0002",
    "\u0002\u0002\u0376\u0360\u0003\u0002\u0002\u0002\u0376\u0361\u0003\u0002",
    "\u0002\u0002\u0376\u0362\u0003\u0002\u0002\u0002\u0376\u0363\u0003\u0002",
    "\u0002\u0002\u0376\u0364\u0003\u0002\u0002\u0002\u0376\u0365\u0003\u0002",
    "\u0002\u0002\u0376\u0366\u0003\u0002\u0002\u0002\u0376\u0367\u0003\u0002",
    "\u0002\u0002\u0376\u0368\u0003\u0002\u0002\u0002\u0376\u0369\u0003\u0002",
    "\u0002\u0002\u0376\u036a\u0003\u0002\u0002\u0002\u0376\u036b\u0003\u0002",
    "\u0002\u0002\u0376\u036c\u0003\u0002\u0002\u0002\u0376\u036d\u0003\u0002",
    "\u0002\u0002\u0376\u036e\u0003\u0002\u0002\u0002\u0376\u036f\u0003\u0002",
    "\u0002\u0002\u0376\u0370\u0003\u0002\u0002\u0002\u0376\u0371\u0003\u0002",
    "\u0002\u0002\u0376\u0372\u0003\u0002\u0002\u0002\u0376\u0373\u0003\u0002",
    "\u0002\u0002\u0376\u0374\u0003\u0002\u0002\u0002\u0376\u0375\u0003\u0002",
    "\u0002\u0002\u0377\u0091\u0003\u0002\u0002\u0002\u0378\u0379\u0007\u0018",
    "\u0002\u0002\u0379\u037b\u0005\u0110\u0089\u0002\u037a\u037c\u0005\u0116",
    "\u008c\u0002\u037b\u037a\u0003\u0002\u0002\u0002\u037b\u037c\u0003\u0002",
    "\u0002\u0002\u037c\u037d\u0003\u0002\u0002\u0002\u037d\u037e\u0005\u0086",
    "D\u0002\u037e\u0093\u0003\u0002\u0002\u0002\u037f\u0380\u0007\u001c",
    "\u0002\u0002\u0380\u0382\u0005\u0110\u0089\u0002\u0381\u0383\u0005\u0116",
    "\u008c\u0002\u0382\u0381\u0003\u0002\u0002\u0002\u0382\u0383\u0003\u0002",
    "\u0002\u0002\u0383\u0384\u0003\u0002\u0002\u0002\u0384\u0385\u0005\u0086",
    "D\u0002\u0385\u0095\u0003\u0002\u0002\u0002\u0386\u0387\u0007\u001d",
    "\u0002\u0002\u0387\u0389\u0005\u0110\u0089\u0002\u0388\u038a\u0005\u0116",
    "\u008c\u0002\u0389\u0388\u0003\u0002\u0002\u0002\u0389\u038a\u0003\u0002",
    "\u0002\u0002\u038a\u038b\u0003\u0002\u0002\u0002\u038b\u038c\u0005\u0086",
    "D\u0002\u038c\u0097\u0003\u0002\u0002\u0002\u038d\u038e\u0007\u001e",
    "\u0002\u0002\u038e\u0390\u0005\u0110\u0089\u0002\u038f\u0391\u0005\u0116",
    "\u008c\u0002\u0390\u038f\u0003\u0002\u0002\u0002\u0390\u0391\u0003\u0002",
    "\u0002\u0002\u0391\u0392\u0003\u0002\u0002\u0002\u0392\u0393\u0005\u0086",
    "D\u0002\u0393\u0099\u0003\u0002\u0002\u0002\u0394\u0395\u0007\u001f",
    "\u0002\u0002\u0395\u0397\u0005\u0110\u0089\u0002\u0396\u0398\u0005\u0116",
    "\u008c\u0002\u0397\u0396\u0003\u0002\u0002\u0002\u0397\u0398\u0003\u0002",
    "\u0002\u0002\u0398\u0399\u0003\u0002\u0002\u0002\u0399\u039a\u0005\u0086",
    "D\u0002\u039a\u039b\u0005n8\u0002\u039b\u039d\u0005p9\u0002\u039c\u039e",
    "\u0005h5\u0002\u039d\u039c\u0003\u0002\u0002\u0002\u039d\u039e\u0003",
    "\u0002\u0002\u0002\u039e\u03a0\u0003\u0002\u0002\u0002\u039f\u03a1\u0005",
    "j6\u0002\u03a0\u039f\u0003\u0002\u0002\u0002\u03a0\u03a1\u0003\u0002",
    "\u0002\u0002\u03a1\u009b\u0003\u0002\u0002\u0002\u03a2\u03a3\u0007 ",
    "\u0002\u0002\u03a3\u03a5\u0005\u0104\u0083\u0002\u03a4\u03a6\u0005\u0116",
    "\u008c\u0002\u03a5\u03a4\u0003\u0002\u0002\u0002\u03a5\u03a6\u0003\u0002",
    "\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7\u03a8\u0005\u0086",
    "D\u0002\u03a8\u009d\u0003\u0002\u0002\u0002\u03a9\u03aa\u0007$\u0002",
    "\u0002\u03aa\u03ac\u0005\u0110\u0089\u0002\u03ab\u03ad\u0005\u0116\u008c",
    "\u0002\u03ac\u03ab\u0003\u0002\u0002\u0002\u03ac\u03ad\u0003\u0002\u0002",
    "\u0002\u03ad\u03ae\u0003\u0002\u0002\u0002\u03ae\u03af\u0005\u0086D",
    "\u0002\u03af\u009f\u0003\u0002\u0002\u0002\u03b0\u03b1\u0007&\u0002",
    "\u0002\u03b1\u03b3\u0005\u0104\u0083\u0002\u03b2\u03b4\u0005\u0116\u008c",
    "\u0002\u03b3\u03b2\u0003\u0002\u0002\u0002\u03b3\u03b4\u0003\u0002\u0002",
    "\u0002\u03b4\u03b5\u0003\u0002\u0002\u0002\u03b5\u03b6\u0005\u0086D",
    "\u0002\u03b6\u00a1\u0003\u0002\u0002\u0002\u03b7\u03ba\u0007\u001a\u0002",
    "\u0002\u03b8\u03ba\u0005r:\u0002\u03b9\u03b7\u0003\u0002\u0002\u0002",
    "\u03b9\u03b8\u0003\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002",
    "\u03bb\u03bd\u0005\u0104\u0083\u0002\u03bc\u03be\u0005\u0116\u008c\u0002",
    "\u03bd\u03bc\u0003\u0002\u0002\u0002\u03bd\u03be\u0003\u0002\u0002\u0002",
    "\u03be\u03bf\u0003\u0002\u0002\u0002\u03bf\u03c3\u0005\u0086D\u0002",
    "\u03c0\u03c2\u0005\u00c4c\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002",
    "\u03c2\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c1\u0003\u0002\u0002\u0002",
    "\u03c3\u03c4\u0003\u0002\u0002\u0002\u03c4\u00a3\u0003\u0002\u0002\u0002",
    "\u03c5\u03c3\u0003\u0002\u0002\u0002\u03c6\u03c7\u0007(\u0002\u0002",
    "\u03c7\u03c9\u0005\u0104\u0083\u0002\u03c8\u03ca\u0005\u0116\u008c\u0002",
    "\u03c9\u03c8\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002\u0002\u0002",
    "\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb\u03cf\u0005\u0086D\u0002",
    "\u03cc\u03ce\u0005\u00c4c\u0002\u03cd\u03cc\u0003\u0002\u0002\u0002",
    "\u03ce\u03d1\u0003\u0002\u0002\u0002\u03cf\u03cd\u0003\u0002\u0002\u0002",
    "\u03cf\u03d0\u0003\u0002\u0002\u0002\u03d0\u00a5\u0003\u0002\u0002\u0002",
    "\u03d1\u03cf\u0003\u0002\u0002\u0002\u03d2\u03d3\u0007\u0019\u0002\u0002",
    "\u03d3\u03d5\u0005\u0104\u0083\u0002\u03d4\u03d6\u0005\u0116\u008c\u0002",
    "\u03d5\u03d4\u0003\u0002\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002",
    "\u03d6\u03d7\u0003\u0002\u0002\u0002\u03d7\u03db\u0005\u0086D\u0002",
    "\u03d8\u03da\u0005\u00c4c\u0002\u03d9\u03d8\u0003\u0002\u0002\u0002",
    "\u03da\u03dd\u0003\u0002\u0002\u0002\u03db\u03d9\u0003\u0002\u0002\u0002",
    "\u03db\u03dc\u0003\u0002\u0002\u0002\u03dc\u00a7\u0003\u0002\u0002\u0002",
    "\u03dd\u03db\u0003\u0002\u0002\u0002\u03de\u03df\u0007)\u0002\u0002",
    "\u03df\u03e1\u0005\u0110\u0089\u0002\u03e0\u03e2\u0005\u0116\u008c\u0002",
    "\u03e1\u03e0\u0003\u0002\u0002\u0002\u03e1\u03e2\u0003\u0002\u0002\u0002",
    "\u03e2\u03e3\u0003\u0002\u0002\u0002\u03e3\u03e5\u0005\u0086D\u0002",
    "\u03e4\u03e6\u0005d3\u0002\u03e5\u03e4\u0003\u0002\u0002\u0002\u03e5",
    "\u03e6\u0003\u0002\u0002\u0002\u03e6\u03e8\u0003\u0002\u0002\u0002\u03e7",
    "\u03e9\u0005f4\u0002\u03e8\u03e7\u0003\u0002\u0002\u0002\u03e8\u03e9",
    "\u0003\u0002\u0002\u0002\u03e9\u00a9\u0003\u0002\u0002\u0002\u03ea\u03eb",
    "\u0007*\u0002\u0002\u03eb\u03ed\u0005\u0110\u0089\u0002\u03ec\u03ee",
    "\u0005\u0116\u008c\u0002\u03ed\u03ec\u0003\u0002\u0002\u0002\u03ed\u03ee",
    "\u0003\u0002\u0002\u0002\u03ee\u03ef\u0003\u0002\u0002\u0002\u03ef\u03f0",
    "\u0005\u0086D\u0002\u03f0\u00ab\u0003\u0002\u0002\u0002\u03f1\u03f2",
    "\u0007\u0016\u0002\u0002\u03f2\u03f4\u0005\u0104\u0083\u0002\u03f3\u03f5",
    "\u0005\u0116\u008c\u0002\u03f4\u03f3\u0003\u0002\u0002\u0002\u03f4\u03f5",
    "\u0003\u0002\u0002\u0002\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u03f8",
    "\u0005\u0086D\u0002\u03f7\u03f9\u0005\u00c2b\u0002\u03f8\u03f7\u0003",
    "\u0002\u0002\u0002\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9\u03fb\u0003",
    "\u0002\u0002\u0002\u03fa\u03fc\u0005\u00c0a\u0002\u03fb\u03fa\u0003",
    "\u0002\u0002\u0002\u03fb\u03fc\u0003\u0002\u0002\u0002\u03fc\u0400\u0003",
    "\u0002\u0002\u0002\u03fd\u03ff\u0005\u00c4c\u0002\u03fe\u03fd\u0003",
    "\u0002\u0002\u0002\u03ff\u0402\u0003\u0002\u0002\u0002\u0400\u03fe\u0003",
    "\u0002\u0002\u0002\u0400\u0401\u0003\u0002\u0002\u0002\u0401\u00ad\u0003",
    "\u0002\u0002\u0002\u0402\u0400\u0003\u0002\u0002\u0002\u0403\u0404\u0007",
    "!\u0002\u0002\u0404\u0406\u0005\u0104\u0083\u0002\u0405\u0407\u0005",
    "\u0116\u008c\u0002\u0406\u0405\u0003\u0002\u0002\u0002\u0406\u0407\u0003",
    "\u0002\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002\u0408\u040a\u0005",
    "\u0086D\u0002\u0409\u040b\u0005\u00c2b\u0002\u040a\u0409\u0003\u0002",
    "\u0002\u0002\u040a\u040b\u0003\u0002\u0002\u0002\u040b\u040d\u0003\u0002",
    "\u0002\u0002\u040c\u040e\u0005\u00c0a\u0002\u040d\u040c\u0003\u0002",
    "\u0002\u0002\u040d\u040e\u0003\u0002\u0002\u0002\u040e\u0412\u0003\u0002",
    "\u0002\u0002\u040f\u0411\u0005\u00c4c\u0002\u0410\u040f\u0003\u0002",
    "\u0002\u0002\u0411\u0414\u0003\u0002\u0002\u0002\u0412\u0410\u0003\u0002",
    "\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002\u0413\u00af\u0003\u0002",
    "\u0002\u0002\u0414\u0412\u0003\u0002\u0002\u0002\u0415\u0416\u0007,",
    "\u0002\u0002\u0416\u0419\u0005\u010c\u0087\u0002\u0417\u0418\u00070",
    "\u0002\u0002\u0418\u041a\u0005\u010a\u0086\u0002\u0419\u0417\u0003\u0002",
    "\u0002\u0002\u0419\u041a\u0003\u0002\u0002\u0002\u041a\u041c\u0003\u0002",
    "\u0002\u0002\u041b\u041d\u0005\u0116\u008c\u0002\u041c\u041b\u0003\u0002",
    "\u0002\u0002\u041c\u041d\u0003\u0002\u0002\u0002\u041d\u041e\u0003\u0002",
    "\u0002\u0002\u041e\u0422\u0005\u0086D\u0002\u041f\u0421\u0005\u00c4",
    "c\u0002\u0420\u041f\u0003\u0002\u0002\u0002\u0421\u0424\u0003\u0002",
    "\u0002\u0002\u0422\u0420\u0003\u0002\u0002\u0002\u0422\u0423\u0003\u0002",
    "\u0002\u0002\u0423\u00b1\u0003\u0002\u0002\u0002\u0424\u0422\u0003\u0002",
    "\u0002\u0002\u0425\u0426\u0007-\u0002\u0002\u0426\u0429\u0005\u010c",
    "\u0087\u0002\u0427\u0428\u00070\u0002\u0002\u0428\u042a\u0005\u010a",
    "\u0086\u0002\u0429\u0427\u0003\u0002\u0002\u0002\u0429\u042a\u0003\u0002",
    "\u0002\u0002\u042a\u042c\u0003\u0002\u0002\u0002\u042b\u042d\u0005\u0116",
    "\u008c\u0002\u042c\u042b\u0003\u0002\u0002\u0002\u042c\u042d\u0003\u0002",
    "\u0002\u0002\u042d\u042e\u0003\u0002\u0002\u0002\u042e\u0432\u0005\u0086",
    "D\u0002\u042f\u0431\u0005\u00c4c\u0002\u0430\u042f\u0003\u0002\u0002",
    "\u0002\u0431\u0434\u0003\u0002\u0002\u0002\u0432\u0430\u0003\u0002\u0002",
    "\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u00b3\u0003\u0002\u0002",
    "\u0002\u0434\u0432\u0003\u0002\u0002\u0002\u0435\u0436\u0007.\u0002",
    "\u0002\u0436\u0439\u0005\u010c\u0087\u0002\u0437\u0438\u00070\u0002",
    "\u0002\u0438\u043a\u0005\u010a\u0086\u0002\u0439\u0437\u0003\u0002\u0002",
    "\u0002\u0439\u043a\u0003\u0002\u0002\u0002\u043a\u043c\u0003\u0002\u0002",
    "\u0002\u043b\u043d\u0005\u0116\u008c\u0002\u043c\u043b\u0003\u0002\u0002",
    "\u0002\u043c\u043d\u0003\u0002\u0002\u0002\u043d\u043e\u0003\u0002\u0002",
    "\u0002\u043e\u0442\u0005\u0086D\u0002\u043f\u0441\u0005\u00c4c\u0002",
    "\u0440\u043f\u0003\u0002\u0002\u0002\u0441\u0444\u0003\u0002\u0002\u0002",
    "\u0442\u0440\u0003\u0002\u0002\u0002\u0442\u0443\u0003\u0002\u0002\u0002",
    "\u0443\u00b5\u0003\u0002\u0002\u0002\u0444\u0442\u0003\u0002\u0002\u0002",
    "\u0445\u0446\u0007/\u0002\u0002\u0446\u0449\u0005\u010c\u0087\u0002",
    "\u0447\u0448\u00070\u0002\u0002\u0448\u044a\u0005\u010a\u0086\u0002",
    "\u0449\u0447\u0003\u0002\u0002\u0002\u0449\u044a\u0003\u0002\u0002\u0002",
    "\u044a\u044c\u0003\u0002\u0002\u0002\u044b\u044d\u0005\u0116\u008c\u0002",
    "\u044c\u044b\u0003\u0002\u0002\u0002\u044c\u044d\u0003\u0002\u0002\u0002",
    "\u044d\u044e\u0003\u0002\u0002\u0002\u044e\u0452\u0005\u0086D\u0002",
    "\u044f\u0451\u0005\u00c4c\u0002\u0450\u044f\u0003\u0002\u0002\u0002",
    "\u0451\u0454\u0003\u0002\u0002\u0002\u0452\u0450\u0003\u0002\u0002\u0002",
    "\u0452\u0453\u0003\u0002\u0002\u0002\u0453\u00b7\u0003\u0002\u0002\u0002",
    "\u0454\u0452\u0003\u0002\u0002\u0002\u0455\u0456\u00071\u0002\u0002",
    "\u0456\u0458\u0005\u0110\u0089\u0002\u0457\u0459\u0005\u0116\u008c\u0002",
    "\u0458\u0457\u0003\u0002\u0002\u0002\u0458\u0459\u0003\u0002\u0002\u0002",
    "\u0459\u045a\u0003\u0002\u0002\u0002\u045a\u045c\u0005\u0086D\u0002",
    "\u045b\u045d\u0005d3\u0002\u045c\u045b\u0003\u0002\u0002\u0002\u045c",
    "\u045d\u0003\u0002\u0002\u0002\u045d\u045f\u0003\u0002\u0002\u0002\u045e",
    "\u0460\u0005f4\u0002\u045f\u045e\u0003\u0002\u0002\u0002\u045f\u0460",
    "\u0003\u0002\u0002\u0002\u0460\u00b9\u0003\u0002\u0002\u0002\u0461\u0462",
    "\u00072\u0002\u0002\u0462\u0464\u0005\u0110\u0089\u0002\u0463\u0465",
    "\u0005\u0116\u008c\u0002\u0464\u0463\u0003\u0002\u0002\u0002\u0464\u0465",
    "\u0003\u0002\u0002\u0002\u0465\u0466\u0003\u0002\u0002\u0002\u0466\u0468",
    "\u0005\u0086D\u0002\u0467\u0469\u0005\u008cG\u0002\u0468\u0467\u0003",
    "\u0002\u0002\u0002\u0468\u0469\u0003\u0002\u0002\u0002\u0469\u046a\u0003",
    "\u0002\u0002\u0002\u046a\u046b\u0005\u008eH\u0002\u046b\u00bb\u0003",
    "\u0002\u0002\u0002\u046c\u046d\u00073\u0002\u0002\u046d\u046f\u0005",
    "\u0110\u0089\u0002\u046e\u0470\u0005\u0116\u008c\u0002\u046f\u046e\u0003",
    "\u0002\u0002\u0002\u046f\u0470\u0003\u0002\u0002\u0002\u0470\u0471\u0003",
    "\u0002\u0002\u0002\u0471\u0472\u0005\u0086D\u0002\u0472\u00bd\u0003",
    "\u0002\u0002\u0002\u0473\u0474\u00074\u0002\u0002\u0474\u0476\u0005",
    "\u0110\u0089\u0002\u0475\u0477\u0005\u0116\u008c\u0002\u0476\u0475\u0003",
    "\u0002\u0002\u0002\u0476\u0477\u0003\u0002\u0002\u0002\u0477\u0478\u0003",
    "\u0002\u0002\u0002\u0478\u0479\u0005\u0086D\u0002\u0479\u00bf\u0003",
    "\u0002\u0002\u0002\u047a\u047b\u0007>\u0002\u0002\u047b\u00c1\u0003",
    "\u0002\u0002\u0002\u047c\u047d\u0007?\u0002\u0002\u047d\u00c3\u0003",
    "\u0002\u0002\u0002\u047e\u047f\u0007@\u0002\u0002\u047f\u0480\u0005",
    "\u00c6d\u0002\u0480\u0481\u0007N\u0002\u0002\u0481\u0482\u0005\u00c8",
    "e\u0002\u0482\u00c5\u0003\u0002\u0002\u0002\u0483\u0484\u0005\u00ca",
    "f\u0002\u0484\u00c7\u0003\u0002\u0002\u0002\u0485\u0486\u0005\u00ca",
    "f\u0002\u0486\u00c9\u0003\u0002\u0002\u0002\u0487\u048c\u0007W\u0002",
    "\u0002\u0488\u0489\u0007^\u0002\u0002\u0489\u048b\u0007W\u0002\u0002",
    "\u048a\u0488\u0003\u0002\u0002\u0002\u048b\u048e\u0003\u0002\u0002\u0002",
    "\u048c\u048a\u0003\u0002\u0002\u0002\u048c\u048d\u0003\u0002\u0002\u0002",
    "\u048d\u00cb\u0003\u0002\u0002\u0002\u048e\u048c\u0003\u0002\u0002\u0002",
    "\u048f\u0491\u0005\u00ceh\u0002\u0490\u048f\u0003\u0002\u0002\u0002",
    "\u0490\u0491\u0003\u0002\u0002\u0002\u0491\u0492\u0003\u0002\u0002\u0002",
    "\u0492\u0493\u0007X\u0002\u0002\u0493\u00cd\u0003\u0002\u0002\u0002",
    "\u0494\u0495\t\u0007\u0002\u0002\u0495\u00cf\u0003\u0002\u0002\u0002",
    "\u0496\u0497\u0007W\u0002\u0002\u0497\u00d1\u0003\u0002\u0002\u0002",
    "\u0498\u0499\u0007W\u0002\u0002\u0499\u00d3\u0003\u0002\u0002\u0002",
    "\u049a\u049b\u0007W\u0002\u0002\u049b\u00d5\u0003\u0002\u0002\u0002",
    "\u049c\u049d\u0005\u00d8m\u0002\u049d\u049e\u0007^\u0002\u0002\u049e",
    "\u04a0\u0003\u0002\u0002\u0002\u049f\u049c\u0003\u0002\u0002\u0002\u049f",
    "\u04a0\u0003\u0002\u0002\u0002\u04a0\u04a1\u0003\u0002\u0002\u0002\u04a1",
    "\u04a2\u0005\u00f6|\u0002\u04a2\u00d7\u0003\u0002\u0002\u0002\u04a3",
    "\u04a4\u0007W\u0002\u0002\u04a4\u00d9\u0003\u0002\u0002\u0002\u04a5",
    "\u04a6\u0007W\u0002\u0002\u04a6\u00db\u0003\u0002\u0002\u0002\u04a7",
    "\u04a8\u0007W\u0002\u0002\u04a8\u00dd\u0003\u0002\u0002\u0002\u04a9",
    "\u04aa\u0007W\u0002\u0002\u04aa\u00df\u0003\u0002\u0002\u0002\u04ab",
    "\u04ac\u0007W\u0002\u0002\u04ac\u00e1\u0003\u0002\u0002\u0002\u04ad",
    "\u04ae\u0007W\u0002\u0002\u04ae\u00e3\u0003\u0002\u0002\u0002\u04af",
    "\u04b0\u0007W\u0002\u0002\u04b0\u00e5\u0003\u0002\u0002\u0002\u04b1",
    "\u04b2\u0007W\u0002\u0002\u04b2\u00e7\u0003\u0002\u0002\u0002\u04b3",
    "\u04b4\u0007W\u0002\u0002\u04b4\u00e9\u0003\u0002\u0002\u0002\u04b5",
    "\u04b6\u0007W\u0002\u0002\u04b6\u00eb\u0003\u0002\u0002\u0002\u04b7",
    "\u04b8\u0007W\u0002\u0002\u04b8\u00ed\u0003\u0002\u0002\u0002\u04b9",
    "\u04ba\u0005\u00f0y\u0002\u04ba\u04bb\u0007^\u0002\u0002\u04bb\u04bd",
    "\u0003\u0002\u0002\u0002\u04bc\u04b9\u0003\u0002\u0002\u0002\u04bc\u04bd",
    "\u0003\u0002\u0002\u0002\u04bd\u04be\u0003\u0002\u0002\u0002\u04be\u04bf",
    "\u0005\u00fa~\u0002\u04bf\u00ef\u0003\u0002\u0002\u0002\u04c0\u04c1",
    "\u0007W\u0002\u0002\u04c1\u00f1\u0003\u0002\u0002\u0002\u04c2\u04c3",
    "\u0007W\u0002\u0002\u04c3\u00f3\u0003\u0002\u0002\u0002\u04c4\u04c5",
    "\u0007W\u0002\u0002\u04c5\u00f5\u0003\u0002\u0002\u0002\u04c6\u04c7",
    "\u0007W\u0002\u0002\u04c7\u00f7\u0003\u0002\u0002\u0002\u04c8\u04c9",
    "\u0007W\u0002\u0002\u04c9\u00f9\u0003\u0002\u0002\u0002\u04ca\u04cb",
    "\u0007W\u0002\u0002\u04cb\u00fb\u0003\u0002\u0002\u0002\u04cc\u04cd",
    "\u0007W\u0002\u0002\u04cd\u00fd\u0003\u0002\u0002\u0002\u04ce\u04cf",
    "\u0007W\u0002\u0002\u04cf\u00ff\u0003\u0002\u0002\u0002\u04d0\u04d1",
    "\u0007W\u0002\u0002\u04d1\u0101\u0003\u0002\u0002\u0002\u04d2\u04d3",
    "\u0007W\u0002\u0002\u04d3\u0103\u0003\u0002\u0002\u0002\u04d4\u04d5",
    "\u0005\u0106\u0084\u0002\u04d5\u04d6\u0007^\u0002\u0002\u04d6\u04d8",
    "\u0003\u0002\u0002\u0002\u04d7\u04d4\u0003\u0002\u0002\u0002\u04d7\u04d8",
    "\u0003\u0002\u0002\u0002\u04d8\u04d9\u0003\u0002\u0002\u0002\u04d9\u04da",
    "\u0005\u00fe\u0080\u0002\u04da\u0105\u0003\u0002\u0002\u0002\u04db\u04dc",
    "\u0007W\u0002\u0002\u04dc\u0107\u0003\u0002\u0002\u0002\u04dd\u04de",
    "\u0007W\u0002\u0002\u04de\u0109\u0003\u0002\u0002\u0002\u04df\u04e0",
    "\u0007W\u0002\u0002\u04e0\u010b\u0003\u0002\u0002\u0002\u04e1\u04e2",
    "\u0005\u0106\u0084\u0002\u04e2\u04e3\u0007^\u0002\u0002\u04e3\u04e5",
    "\u0003\u0002\u0002\u0002\u04e4\u04e1\u0003\u0002\u0002\u0002\u04e4\u04e5",
    "\u0003\u0002\u0002\u0002\u04e5\u04e6\u0003\u0002\u0002\u0002\u04e6\u04e7",
    "\u0005\u0100\u0081\u0002\u04e7\u010d\u0003\u0002\u0002\u0002\u04e8\u04e9",
    "\u0007W\u0002\u0002\u04e9\u010f\u0003\u0002\u0002\u0002\u04ea\u04eb",
    "\u0005\u00fe\u0080\u0002\u04eb\u0111\u0003\u0002\u0002\u0002\u04ec\u04ed",
    "\u0007W\u0002\u0002\u04ed\u0113\u0003\u0002\u0002\u0002\u04ee\u04ef",
    "\u0007W\u0002\u0002\u04ef\u0115\u0003\u0002\u0002\u0002\u04f0\u04f1",
    "\u0007[\u0002\u0002\u04f1\u0117\u0003\u0002\u0002\u0002\u00a0\u011b",
    "\u0123\u013f\u0156\u0159\u015f\u0168\u016b\u016f\u0176\u017c\u017f\u0183",
    "\u0188\u018f\u0192\u0197\u019e\u01a1\u01a7\u01ac\u01af\u01b5\u01ba\u01bd",
    "\u01c3\u01c6\u01cb\u01ce\u01d2\u01d5\u01da\u01dd\u01e1\u01e4\u01e9\u01ec",
    "\u01f0\u01f7\u01fa\u0200\u0206\u0209\u020e\u0215\u0218\u021e\u0223\u0226",
    "\u022c\u0230\u0234\u023a\u0243\u0246\u024c\u024f\u0255\u0259\u0261\u0264",
    "\u0268\u026d\u0273\u0276\u027b\u0282\u0285\u028b\u0290\u0293\u0299\u029e",
    "\u02a1\u02a8\u02ab\u02b1\u02b6\u02b9\u02bd\u02c0\u02cd\u02d3\u02d5\u02dc",
    "\u02e0\u02e6\u02ea\u02f0\u02f3\u02f9\u02fb\u0302\u0305\u030b\u030f\u0321",
    "\u0331\u033e\u0347\u034c\u034f\u0357\u0376\u037b\u0382\u0389\u0390\u0397",
    "\u039d\u03a0\u03a5\u03ac\u03b3\u03b9\u03bd\u03c3\u03c9\u03cf\u03d5\u03db",
    "\u03e1\u03e5\u03e8\u03ed\u03f4\u03f8\u03fb\u0400\u0406\u040a\u040d\u0412",
    "\u0419\u041c\u0422\u0429\u042c\u0432\u0439\u043c\u0442\u0449\u044c\u0452",
    "\u0458\u045c\u045f\u0464\u0468\u046f\u0476\u048c\u0490\u049f\u04bc\u04d7",
    "\u04e4"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, "'Abstract Entity'", "'Association'", "'Begin Namespace'", 
                     "'End Namespace'", "'Choice'", "'Common'", "'Descriptor'", 
                     "'Domain'", "'Domain Entity'", "'Enumeration'", "'Inline'", 
                     "'Interchange'", "'Inline Common'", "'Shared Decimal'", 
                     "'Shared Integer'", "'Shared Short'", "'Shared String'", 
                     "'Subdomain'", "'Type'", "'association'", "'association identity'", 
                     "'bool'", "'choice'", "'common'", "'common extension'", 
                     "'currency'", "'date'", "'datetime'", "'decimal'", 
                     "'descriptor'", "'domain entity'", "'domain entity identity'", 
                     "'domain item'", "'duration'", "'element'", "'enumeration'", 
                     "'item'", "'inline common'", "'integer'", "'percent'", 
                     "'reference'", "'shared decimal'", "'shared integer'", 
                     "'shared short'", "'shared string'", "'named'", "'short'", 
                     "'string'", "'time'", "'year'", "'additions'", "'based on'", 
                     "'core'", "'allow primary key updates'", "'decimal places'", 
                     "'is part of identity'", "'renames identity property'", 
                     "'is queryable field'", "'is queryable only'", "'is weak'", 
                     "'possibly external'", "'merge'", "'min length'", "'max length'", 
                     "'min value'", "'max value'", "'is optional'", "'is optional collection'", 
                     "'is required'", "'is required collection'", "'role name'", 
                     "'shorten to'", "'of'", "'position'", "'total digits'", 
                     "'with'", "'with optional map type'", "'with map type'", 
                     "'deprecated'", "'documentation'", "'inherited'", "'extended documentation'", 
                     "'use case documentation'", "'footer documentation'", 
                     null, null, null, null, null, "'+'", "'-'", "'.'" ];

var symbolicNames = [ null, "ABSTRACT_ENTITY", "ASSOCIATION", "BEGIN_NAMESPACE", 
                      "END_NAMESPACE", "CHOICE", "COMMON", "DESCRIPTOR", 
                      "DOMAIN", "DOMAIN_ENTITY", "ENUMERATION", "INLINE", 
                      "INTERCHANGE", "INLINE_COMMON", "SHARED_DECIMAL", 
                      "SHARED_INTEGER", "SHARED_SHORT", "SHARED_STRING", 
                      "SUBDOMAIN", "TYPE", "ASSOCIATION_KEYWORD", "ASSOCIATION_IDENTITY", 
                      "BOOLEAN", "CHOICE_KEYWORD", "COMMON_KEYWORD", "COMMON_EXTENSION", 
                      "CURRENCY", "DATE", "DATETIME", "DECIMAL", "DESCRIPTOR_KEYWORD", 
                      "DOMAIN_ENTITY_KEYWORD", "DOMAIN_ENTITY_IDENTITY", 
                      "DOMAIN_ITEM", "DURATION", "ELEMENT", "ENUMERATION_KEYWORD", 
                      "ENUMERATION_ITEM", "INLINE_COMMON_KEYWORD", "INTEGER", 
                      "PERCENT", "REFERENCE", "SHARED_DECIMAL_KEYWORD", 
                      "SHARED_INTEGER_KEYWORD", "SHARED_SHORT_KEYWORD", 
                      "SHARED_STRING_KEYWORD", "SHARED_NAMED", "SHORT", 
                      "STRING", "TIME", "YEAR", "ADDITIONS", "BASED_ON", 
                      "CORE", "CASCADE_UPDATE", "DECIMAL_PLACES", "IDENTITY", 
                      "IDENTITY_RENAME", "IS_QUERYABLE_FIELD", "IS_QUERYABLE_ONLY", 
                      "IS_WEAK_REFERENCE", "POSSIBLY_EXTERNAL", "MERGE_REFERENCE", 
                      "MIN_LENGTH", "MAX_LENGTH", "MIN_VALUE", "MAX_VALUE", 
                      "OPTIONAL", "OPTIONAL_COLLECTION", "REQUIRED", "REQUIRED_COLLECTION", 
                      "ROLE_NAME", "SHORTEN_TO", "SUBDOMAIN_OF", "SUBDOMAIN_POSITION", 
                      "TOTAL_DIGITS", "WITH", "WITH_OPTIONAL_MAP_TYPE", 
                      "WITH_MAP_TYPE", "DEPRECATED", "DOCUMENTATION", "INHERITED", 
                      "EXTENDED_DOCUMENTATION", "USE_CASE_DOCUMENTATION", 
                      "FOOTER_DOCUMENTATION", "ID", "UNSIGNED_INT", "DECIMAL_VALUE", 
                      "TEXT", "METAED_ID", "POS_SIGN", "NEG_SIGN", "PERIOD", 
                      "LINE_COMMENT", "WS", "ERROR_CHARACTER" ];

var ruleNames =  [ "metaEd", "namespace", "namespaceType", "topLevelEntity", 
                   "deprecated", "propertyDeprecated", "documentation", 
                   "enumerationItemDocumentation", "mapTypeDocumentation", 
                   "propertyDocumentation", "abstractEntity", "entityConfiguration", 
                   "cascadeUpdate", "association", "definingDomainEntity", 
                   "associationExtension", "associationSubclass", "choice", 
                   "sharedDecimal", "sharedInteger", "sharedShort", "sharedString", 
                   "common", "commonExtension", "commonSubclass", "descriptor", 
                   "withMapType", "requiredMapType", "optionalMapType", 
                   "domain", "domainItem", "footerDocumentation", "domainEntity", 
                   "domainEntityExtension", "domainEntitySubclass", "enumeration", 
                   "enumerationItem", "shortDescription", "inlineCommon", 
                   "interchange", "extendedDocumentation", "useCaseDocumentation", 
                   "interchangeComponent", "interchangeElement", "interchangeIdentity", 
                   "interchangeExtension", "interchangeExtensionComponent", 
                   "subdomain", "subdomainPosition", "minValue", "maxValue", 
                   "minValueDecimal", "maxValueDecimal", "decimalValue", 
                   "totalDigits", "decimalPlaces", "commonExtensionOverride", 
                   "propertyAnnotation", "identity", "identityRename", "required", 
                   "optional", "collection", "requiredCollection", "optionalCollection", 
                   "isQueryableOnly", "propertyComponents", "isQueryableField", 
                   "roleName", "minLength", "maxLength", "property", "booleanProperty", 
                   "currencyProperty", "dateProperty", "datetimeProperty", 
                   "decimalProperty", "descriptorProperty", "durationProperty", 
                   "enumerationProperty", "commonProperty", "inlineCommonProperty", 
                   "choiceProperty", "integerProperty", "percentProperty", 
                   "associationProperty", "domainEntityProperty", "sharedDecimalProperty", 
                   "sharedIntegerProperty", "sharedShortProperty", "sharedStringProperty", 
                   "shortProperty", "stringProperty", "timeProperty", "yearProperty", 
                   "isWeakReference", "possiblyExternal", "mergeDirective", 
                   "sourcePropertyPath", "targetPropertyPath", "propertyPath", 
                   "signed_int", "unaryOperator", "abstractEntityName", 
                   "associationName", "baseKeyName", "baseName", "baseNamespace", 
                   "choiceName", "sharedDecimalName", "sharedIntegerName", 
                   "commonName", "sharedShortName", "sharedStringName", 
                   "descriptorName", "domainName", "entityName", "enumerationName", 
                   "extendeeName", "extendeeNamespace", "inlineCommonName", 
                   "interchangeName", "localBaseName", "localDomainItemName", 
                   "localExtendeeName", "localInterchangeItemName", "localPropertyName", 
                   "localPropertyType", "parentDomainName", "propertyName", 
                   "propertyNamespace", "roleNameName", "sharedPropertyName", 
                   "sharedPropertyType", "shortenToName", "simplePropertyName", 
                   "subdomainName", "namespaceName", "metaEdId" ];

function MetaEdGrammar (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

MetaEdGrammar.prototype = Object.create(antlr4.Parser.prototype);
MetaEdGrammar.prototype.constructor = MetaEdGrammar;

Object.defineProperty(MetaEdGrammar.prototype, "atn", {
	get : function() {
		return atn;
	}
});

MetaEdGrammar.EOF = antlr4.Token.EOF;
MetaEdGrammar.ABSTRACT_ENTITY = 1;
MetaEdGrammar.ASSOCIATION = 2;
MetaEdGrammar.BEGIN_NAMESPACE = 3;
MetaEdGrammar.END_NAMESPACE = 4;
MetaEdGrammar.CHOICE = 5;
MetaEdGrammar.COMMON = 6;
MetaEdGrammar.DESCRIPTOR = 7;
MetaEdGrammar.DOMAIN = 8;
MetaEdGrammar.DOMAIN_ENTITY = 9;
MetaEdGrammar.ENUMERATION = 10;
MetaEdGrammar.INLINE = 11;
MetaEdGrammar.INTERCHANGE = 12;
MetaEdGrammar.INLINE_COMMON = 13;
MetaEdGrammar.SHARED_DECIMAL = 14;
MetaEdGrammar.SHARED_INTEGER = 15;
MetaEdGrammar.SHARED_SHORT = 16;
MetaEdGrammar.SHARED_STRING = 17;
MetaEdGrammar.SUBDOMAIN = 18;
MetaEdGrammar.TYPE = 19;
MetaEdGrammar.ASSOCIATION_KEYWORD = 20;
MetaEdGrammar.ASSOCIATION_IDENTITY = 21;
MetaEdGrammar.BOOLEAN = 22;
MetaEdGrammar.CHOICE_KEYWORD = 23;
MetaEdGrammar.COMMON_KEYWORD = 24;
MetaEdGrammar.COMMON_EXTENSION = 25;
MetaEdGrammar.CURRENCY = 26;
MetaEdGrammar.DATE = 27;
MetaEdGrammar.DATETIME = 28;
MetaEdGrammar.DECIMAL = 29;
MetaEdGrammar.DESCRIPTOR_KEYWORD = 30;
MetaEdGrammar.DOMAIN_ENTITY_KEYWORD = 31;
MetaEdGrammar.DOMAIN_ENTITY_IDENTITY = 32;
MetaEdGrammar.DOMAIN_ITEM = 33;
MetaEdGrammar.DURATION = 34;
MetaEdGrammar.ELEMENT = 35;
MetaEdGrammar.ENUMERATION_KEYWORD = 36;
MetaEdGrammar.ENUMERATION_ITEM = 37;
MetaEdGrammar.INLINE_COMMON_KEYWORD = 38;
MetaEdGrammar.INTEGER = 39;
MetaEdGrammar.PERCENT = 40;
MetaEdGrammar.REFERENCE = 41;
MetaEdGrammar.SHARED_DECIMAL_KEYWORD = 42;
MetaEdGrammar.SHARED_INTEGER_KEYWORD = 43;
MetaEdGrammar.SHARED_SHORT_KEYWORD = 44;
MetaEdGrammar.SHARED_STRING_KEYWORD = 45;
MetaEdGrammar.SHARED_NAMED = 46;
MetaEdGrammar.SHORT = 47;
MetaEdGrammar.STRING = 48;
MetaEdGrammar.TIME = 49;
MetaEdGrammar.YEAR = 50;
MetaEdGrammar.ADDITIONS = 51;
MetaEdGrammar.BASED_ON = 52;
MetaEdGrammar.CORE = 53;
MetaEdGrammar.CASCADE_UPDATE = 54;
MetaEdGrammar.DECIMAL_PLACES = 55;
MetaEdGrammar.IDENTITY = 56;
MetaEdGrammar.IDENTITY_RENAME = 57;
MetaEdGrammar.IS_QUERYABLE_FIELD = 58;
MetaEdGrammar.IS_QUERYABLE_ONLY = 59;
MetaEdGrammar.IS_WEAK_REFERENCE = 60;
MetaEdGrammar.POSSIBLY_EXTERNAL = 61;
MetaEdGrammar.MERGE_REFERENCE = 62;
MetaEdGrammar.MIN_LENGTH = 63;
MetaEdGrammar.MAX_LENGTH = 64;
MetaEdGrammar.MIN_VALUE = 65;
MetaEdGrammar.MAX_VALUE = 66;
MetaEdGrammar.OPTIONAL = 67;
MetaEdGrammar.OPTIONAL_COLLECTION = 68;
MetaEdGrammar.REQUIRED = 69;
MetaEdGrammar.REQUIRED_COLLECTION = 70;
MetaEdGrammar.ROLE_NAME = 71;
MetaEdGrammar.SHORTEN_TO = 72;
MetaEdGrammar.SUBDOMAIN_OF = 73;
MetaEdGrammar.SUBDOMAIN_POSITION = 74;
MetaEdGrammar.TOTAL_DIGITS = 75;
MetaEdGrammar.WITH = 76;
MetaEdGrammar.WITH_OPTIONAL_MAP_TYPE = 77;
MetaEdGrammar.WITH_MAP_TYPE = 78;
MetaEdGrammar.DEPRECATED = 79;
MetaEdGrammar.DOCUMENTATION = 80;
MetaEdGrammar.INHERITED = 81;
MetaEdGrammar.EXTENDED_DOCUMENTATION = 82;
MetaEdGrammar.USE_CASE_DOCUMENTATION = 83;
MetaEdGrammar.FOOTER_DOCUMENTATION = 84;
MetaEdGrammar.ID = 85;
MetaEdGrammar.UNSIGNED_INT = 86;
MetaEdGrammar.DECIMAL_VALUE = 87;
MetaEdGrammar.TEXT = 88;
MetaEdGrammar.METAED_ID = 89;
MetaEdGrammar.POS_SIGN = 90;
MetaEdGrammar.NEG_SIGN = 91;
MetaEdGrammar.PERIOD = 92;
MetaEdGrammar.LINE_COMMENT = 93;
MetaEdGrammar.WS = 94;
MetaEdGrammar.ERROR_CHARACTER = 95;

MetaEdGrammar.RULE_metaEd = 0;
MetaEdGrammar.RULE_namespace = 1;
MetaEdGrammar.RULE_namespaceType = 2;
MetaEdGrammar.RULE_topLevelEntity = 3;
MetaEdGrammar.RULE_deprecated = 4;
MetaEdGrammar.RULE_propertyDeprecated = 5;
MetaEdGrammar.RULE_documentation = 6;
MetaEdGrammar.RULE_enumerationItemDocumentation = 7;
MetaEdGrammar.RULE_mapTypeDocumentation = 8;
MetaEdGrammar.RULE_propertyDocumentation = 9;
MetaEdGrammar.RULE_abstractEntity = 10;
MetaEdGrammar.RULE_entityConfiguration = 11;
MetaEdGrammar.RULE_cascadeUpdate = 12;
MetaEdGrammar.RULE_association = 13;
MetaEdGrammar.RULE_definingDomainEntity = 14;
MetaEdGrammar.RULE_associationExtension = 15;
MetaEdGrammar.RULE_associationSubclass = 16;
MetaEdGrammar.RULE_choice = 17;
MetaEdGrammar.RULE_sharedDecimal = 18;
MetaEdGrammar.RULE_sharedInteger = 19;
MetaEdGrammar.RULE_sharedShort = 20;
MetaEdGrammar.RULE_sharedString = 21;
MetaEdGrammar.RULE_common = 22;
MetaEdGrammar.RULE_commonExtension = 23;
MetaEdGrammar.RULE_commonSubclass = 24;
MetaEdGrammar.RULE_descriptor = 25;
MetaEdGrammar.RULE_withMapType = 26;
MetaEdGrammar.RULE_requiredMapType = 27;
MetaEdGrammar.RULE_optionalMapType = 28;
MetaEdGrammar.RULE_domain = 29;
MetaEdGrammar.RULE_domainItem = 30;
MetaEdGrammar.RULE_footerDocumentation = 31;
MetaEdGrammar.RULE_domainEntity = 32;
MetaEdGrammar.RULE_domainEntityExtension = 33;
MetaEdGrammar.RULE_domainEntitySubclass = 34;
MetaEdGrammar.RULE_enumeration = 35;
MetaEdGrammar.RULE_enumerationItem = 36;
MetaEdGrammar.RULE_shortDescription = 37;
MetaEdGrammar.RULE_inlineCommon = 38;
MetaEdGrammar.RULE_interchange = 39;
MetaEdGrammar.RULE_extendedDocumentation = 40;
MetaEdGrammar.RULE_useCaseDocumentation = 41;
MetaEdGrammar.RULE_interchangeComponent = 42;
MetaEdGrammar.RULE_interchangeElement = 43;
MetaEdGrammar.RULE_interchangeIdentity = 44;
MetaEdGrammar.RULE_interchangeExtension = 45;
MetaEdGrammar.RULE_interchangeExtensionComponent = 46;
MetaEdGrammar.RULE_subdomain = 47;
MetaEdGrammar.RULE_subdomainPosition = 48;
MetaEdGrammar.RULE_minValue = 49;
MetaEdGrammar.RULE_maxValue = 50;
MetaEdGrammar.RULE_minValueDecimal = 51;
MetaEdGrammar.RULE_maxValueDecimal = 52;
MetaEdGrammar.RULE_decimalValue = 53;
MetaEdGrammar.RULE_totalDigits = 54;
MetaEdGrammar.RULE_decimalPlaces = 55;
MetaEdGrammar.RULE_commonExtensionOverride = 56;
MetaEdGrammar.RULE_propertyAnnotation = 57;
MetaEdGrammar.RULE_identity = 58;
MetaEdGrammar.RULE_identityRename = 59;
MetaEdGrammar.RULE_required = 60;
MetaEdGrammar.RULE_optional = 61;
MetaEdGrammar.RULE_collection = 62;
MetaEdGrammar.RULE_requiredCollection = 63;
MetaEdGrammar.RULE_optionalCollection = 64;
MetaEdGrammar.RULE_isQueryableOnly = 65;
MetaEdGrammar.RULE_propertyComponents = 66;
MetaEdGrammar.RULE_isQueryableField = 67;
MetaEdGrammar.RULE_roleName = 68;
MetaEdGrammar.RULE_minLength = 69;
MetaEdGrammar.RULE_maxLength = 70;
MetaEdGrammar.RULE_property = 71;
MetaEdGrammar.RULE_booleanProperty = 72;
MetaEdGrammar.RULE_currencyProperty = 73;
MetaEdGrammar.RULE_dateProperty = 74;
MetaEdGrammar.RULE_datetimeProperty = 75;
MetaEdGrammar.RULE_decimalProperty = 76;
MetaEdGrammar.RULE_descriptorProperty = 77;
MetaEdGrammar.RULE_durationProperty = 78;
MetaEdGrammar.RULE_enumerationProperty = 79;
MetaEdGrammar.RULE_commonProperty = 80;
MetaEdGrammar.RULE_inlineCommonProperty = 81;
MetaEdGrammar.RULE_choiceProperty = 82;
MetaEdGrammar.RULE_integerProperty = 83;
MetaEdGrammar.RULE_percentProperty = 84;
MetaEdGrammar.RULE_associationProperty = 85;
MetaEdGrammar.RULE_domainEntityProperty = 86;
MetaEdGrammar.RULE_sharedDecimalProperty = 87;
MetaEdGrammar.RULE_sharedIntegerProperty = 88;
MetaEdGrammar.RULE_sharedShortProperty = 89;
MetaEdGrammar.RULE_sharedStringProperty = 90;
MetaEdGrammar.RULE_shortProperty = 91;
MetaEdGrammar.RULE_stringProperty = 92;
MetaEdGrammar.RULE_timeProperty = 93;
MetaEdGrammar.RULE_yearProperty = 94;
MetaEdGrammar.RULE_isWeakReference = 95;
MetaEdGrammar.RULE_possiblyExternal = 96;
MetaEdGrammar.RULE_mergeDirective = 97;
MetaEdGrammar.RULE_sourcePropertyPath = 98;
MetaEdGrammar.RULE_targetPropertyPath = 99;
MetaEdGrammar.RULE_propertyPath = 100;
MetaEdGrammar.RULE_signed_int = 101;
MetaEdGrammar.RULE_unaryOperator = 102;
MetaEdGrammar.RULE_abstractEntityName = 103;
MetaEdGrammar.RULE_associationName = 104;
MetaEdGrammar.RULE_baseKeyName = 105;
MetaEdGrammar.RULE_baseName = 106;
MetaEdGrammar.RULE_baseNamespace = 107;
MetaEdGrammar.RULE_choiceName = 108;
MetaEdGrammar.RULE_sharedDecimalName = 109;
MetaEdGrammar.RULE_sharedIntegerName = 110;
MetaEdGrammar.RULE_commonName = 111;
MetaEdGrammar.RULE_sharedShortName = 112;
MetaEdGrammar.RULE_sharedStringName = 113;
MetaEdGrammar.RULE_descriptorName = 114;
MetaEdGrammar.RULE_domainName = 115;
MetaEdGrammar.RULE_entityName = 116;
MetaEdGrammar.RULE_enumerationName = 117;
MetaEdGrammar.RULE_extendeeName = 118;
MetaEdGrammar.RULE_extendeeNamespace = 119;
MetaEdGrammar.RULE_inlineCommonName = 120;
MetaEdGrammar.RULE_interchangeName = 121;
MetaEdGrammar.RULE_localBaseName = 122;
MetaEdGrammar.RULE_localDomainItemName = 123;
MetaEdGrammar.RULE_localExtendeeName = 124;
MetaEdGrammar.RULE_localInterchangeItemName = 125;
MetaEdGrammar.RULE_localPropertyName = 126;
MetaEdGrammar.RULE_localPropertyType = 127;
MetaEdGrammar.RULE_parentDomainName = 128;
MetaEdGrammar.RULE_propertyName = 129;
MetaEdGrammar.RULE_propertyNamespace = 130;
MetaEdGrammar.RULE_roleNameName = 131;
MetaEdGrammar.RULE_sharedPropertyName = 132;
MetaEdGrammar.RULE_sharedPropertyType = 133;
MetaEdGrammar.RULE_shortenToName = 134;
MetaEdGrammar.RULE_simplePropertyName = 135;
MetaEdGrammar.RULE_subdomainName = 136;
MetaEdGrammar.RULE_namespaceName = 137;
MetaEdGrammar.RULE_metaEdId = 138;

function MetaEdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_metaEd;
    return this;
}

MetaEdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetaEdContext.prototype.constructor = MetaEdContext;

MetaEdContext.prototype.namespace = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NamespaceContext);
    } else {
        return this.getTypedRuleContext(NamespaceContext,i);
    }
};

MetaEdContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMetaEd(this);
	}
};

MetaEdContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMetaEd(this);
	}
};




MetaEdGrammar.MetaEdContext = MetaEdContext;

MetaEdGrammar.prototype.metaEd = function() {

    var localctx = new MetaEdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, MetaEdGrammar.RULE_metaEd);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 279; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 278;
            this.namespace();
            this.state = 281; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MetaEdGrammar.BEGIN_NAMESPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_namespace;
    return this;
}

NamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceContext.prototype.constructor = NamespaceContext;

NamespaceContext.prototype.BEGIN_NAMESPACE = function() {
    return this.getToken(MetaEdGrammar.BEGIN_NAMESPACE, 0);
};

NamespaceContext.prototype.namespaceName = function() {
    return this.getTypedRuleContext(NamespaceNameContext,0);
};

NamespaceContext.prototype.namespaceType = function() {
    return this.getTypedRuleContext(NamespaceTypeContext,0);
};

NamespaceContext.prototype.END_NAMESPACE = function() {
    return this.getToken(MetaEdGrammar.END_NAMESPACE, 0);
};

NamespaceContext.prototype.topLevelEntity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TopLevelEntityContext);
    } else {
        return this.getTypedRuleContext(TopLevelEntityContext,i);
    }
};

NamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterNamespace(this);
	}
};

NamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitNamespace(this);
	}
};




MetaEdGrammar.NamespaceContext = NamespaceContext;

MetaEdGrammar.prototype.namespace = function() {

    var localctx = new NamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, MetaEdGrammar.RULE_namespace);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 283;
        this.match(MetaEdGrammar.BEGIN_NAMESPACE);
        this.state = 284;
        this.namespaceName();
        this.state = 285;
        this.namespaceType();
        this.state = 287; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 286;
            this.topLevelEntity();
            this.state = 289; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MetaEdGrammar.ABSTRACT_ENTITY) | (1 << MetaEdGrammar.ASSOCIATION) | (1 << MetaEdGrammar.CHOICE) | (1 << MetaEdGrammar.COMMON) | (1 << MetaEdGrammar.DESCRIPTOR) | (1 << MetaEdGrammar.DOMAIN) | (1 << MetaEdGrammar.DOMAIN_ENTITY) | (1 << MetaEdGrammar.ENUMERATION) | (1 << MetaEdGrammar.INTERCHANGE) | (1 << MetaEdGrammar.INLINE_COMMON) | (1 << MetaEdGrammar.SHARED_DECIMAL) | (1 << MetaEdGrammar.SHARED_INTEGER) | (1 << MetaEdGrammar.SHARED_SHORT) | (1 << MetaEdGrammar.SHARED_STRING) | (1 << MetaEdGrammar.SUBDOMAIN))) !== 0));
        this.state = 291;
        this.match(MetaEdGrammar.END_NAMESPACE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_namespaceType;
    return this;
}

NamespaceTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceTypeContext.prototype.constructor = NamespaceTypeContext;

NamespaceTypeContext.prototype.CORE = function() {
    return this.getToken(MetaEdGrammar.CORE, 0);
};

NamespaceTypeContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

NamespaceTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterNamespaceType(this);
	}
};

NamespaceTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitNamespaceType(this);
	}
};




MetaEdGrammar.NamespaceTypeContext = NamespaceTypeContext;

MetaEdGrammar.prototype.namespaceType = function() {

    var localctx = new NamespaceTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, MetaEdGrammar.RULE_namespaceType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 293;
        _la = this._input.LA(1);
        if(!(_la===MetaEdGrammar.CORE || _la===MetaEdGrammar.ID)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TopLevelEntityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_topLevelEntity;
    return this;
}

TopLevelEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopLevelEntityContext.prototype.constructor = TopLevelEntityContext;

TopLevelEntityContext.prototype.abstractEntity = function() {
    return this.getTypedRuleContext(AbstractEntityContext,0);
};

TopLevelEntityContext.prototype.association = function() {
    return this.getTypedRuleContext(AssociationContext,0);
};

TopLevelEntityContext.prototype.associationExtension = function() {
    return this.getTypedRuleContext(AssociationExtensionContext,0);
};

TopLevelEntityContext.prototype.associationSubclass = function() {
    return this.getTypedRuleContext(AssociationSubclassContext,0);
};

TopLevelEntityContext.prototype.choice = function() {
    return this.getTypedRuleContext(ChoiceContext,0);
};

TopLevelEntityContext.prototype.sharedDecimal = function() {
    return this.getTypedRuleContext(SharedDecimalContext,0);
};

TopLevelEntityContext.prototype.sharedInteger = function() {
    return this.getTypedRuleContext(SharedIntegerContext,0);
};

TopLevelEntityContext.prototype.sharedShort = function() {
    return this.getTypedRuleContext(SharedShortContext,0);
};

TopLevelEntityContext.prototype.sharedString = function() {
    return this.getTypedRuleContext(SharedStringContext,0);
};

TopLevelEntityContext.prototype.common = function() {
    return this.getTypedRuleContext(CommonContext,0);
};

TopLevelEntityContext.prototype.commonExtension = function() {
    return this.getTypedRuleContext(CommonExtensionContext,0);
};

TopLevelEntityContext.prototype.commonSubclass = function() {
    return this.getTypedRuleContext(CommonSubclassContext,0);
};

TopLevelEntityContext.prototype.descriptor = function() {
    return this.getTypedRuleContext(DescriptorContext,0);
};

TopLevelEntityContext.prototype.domainEntity = function() {
    return this.getTypedRuleContext(DomainEntityContext,0);
};

TopLevelEntityContext.prototype.domainEntityExtension = function() {
    return this.getTypedRuleContext(DomainEntityExtensionContext,0);
};

TopLevelEntityContext.prototype.domainEntitySubclass = function() {
    return this.getTypedRuleContext(DomainEntitySubclassContext,0);
};

TopLevelEntityContext.prototype.enumeration = function() {
    return this.getTypedRuleContext(EnumerationContext,0);
};

TopLevelEntityContext.prototype.inlineCommon = function() {
    return this.getTypedRuleContext(InlineCommonContext,0);
};

TopLevelEntityContext.prototype.interchange = function() {
    return this.getTypedRuleContext(InterchangeContext,0);
};

TopLevelEntityContext.prototype.interchangeExtension = function() {
    return this.getTypedRuleContext(InterchangeExtensionContext,0);
};

TopLevelEntityContext.prototype.domain = function() {
    return this.getTypedRuleContext(DomainContext,0);
};

TopLevelEntityContext.prototype.subdomain = function() {
    return this.getTypedRuleContext(SubdomainContext,0);
};

TopLevelEntityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterTopLevelEntity(this);
	}
};

TopLevelEntityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitTopLevelEntity(this);
	}
};




MetaEdGrammar.TopLevelEntityContext = TopLevelEntityContext;

MetaEdGrammar.prototype.topLevelEntity = function() {

    var localctx = new TopLevelEntityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, MetaEdGrammar.RULE_topLevelEntity);
    try {
        this.state = 317;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,2,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 295;
            this.abstractEntity();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 296;
            this.association();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 297;
            this.associationExtension();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 298;
            this.associationSubclass();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 299;
            this.choice();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 300;
            this.sharedDecimal();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 301;
            this.sharedInteger();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 302;
            this.sharedShort();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 303;
            this.sharedString();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 304;
            this.common();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 305;
            this.commonExtension();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 306;
            this.commonSubclass();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 307;
            this.descriptor();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 308;
            this.domainEntity();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 309;
            this.domainEntityExtension();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 310;
            this.domainEntitySubclass();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 311;
            this.enumeration();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 312;
            this.inlineCommon();
            break;

        case 19:
            this.enterOuterAlt(localctx, 19);
            this.state = 313;
            this.interchange();
            break;

        case 20:
            this.enterOuterAlt(localctx, 20);
            this.state = 314;
            this.interchangeExtension();
            break;

        case 21:
            this.enterOuterAlt(localctx, 21);
            this.state = 315;
            this.domain();
            break;

        case 22:
            this.enterOuterAlt(localctx, 22);
            this.state = 316;
            this.subdomain();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DeprecatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_deprecated;
    return this;
}

DeprecatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DeprecatedContext.prototype.constructor = DeprecatedContext;

DeprecatedContext.prototype.DEPRECATED = function() {
    return this.getToken(MetaEdGrammar.DEPRECATED, 0);
};

DeprecatedContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

DeprecatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDeprecated(this);
	}
};

DeprecatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDeprecated(this);
	}
};




MetaEdGrammar.DeprecatedContext = DeprecatedContext;

MetaEdGrammar.prototype.deprecated = function() {

    var localctx = new DeprecatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, MetaEdGrammar.RULE_deprecated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 319;
        this.match(MetaEdGrammar.DEPRECATED);
        this.state = 320;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDeprecatedContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_propertyDeprecated;
    return this;
}

PropertyDeprecatedContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDeprecatedContext.prototype.constructor = PropertyDeprecatedContext;

PropertyDeprecatedContext.prototype.DEPRECATED = function() {
    return this.getToken(MetaEdGrammar.DEPRECATED, 0);
};

PropertyDeprecatedContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

PropertyDeprecatedContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPropertyDeprecated(this);
	}
};

PropertyDeprecatedContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPropertyDeprecated(this);
	}
};




MetaEdGrammar.PropertyDeprecatedContext = PropertyDeprecatedContext;

MetaEdGrammar.prototype.propertyDeprecated = function() {

    var localctx = new PropertyDeprecatedContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, MetaEdGrammar.RULE_propertyDeprecated);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 322;
        this.match(MetaEdGrammar.DEPRECATED);
        this.state = 323;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DocumentationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_documentation;
    return this;
}

DocumentationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DocumentationContext.prototype.constructor = DocumentationContext;

DocumentationContext.prototype.DOCUMENTATION = function() {
    return this.getToken(MetaEdGrammar.DOCUMENTATION, 0);
};

DocumentationContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

DocumentationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDocumentation(this);
	}
};

DocumentationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDocumentation(this);
	}
};




MetaEdGrammar.DocumentationContext = DocumentationContext;

MetaEdGrammar.prototype.documentation = function() {

    var localctx = new DocumentationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, MetaEdGrammar.RULE_documentation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 325;
        this.match(MetaEdGrammar.DOCUMENTATION);
        this.state = 326;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumerationItemDocumentationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_enumerationItemDocumentation;
    return this;
}

EnumerationItemDocumentationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationItemDocumentationContext.prototype.constructor = EnumerationItemDocumentationContext;

EnumerationItemDocumentationContext.prototype.DOCUMENTATION = function() {
    return this.getToken(MetaEdGrammar.DOCUMENTATION, 0);
};

EnumerationItemDocumentationContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

EnumerationItemDocumentationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterEnumerationItemDocumentation(this);
	}
};

EnumerationItemDocumentationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitEnumerationItemDocumentation(this);
	}
};




MetaEdGrammar.EnumerationItemDocumentationContext = EnumerationItemDocumentationContext;

MetaEdGrammar.prototype.enumerationItemDocumentation = function() {

    var localctx = new EnumerationItemDocumentationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, MetaEdGrammar.RULE_enumerationItemDocumentation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 328;
        this.match(MetaEdGrammar.DOCUMENTATION);
        this.state = 329;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MapTypeDocumentationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_mapTypeDocumentation;
    return this;
}

MapTypeDocumentationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MapTypeDocumentationContext.prototype.constructor = MapTypeDocumentationContext;

MapTypeDocumentationContext.prototype.DOCUMENTATION = function() {
    return this.getToken(MetaEdGrammar.DOCUMENTATION, 0);
};

MapTypeDocumentationContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

MapTypeDocumentationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMapTypeDocumentation(this);
	}
};

MapTypeDocumentationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMapTypeDocumentation(this);
	}
};




MetaEdGrammar.MapTypeDocumentationContext = MapTypeDocumentationContext;

MetaEdGrammar.prototype.mapTypeDocumentation = function() {

    var localctx = new MapTypeDocumentationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, MetaEdGrammar.RULE_mapTypeDocumentation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 331;
        this.match(MetaEdGrammar.DOCUMENTATION);
        this.state = 332;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyDocumentationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_propertyDocumentation;
    return this;
}

PropertyDocumentationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyDocumentationContext.prototype.constructor = PropertyDocumentationContext;

PropertyDocumentationContext.prototype.DOCUMENTATION = function() {
    return this.getToken(MetaEdGrammar.DOCUMENTATION, 0);
};

PropertyDocumentationContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

PropertyDocumentationContext.prototype.INHERITED = function() {
    return this.getToken(MetaEdGrammar.INHERITED, 0);
};

PropertyDocumentationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPropertyDocumentation(this);
	}
};

PropertyDocumentationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPropertyDocumentation(this);
	}
};




MetaEdGrammar.PropertyDocumentationContext = PropertyDocumentationContext;

MetaEdGrammar.prototype.propertyDocumentation = function() {

    var localctx = new PropertyDocumentationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, MetaEdGrammar.RULE_propertyDocumentation);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 334;
        this.match(MetaEdGrammar.DOCUMENTATION);
        this.state = 335;
        _la = this._input.LA(1);
        if(!(_la===MetaEdGrammar.INHERITED || _la===MetaEdGrammar.TEXT)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractEntityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_abstractEntity;
    return this;
}

AbstractEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractEntityContext.prototype.constructor = AbstractEntityContext;

AbstractEntityContext.prototype.ABSTRACT_ENTITY = function() {
    return this.getToken(MetaEdGrammar.ABSTRACT_ENTITY, 0);
};

AbstractEntityContext.prototype.abstractEntityName = function() {
    return this.getTypedRuleContext(AbstractEntityNameContext,0);
};

AbstractEntityContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

AbstractEntityContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

AbstractEntityContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

AbstractEntityContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

AbstractEntityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterAbstractEntity(this);
	}
};

AbstractEntityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitAbstractEntity(this);
	}
};




MetaEdGrammar.AbstractEntityContext = AbstractEntityContext;

MetaEdGrammar.prototype.abstractEntity = function() {

    var localctx = new AbstractEntityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, MetaEdGrammar.RULE_abstractEntity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 337;
        this.match(MetaEdGrammar.ABSTRACT_ENTITY);
        this.state = 338;
        this.abstractEntityName();
        this.state = 340;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 339;
            this.metaEdId();
        }

        this.state = 343;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 342;
            this.deprecated();
        }

        this.state = 345;
        this.documentation();
        this.state = 347; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 346;
            this.property();
            this.state = 349; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EntityConfigurationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_entityConfiguration;
    return this;
}

EntityConfigurationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityConfigurationContext.prototype.constructor = EntityConfigurationContext;

EntityConfigurationContext.prototype.cascadeUpdate = function() {
    return this.getTypedRuleContext(CascadeUpdateContext,0);
};

EntityConfigurationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterEntityConfiguration(this);
	}
};

EntityConfigurationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitEntityConfiguration(this);
	}
};




MetaEdGrammar.EntityConfigurationContext = EntityConfigurationContext;

MetaEdGrammar.prototype.entityConfiguration = function() {

    var localctx = new EntityConfigurationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, MetaEdGrammar.RULE_entityConfiguration);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 351;
        this.cascadeUpdate();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CascadeUpdateContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_cascadeUpdate;
    return this;
}

CascadeUpdateContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CascadeUpdateContext.prototype.constructor = CascadeUpdateContext;

CascadeUpdateContext.prototype.CASCADE_UPDATE = function() {
    return this.getToken(MetaEdGrammar.CASCADE_UPDATE, 0);
};

CascadeUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCascadeUpdate(this);
	}
};

CascadeUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCascadeUpdate(this);
	}
};




MetaEdGrammar.CascadeUpdateContext = CascadeUpdateContext;

MetaEdGrammar.prototype.cascadeUpdate = function() {

    var localctx = new CascadeUpdateContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, MetaEdGrammar.RULE_cascadeUpdate);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 353;
        this.match(MetaEdGrammar.CASCADE_UPDATE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_association;
    return this;
}

AssociationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociationContext.prototype.constructor = AssociationContext;

AssociationContext.prototype.ASSOCIATION = function() {
    return this.getToken(MetaEdGrammar.ASSOCIATION, 0);
};

AssociationContext.prototype.associationName = function() {
    return this.getTypedRuleContext(AssociationNameContext,0);
};

AssociationContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

AssociationContext.prototype.definingDomainEntity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DefiningDomainEntityContext);
    } else {
        return this.getTypedRuleContext(DefiningDomainEntityContext,i);
    }
};

AssociationContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

AssociationContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

AssociationContext.prototype.entityConfiguration = function() {
    return this.getTypedRuleContext(EntityConfigurationContext,0);
};

AssociationContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

AssociationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterAssociation(this);
	}
};

AssociationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitAssociation(this);
	}
};




MetaEdGrammar.AssociationContext = AssociationContext;

MetaEdGrammar.prototype.association = function() {

    var localctx = new AssociationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, MetaEdGrammar.RULE_association);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 355;
        this.match(MetaEdGrammar.ASSOCIATION);
        this.state = 356;
        this.associationName();
        this.state = 358;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 357;
            this.metaEdId();
        }

        this.state = 361;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 360;
            this.deprecated();
        }

        this.state = 363;
        this.documentation();
        this.state = 365;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.CASCADE_UPDATE) {
            this.state = 364;
            this.entityConfiguration();
        }

        this.state = 367;
        this.definingDomainEntity();
        this.state = 368;
        this.definingDomainEntity();
        this.state = 372;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0)) {
            this.state = 369;
            this.property();
            this.state = 374;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DefiningDomainEntityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_definingDomainEntity;
    return this;
}

DefiningDomainEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DefiningDomainEntityContext.prototype.constructor = DefiningDomainEntityContext;

DefiningDomainEntityContext.prototype.DOMAIN_ENTITY_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY_KEYWORD, 0);
};

DefiningDomainEntityContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

DefiningDomainEntityContext.prototype.propertyDocumentation = function() {
    return this.getTypedRuleContext(PropertyDocumentationContext,0);
};

DefiningDomainEntityContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DefiningDomainEntityContext.prototype.propertyDeprecated = function() {
    return this.getTypedRuleContext(PropertyDeprecatedContext,0);
};

DefiningDomainEntityContext.prototype.roleName = function() {
    return this.getTypedRuleContext(RoleNameContext,0);
};

DefiningDomainEntityContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

DefiningDomainEntityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDefiningDomainEntity(this);
	}
};

DefiningDomainEntityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDefiningDomainEntity(this);
	}
};




MetaEdGrammar.DefiningDomainEntityContext = DefiningDomainEntityContext;

MetaEdGrammar.prototype.definingDomainEntity = function() {

    var localctx = new DefiningDomainEntityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, MetaEdGrammar.RULE_definingDomainEntity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 375;
        this.match(MetaEdGrammar.DOMAIN_ENTITY_KEYWORD);
        this.state = 376;
        this.propertyName();
        this.state = 378;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 377;
            this.metaEdId();
        }

        this.state = 381;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 380;
            this.propertyDeprecated();
        }

        this.state = 383;
        this.propertyDocumentation();
        this.state = 385;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.ROLE_NAME) {
            this.state = 384;
            this.roleName();
        }

        this.state = 390;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 387;
            this.mergeDirective();
            this.state = 392;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociationExtensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_associationExtension;
    return this;
}

AssociationExtensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociationExtensionContext.prototype.constructor = AssociationExtensionContext;

AssociationExtensionContext.prototype.ASSOCIATION = function() {
    return this.getToken(MetaEdGrammar.ASSOCIATION, 0);
};

AssociationExtensionContext.prototype.extendeeName = function() {
    return this.getTypedRuleContext(ExtendeeNameContext,0);
};

AssociationExtensionContext.prototype.ADDITIONS = function() {
    return this.getToken(MetaEdGrammar.ADDITIONS, 0);
};

AssociationExtensionContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

AssociationExtensionContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

AssociationExtensionContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

AssociationExtensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterAssociationExtension(this);
	}
};

AssociationExtensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitAssociationExtension(this);
	}
};




MetaEdGrammar.AssociationExtensionContext = AssociationExtensionContext;

MetaEdGrammar.prototype.associationExtension = function() {

    var localctx = new AssociationExtensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, MetaEdGrammar.RULE_associationExtension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 393;
        this.match(MetaEdGrammar.ASSOCIATION);
        this.state = 394;
        this.extendeeName();
        this.state = 395;
        this.match(MetaEdGrammar.ADDITIONS);
        this.state = 397;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 396;
            this.metaEdId();
        }

        this.state = 400;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 399;
            this.deprecated();
        }

        this.state = 403; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 402;
            this.property();
            this.state = 405; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociationSubclassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_associationSubclass;
    return this;
}

AssociationSubclassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociationSubclassContext.prototype.constructor = AssociationSubclassContext;

AssociationSubclassContext.prototype.ASSOCIATION = function() {
    return this.getToken(MetaEdGrammar.ASSOCIATION, 0);
};

AssociationSubclassContext.prototype.associationName = function() {
    return this.getTypedRuleContext(AssociationNameContext,0);
};

AssociationSubclassContext.prototype.BASED_ON = function() {
    return this.getToken(MetaEdGrammar.BASED_ON, 0);
};

AssociationSubclassContext.prototype.baseName = function() {
    return this.getTypedRuleContext(BaseNameContext,0);
};

AssociationSubclassContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

AssociationSubclassContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

AssociationSubclassContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

AssociationSubclassContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

AssociationSubclassContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterAssociationSubclass(this);
	}
};

AssociationSubclassContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitAssociationSubclass(this);
	}
};




MetaEdGrammar.AssociationSubclassContext = AssociationSubclassContext;

MetaEdGrammar.prototype.associationSubclass = function() {

    var localctx = new AssociationSubclassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, MetaEdGrammar.RULE_associationSubclass);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 407;
        this.match(MetaEdGrammar.ASSOCIATION);
        this.state = 408;
        this.associationName();
        this.state = 409;
        this.match(MetaEdGrammar.BASED_ON);
        this.state = 410;
        this.baseName();
        this.state = 412;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 411;
            this.metaEdId();
        }

        this.state = 415;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 414;
            this.deprecated();
        }

        this.state = 417;
        this.documentation();
        this.state = 419; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 418;
            this.property();
            this.state = 421; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChoiceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_choice;
    return this;
}

ChoiceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceContext.prototype.constructor = ChoiceContext;

ChoiceContext.prototype.CHOICE = function() {
    return this.getToken(MetaEdGrammar.CHOICE, 0);
};

ChoiceContext.prototype.choiceName = function() {
    return this.getTypedRuleContext(ChoiceNameContext,0);
};

ChoiceContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

ChoiceContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

ChoiceContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

ChoiceContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

ChoiceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterChoice(this);
	}
};

ChoiceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitChoice(this);
	}
};




MetaEdGrammar.ChoiceContext = ChoiceContext;

MetaEdGrammar.prototype.choice = function() {

    var localctx = new ChoiceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, MetaEdGrammar.RULE_choice);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 423;
        this.match(MetaEdGrammar.CHOICE);
        this.state = 424;
        this.choiceName();
        this.state = 426;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 425;
            this.metaEdId();
        }

        this.state = 429;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 428;
            this.deprecated();
        }

        this.state = 431;
        this.documentation();
        this.state = 433; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 432;
            this.property();
            this.state = 435; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedDecimalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedDecimal;
    return this;
}

SharedDecimalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedDecimalContext.prototype.constructor = SharedDecimalContext;

SharedDecimalContext.prototype.SHARED_DECIMAL = function() {
    return this.getToken(MetaEdGrammar.SHARED_DECIMAL, 0);
};

SharedDecimalContext.prototype.sharedDecimalName = function() {
    return this.getTypedRuleContext(SharedDecimalNameContext,0);
};

SharedDecimalContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

SharedDecimalContext.prototype.totalDigits = function() {
    return this.getTypedRuleContext(TotalDigitsContext,0);
};

SharedDecimalContext.prototype.decimalPlaces = function() {
    return this.getTypedRuleContext(DecimalPlacesContext,0);
};

SharedDecimalContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedDecimalContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

SharedDecimalContext.prototype.minValueDecimal = function() {
    return this.getTypedRuleContext(MinValueDecimalContext,0);
};

SharedDecimalContext.prototype.maxValueDecimal = function() {
    return this.getTypedRuleContext(MaxValueDecimalContext,0);
};

SharedDecimalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedDecimal(this);
	}
};

SharedDecimalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedDecimal(this);
	}
};




MetaEdGrammar.SharedDecimalContext = SharedDecimalContext;

MetaEdGrammar.prototype.sharedDecimal = function() {

    var localctx = new SharedDecimalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, MetaEdGrammar.RULE_sharedDecimal);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 437;
        this.match(MetaEdGrammar.SHARED_DECIMAL);
        this.state = 438;
        this.sharedDecimalName();
        this.state = 440;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 439;
            this.metaEdId();
        }

        this.state = 443;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 442;
            this.deprecated();
        }

        this.state = 445;
        this.documentation();
        this.state = 446;
        this.totalDigits();
        this.state = 447;
        this.decimalPlaces();
        this.state = 449;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_VALUE) {
            this.state = 448;
            this.minValueDecimal();
        }

        this.state = 452;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MAX_VALUE) {
            this.state = 451;
            this.maxValueDecimal();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedIntegerContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedInteger;
    return this;
}

SharedIntegerContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedIntegerContext.prototype.constructor = SharedIntegerContext;

SharedIntegerContext.prototype.SHARED_INTEGER = function() {
    return this.getToken(MetaEdGrammar.SHARED_INTEGER, 0);
};

SharedIntegerContext.prototype.sharedIntegerName = function() {
    return this.getTypedRuleContext(SharedIntegerNameContext,0);
};

SharedIntegerContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

SharedIntegerContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedIntegerContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

SharedIntegerContext.prototype.minValue = function() {
    return this.getTypedRuleContext(MinValueContext,0);
};

SharedIntegerContext.prototype.maxValue = function() {
    return this.getTypedRuleContext(MaxValueContext,0);
};

SharedIntegerContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedInteger(this);
	}
};

SharedIntegerContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedInteger(this);
	}
};




MetaEdGrammar.SharedIntegerContext = SharedIntegerContext;

MetaEdGrammar.prototype.sharedInteger = function() {

    var localctx = new SharedIntegerContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, MetaEdGrammar.RULE_sharedInteger);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 454;
        this.match(MetaEdGrammar.SHARED_INTEGER);
        this.state = 455;
        this.sharedIntegerName();
        this.state = 457;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 456;
            this.metaEdId();
        }

        this.state = 460;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 459;
            this.deprecated();
        }

        this.state = 462;
        this.documentation();
        this.state = 464;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_VALUE) {
            this.state = 463;
            this.minValue();
        }

        this.state = 467;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MAX_VALUE) {
            this.state = 466;
            this.maxValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedShortContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedShort;
    return this;
}

SharedShortContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedShortContext.prototype.constructor = SharedShortContext;

SharedShortContext.prototype.SHARED_SHORT = function() {
    return this.getToken(MetaEdGrammar.SHARED_SHORT, 0);
};

SharedShortContext.prototype.sharedShortName = function() {
    return this.getTypedRuleContext(SharedShortNameContext,0);
};

SharedShortContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

SharedShortContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedShortContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

SharedShortContext.prototype.minValue = function() {
    return this.getTypedRuleContext(MinValueContext,0);
};

SharedShortContext.prototype.maxValue = function() {
    return this.getTypedRuleContext(MaxValueContext,0);
};

SharedShortContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedShort(this);
	}
};

SharedShortContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedShort(this);
	}
};




MetaEdGrammar.SharedShortContext = SharedShortContext;

MetaEdGrammar.prototype.sharedShort = function() {

    var localctx = new SharedShortContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, MetaEdGrammar.RULE_sharedShort);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 469;
        this.match(MetaEdGrammar.SHARED_SHORT);
        this.state = 470;
        this.sharedShortName();
        this.state = 472;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 471;
            this.metaEdId();
        }

        this.state = 475;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 474;
            this.deprecated();
        }

        this.state = 477;
        this.documentation();
        this.state = 479;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_VALUE) {
            this.state = 478;
            this.minValue();
        }

        this.state = 482;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MAX_VALUE) {
            this.state = 481;
            this.maxValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedStringContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedString;
    return this;
}

SharedStringContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedStringContext.prototype.constructor = SharedStringContext;

SharedStringContext.prototype.SHARED_STRING = function() {
    return this.getToken(MetaEdGrammar.SHARED_STRING, 0);
};

SharedStringContext.prototype.sharedStringName = function() {
    return this.getTypedRuleContext(SharedStringNameContext,0);
};

SharedStringContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

SharedStringContext.prototype.maxLength = function() {
    return this.getTypedRuleContext(MaxLengthContext,0);
};

SharedStringContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedStringContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

SharedStringContext.prototype.minLength = function() {
    return this.getTypedRuleContext(MinLengthContext,0);
};

SharedStringContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedString(this);
	}
};

SharedStringContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedString(this);
	}
};




MetaEdGrammar.SharedStringContext = SharedStringContext;

MetaEdGrammar.prototype.sharedString = function() {

    var localctx = new SharedStringContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, MetaEdGrammar.RULE_sharedString);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 484;
        this.match(MetaEdGrammar.SHARED_STRING);
        this.state = 485;
        this.sharedStringName();
        this.state = 487;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 486;
            this.metaEdId();
        }

        this.state = 490;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 489;
            this.deprecated();
        }

        this.state = 492;
        this.documentation();
        this.state = 494;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_LENGTH) {
            this.state = 493;
            this.minLength();
        }

        this.state = 496;
        this.maxLength();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_common;
    return this;
}

CommonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonContext.prototype.constructor = CommonContext;

CommonContext.prototype.COMMON = function() {
    return this.getToken(MetaEdGrammar.COMMON, 0);
};

CommonContext.prototype.commonName = function() {
    return this.getTypedRuleContext(CommonNameContext,0);
};

CommonContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

CommonContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

CommonContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

CommonContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

CommonContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCommon(this);
	}
};

CommonContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCommon(this);
	}
};




MetaEdGrammar.CommonContext = CommonContext;

MetaEdGrammar.prototype.common = function() {

    var localctx = new CommonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, MetaEdGrammar.RULE_common);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 498;
        this.match(MetaEdGrammar.COMMON);
        this.state = 499;
        this.commonName();
        this.state = 501;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 500;
            this.metaEdId();
        }

        this.state = 504;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 503;
            this.deprecated();
        }

        this.state = 506;
        this.documentation();
        this.state = 508; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 507;
            this.property();
            this.state = 510; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommonExtensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_commonExtension;
    return this;
}

CommonExtensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonExtensionContext.prototype.constructor = CommonExtensionContext;

CommonExtensionContext.prototype.COMMON = function() {
    return this.getToken(MetaEdGrammar.COMMON, 0);
};

CommonExtensionContext.prototype.extendeeName = function() {
    return this.getTypedRuleContext(ExtendeeNameContext,0);
};

CommonExtensionContext.prototype.ADDITIONS = function() {
    return this.getToken(MetaEdGrammar.ADDITIONS, 0);
};

CommonExtensionContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

CommonExtensionContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

CommonExtensionContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

CommonExtensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCommonExtension(this);
	}
};

CommonExtensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCommonExtension(this);
	}
};




MetaEdGrammar.CommonExtensionContext = CommonExtensionContext;

MetaEdGrammar.prototype.commonExtension = function() {

    var localctx = new CommonExtensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, MetaEdGrammar.RULE_commonExtension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 512;
        this.match(MetaEdGrammar.COMMON);
        this.state = 513;
        this.extendeeName();
        this.state = 514;
        this.match(MetaEdGrammar.ADDITIONS);
        this.state = 516;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 515;
            this.metaEdId();
        }

        this.state = 519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 518;
            this.deprecated();
        }

        this.state = 522; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 521;
            this.property();
            this.state = 524; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommonSubclassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_commonSubclass;
    return this;
}

CommonSubclassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonSubclassContext.prototype.constructor = CommonSubclassContext;

CommonSubclassContext.prototype.COMMON = function() {
    return this.getToken(MetaEdGrammar.COMMON, 0);
};

CommonSubclassContext.prototype.commonName = function() {
    return this.getTypedRuleContext(CommonNameContext,0);
};

CommonSubclassContext.prototype.BASED_ON = function() {
    return this.getToken(MetaEdGrammar.BASED_ON, 0);
};

CommonSubclassContext.prototype.baseName = function() {
    return this.getTypedRuleContext(BaseNameContext,0);
};

CommonSubclassContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

CommonSubclassContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

CommonSubclassContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

CommonSubclassContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

CommonSubclassContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCommonSubclass(this);
	}
};

CommonSubclassContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCommonSubclass(this);
	}
};




MetaEdGrammar.CommonSubclassContext = CommonSubclassContext;

MetaEdGrammar.prototype.commonSubclass = function() {

    var localctx = new CommonSubclassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, MetaEdGrammar.RULE_commonSubclass);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        this.match(MetaEdGrammar.COMMON);
        this.state = 527;
        this.commonName();
        this.state = 528;
        this.match(MetaEdGrammar.BASED_ON);
        this.state = 529;
        this.baseName();
        this.state = 531;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 530;
            this.metaEdId();
        }

        this.state = 534;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 533;
            this.deprecated();
        }

        this.state = 536;
        this.documentation();
        this.state = 538; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 537;
            this.property();
            this.state = 540; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescriptorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_descriptor;
    return this;
}

DescriptorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescriptorContext.prototype.constructor = DescriptorContext;

DescriptorContext.prototype.DESCRIPTOR = function() {
    return this.getToken(MetaEdGrammar.DESCRIPTOR, 0);
};

DescriptorContext.prototype.descriptorName = function() {
    return this.getTypedRuleContext(DescriptorNameContext,0);
};

DescriptorContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

DescriptorContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DescriptorContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

DescriptorContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

DescriptorContext.prototype.withMapType = function() {
    return this.getTypedRuleContext(WithMapTypeContext,0);
};

DescriptorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDescriptor(this);
	}
};

DescriptorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDescriptor(this);
	}
};




MetaEdGrammar.DescriptorContext = DescriptorContext;

MetaEdGrammar.prototype.descriptor = function() {

    var localctx = new DescriptorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, MetaEdGrammar.RULE_descriptor);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 542;
        this.match(MetaEdGrammar.DESCRIPTOR);
        this.state = 543;
        this.descriptorName();
        this.state = 545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 544;
            this.metaEdId();
        }

        this.state = 548;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 547;
            this.deprecated();
        }

        this.state = 550;
        this.documentation();
        this.state = 554;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0)) {
            this.state = 551;
            this.property();
            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 558;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.WITH_OPTIONAL_MAP_TYPE || _la===MetaEdGrammar.WITH_MAP_TYPE) {
            this.state = 557;
            this.withMapType();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function WithMapTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_withMapType;
    return this;
}

WithMapTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithMapTypeContext.prototype.constructor = WithMapTypeContext;

WithMapTypeContext.prototype.mapTypeDocumentation = function() {
    return this.getTypedRuleContext(MapTypeDocumentationContext,0);
};

WithMapTypeContext.prototype.requiredMapType = function() {
    return this.getTypedRuleContext(RequiredMapTypeContext,0);
};

WithMapTypeContext.prototype.optionalMapType = function() {
    return this.getTypedRuleContext(OptionalMapTypeContext,0);
};

WithMapTypeContext.prototype.enumerationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumerationItemContext);
    } else {
        return this.getTypedRuleContext(EnumerationItemContext,i);
    }
};

WithMapTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterWithMapType(this);
	}
};

WithMapTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitWithMapType(this);
	}
};




MetaEdGrammar.WithMapTypeContext = WithMapTypeContext;

MetaEdGrammar.prototype.withMapType = function() {

    var localctx = new WithMapTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, MetaEdGrammar.RULE_withMapType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 562;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MetaEdGrammar.WITH_MAP_TYPE:
            this.state = 560;
            this.requiredMapType();
            break;
        case MetaEdGrammar.WITH_OPTIONAL_MAP_TYPE:
            this.state = 561;
            this.optionalMapType();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 564;
        this.mapTypeDocumentation();
        this.state = 566; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 565;
            this.enumerationItem();
            this.state = 568; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MetaEdGrammar.ENUMERATION_ITEM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RequiredMapTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_requiredMapType;
    return this;
}

RequiredMapTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredMapTypeContext.prototype.constructor = RequiredMapTypeContext;

RequiredMapTypeContext.prototype.WITH_MAP_TYPE = function() {
    return this.getToken(MetaEdGrammar.WITH_MAP_TYPE, 0);
};

RequiredMapTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterRequiredMapType(this);
	}
};

RequiredMapTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitRequiredMapType(this);
	}
};




MetaEdGrammar.RequiredMapTypeContext = RequiredMapTypeContext;

MetaEdGrammar.prototype.requiredMapType = function() {

    var localctx = new RequiredMapTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, MetaEdGrammar.RULE_requiredMapType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 570;
        this.match(MetaEdGrammar.WITH_MAP_TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalMapTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_optionalMapType;
    return this;
}

OptionalMapTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalMapTypeContext.prototype.constructor = OptionalMapTypeContext;

OptionalMapTypeContext.prototype.WITH_OPTIONAL_MAP_TYPE = function() {
    return this.getToken(MetaEdGrammar.WITH_OPTIONAL_MAP_TYPE, 0);
};

OptionalMapTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterOptionalMapType(this);
	}
};

OptionalMapTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitOptionalMapType(this);
	}
};




MetaEdGrammar.OptionalMapTypeContext = OptionalMapTypeContext;

MetaEdGrammar.prototype.optionalMapType = function() {

    var localctx = new OptionalMapTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, MetaEdGrammar.RULE_optionalMapType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 572;
        this.match(MetaEdGrammar.WITH_OPTIONAL_MAP_TYPE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DomainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_domain;
    return this;
}

DomainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DomainContext.prototype.constructor = DomainContext;

DomainContext.prototype.DOMAIN = function() {
    return this.getToken(MetaEdGrammar.DOMAIN, 0);
};

DomainContext.prototype.domainName = function() {
    return this.getTypedRuleContext(DomainNameContext,0);
};

DomainContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

DomainContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DomainContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

DomainContext.prototype.domainItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DomainItemContext);
    } else {
        return this.getTypedRuleContext(DomainItemContext,i);
    }
};

DomainContext.prototype.footerDocumentation = function() {
    return this.getTypedRuleContext(FooterDocumentationContext,0);
};

DomainContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDomain(this);
	}
};

DomainContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDomain(this);
	}
};




MetaEdGrammar.DomainContext = DomainContext;

MetaEdGrammar.prototype.domain = function() {

    var localctx = new DomainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, MetaEdGrammar.RULE_domain);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 574;
        this.match(MetaEdGrammar.DOMAIN);
        this.state = 575;
        this.domainName();
        this.state = 577;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 576;
            this.metaEdId();
        }

        this.state = 580;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 579;
            this.deprecated();
        }

        this.state = 582;
        this.documentation();
        this.state = 584; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 583;
            this.domainItem();
            this.state = 586; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)))) !== 0));
        this.state = 589;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.FOOTER_DOCUMENTATION) {
            this.state = 588;
            this.footerDocumentation();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DomainItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_domainItem;
    return this;
}

DomainItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DomainItemContext.prototype.constructor = DomainItemContext;

DomainItemContext.prototype.localDomainItemName = function() {
    return this.getTypedRuleContext(LocalDomainItemNameContext,0);
};

DomainItemContext.prototype.ASSOCIATION_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.ASSOCIATION_KEYWORD, 0);
};

DomainItemContext.prototype.COMMON_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.COMMON_KEYWORD, 0);
};

DomainItemContext.prototype.DOMAIN_ENTITY_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY_KEYWORD, 0);
};

DomainItemContext.prototype.DESCRIPTOR_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.DESCRIPTOR_KEYWORD, 0);
};

DomainItemContext.prototype.INLINE_COMMON_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.INLINE_COMMON_KEYWORD, 0);
};

DomainItemContext.prototype.baseNamespace = function() {
    return this.getTypedRuleContext(BaseNamespaceContext,0);
};

DomainItemContext.prototype.PERIOD = function() {
    return this.getToken(MetaEdGrammar.PERIOD, 0);
};

DomainItemContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DomainItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDomainItem(this);
	}
};

DomainItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDomainItem(this);
	}
};




MetaEdGrammar.DomainItemContext = DomainItemContext;

MetaEdGrammar.prototype.domainItem = function() {

    var localctx = new DomainItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, MetaEdGrammar.RULE_domainItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 591;
        _la = this._input.LA(1);
        if(!(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 595;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
        if(la_===1) {
            this.state = 592;
            this.baseNamespace();
            this.state = 593;
            this.match(MetaEdGrammar.PERIOD);

        }
        this.state = 597;
        this.localDomainItemName();
        this.state = 599;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 598;
            this.metaEdId();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function FooterDocumentationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_footerDocumentation;
    return this;
}

FooterDocumentationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FooterDocumentationContext.prototype.constructor = FooterDocumentationContext;

FooterDocumentationContext.prototype.FOOTER_DOCUMENTATION = function() {
    return this.getToken(MetaEdGrammar.FOOTER_DOCUMENTATION, 0);
};

FooterDocumentationContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

FooterDocumentationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterFooterDocumentation(this);
	}
};

FooterDocumentationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitFooterDocumentation(this);
	}
};




MetaEdGrammar.FooterDocumentationContext = FooterDocumentationContext;

MetaEdGrammar.prototype.footerDocumentation = function() {

    var localctx = new FooterDocumentationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, MetaEdGrammar.RULE_footerDocumentation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 601;
        this.match(MetaEdGrammar.FOOTER_DOCUMENTATION);
        this.state = 602;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DomainEntityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_domainEntity;
    return this;
}

DomainEntityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DomainEntityContext.prototype.constructor = DomainEntityContext;

DomainEntityContext.prototype.DOMAIN_ENTITY = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY, 0);
};

DomainEntityContext.prototype.entityName = function() {
    return this.getTypedRuleContext(EntityNameContext,0);
};

DomainEntityContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

DomainEntityContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DomainEntityContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

DomainEntityContext.prototype.entityConfiguration = function() {
    return this.getTypedRuleContext(EntityConfigurationContext,0);
};

DomainEntityContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

DomainEntityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDomainEntity(this);
	}
};

DomainEntityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDomainEntity(this);
	}
};




MetaEdGrammar.DomainEntityContext = DomainEntityContext;

MetaEdGrammar.prototype.domainEntity = function() {

    var localctx = new DomainEntityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, MetaEdGrammar.RULE_domainEntity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 604;
        this.match(MetaEdGrammar.DOMAIN_ENTITY);
        this.state = 605;
        this.entityName();
        this.state = 607;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 606;
            this.metaEdId();
        }

        this.state = 610;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 609;
            this.deprecated();
        }

        this.state = 612;
        this.documentation();
        this.state = 614;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.CASCADE_UPDATE) {
            this.state = 613;
            this.entityConfiguration();
        }

        this.state = 617; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 616;
            this.property();
            this.state = 619; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DomainEntityExtensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_domainEntityExtension;
    return this;
}

DomainEntityExtensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DomainEntityExtensionContext.prototype.constructor = DomainEntityExtensionContext;

DomainEntityExtensionContext.prototype.DOMAIN_ENTITY = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY, 0);
};

DomainEntityExtensionContext.prototype.extendeeName = function() {
    return this.getTypedRuleContext(ExtendeeNameContext,0);
};

DomainEntityExtensionContext.prototype.ADDITIONS = function() {
    return this.getToken(MetaEdGrammar.ADDITIONS, 0);
};

DomainEntityExtensionContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DomainEntityExtensionContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

DomainEntityExtensionContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

DomainEntityExtensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDomainEntityExtension(this);
	}
};

DomainEntityExtensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDomainEntityExtension(this);
	}
};




MetaEdGrammar.DomainEntityExtensionContext = DomainEntityExtensionContext;

MetaEdGrammar.prototype.domainEntityExtension = function() {

    var localctx = new DomainEntityExtensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, MetaEdGrammar.RULE_domainEntityExtension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 621;
        this.match(MetaEdGrammar.DOMAIN_ENTITY);
        this.state = 622;
        this.extendeeName();
        this.state = 623;
        this.match(MetaEdGrammar.ADDITIONS);
        this.state = 625;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 624;
            this.metaEdId();
        }

        this.state = 628;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 627;
            this.deprecated();
        }

        this.state = 631; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 630;
            this.property();
            this.state = 633; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DomainEntitySubclassContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_domainEntitySubclass;
    return this;
}

DomainEntitySubclassContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DomainEntitySubclassContext.prototype.constructor = DomainEntitySubclassContext;

DomainEntitySubclassContext.prototype.DOMAIN_ENTITY = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY, 0);
};

DomainEntitySubclassContext.prototype.entityName = function() {
    return this.getTypedRuleContext(EntityNameContext,0);
};

DomainEntitySubclassContext.prototype.BASED_ON = function() {
    return this.getToken(MetaEdGrammar.BASED_ON, 0);
};

DomainEntitySubclassContext.prototype.baseName = function() {
    return this.getTypedRuleContext(BaseNameContext,0);
};

DomainEntitySubclassContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

DomainEntitySubclassContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DomainEntitySubclassContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

DomainEntitySubclassContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

DomainEntitySubclassContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDomainEntitySubclass(this);
	}
};

DomainEntitySubclassContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDomainEntitySubclass(this);
	}
};




MetaEdGrammar.DomainEntitySubclassContext = DomainEntitySubclassContext;

MetaEdGrammar.prototype.domainEntitySubclass = function() {

    var localctx = new DomainEntitySubclassContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, MetaEdGrammar.RULE_domainEntitySubclass);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 635;
        this.match(MetaEdGrammar.DOMAIN_ENTITY);
        this.state = 636;
        this.entityName();
        this.state = 637;
        this.match(MetaEdGrammar.BASED_ON);
        this.state = 638;
        this.baseName();
        this.state = 640;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 639;
            this.metaEdId();
        }

        this.state = 643;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 642;
            this.deprecated();
        }

        this.state = 645;
        this.documentation();
        this.state = 647; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 646;
            this.property();
            this.state = 649; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumerationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_enumeration;
    return this;
}

EnumerationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationContext.prototype.constructor = EnumerationContext;

EnumerationContext.prototype.ENUMERATION = function() {
    return this.getToken(MetaEdGrammar.ENUMERATION, 0);
};

EnumerationContext.prototype.enumerationName = function() {
    return this.getTypedRuleContext(EnumerationNameContext,0);
};

EnumerationContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

EnumerationContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

EnumerationContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

EnumerationContext.prototype.enumerationItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumerationItemContext);
    } else {
        return this.getTypedRuleContext(EnumerationItemContext,i);
    }
};

EnumerationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterEnumeration(this);
	}
};

EnumerationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitEnumeration(this);
	}
};




MetaEdGrammar.EnumerationContext = EnumerationContext;

MetaEdGrammar.prototype.enumeration = function() {

    var localctx = new EnumerationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, MetaEdGrammar.RULE_enumeration);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 651;
        this.match(MetaEdGrammar.ENUMERATION);
        this.state = 652;
        this.enumerationName();
        this.state = 654;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 653;
            this.metaEdId();
        }

        this.state = 657;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 656;
            this.deprecated();
        }

        this.state = 659;
        this.documentation();
        this.state = 661; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 660;
            this.enumerationItem();
            this.state = 663; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(_la===MetaEdGrammar.ENUMERATION_ITEM);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumerationItemContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_enumerationItem;
    return this;
}

EnumerationItemContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationItemContext.prototype.constructor = EnumerationItemContext;

EnumerationItemContext.prototype.ENUMERATION_ITEM = function() {
    return this.getToken(MetaEdGrammar.ENUMERATION_ITEM, 0);
};

EnumerationItemContext.prototype.shortDescription = function() {
    return this.getTypedRuleContext(ShortDescriptionContext,0);
};

EnumerationItemContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

EnumerationItemContext.prototype.enumerationItemDocumentation = function() {
    return this.getTypedRuleContext(EnumerationItemDocumentationContext,0);
};

EnumerationItemContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterEnumerationItem(this);
	}
};

EnumerationItemContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitEnumerationItem(this);
	}
};




MetaEdGrammar.EnumerationItemContext = EnumerationItemContext;

MetaEdGrammar.prototype.enumerationItem = function() {

    var localctx = new EnumerationItemContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, MetaEdGrammar.RULE_enumerationItem);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 665;
        this.match(MetaEdGrammar.ENUMERATION_ITEM);
        this.state = 666;
        this.shortDescription();
        this.state = 668;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 667;
            this.metaEdId();
        }

        this.state = 671;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DOCUMENTATION) {
            this.state = 670;
            this.enumerationItemDocumentation();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortDescriptionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_shortDescription;
    return this;
}

ShortDescriptionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortDescriptionContext.prototype.constructor = ShortDescriptionContext;

ShortDescriptionContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

ShortDescriptionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterShortDescription(this);
	}
};

ShortDescriptionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitShortDescription(this);
	}
};




MetaEdGrammar.ShortDescriptionContext = ShortDescriptionContext;

MetaEdGrammar.prototype.shortDescription = function() {

    var localctx = new ShortDescriptionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, MetaEdGrammar.RULE_shortDescription);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 673;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineCommonContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_inlineCommon;
    return this;
}

InlineCommonContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineCommonContext.prototype.constructor = InlineCommonContext;

InlineCommonContext.prototype.INLINE_COMMON = function() {
    return this.getToken(MetaEdGrammar.INLINE_COMMON, 0);
};

InlineCommonContext.prototype.inlineCommonName = function() {
    return this.getTypedRuleContext(InlineCommonNameContext,0);
};

InlineCommonContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

InlineCommonContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

InlineCommonContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

InlineCommonContext.prototype.property = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PropertyContext);
    } else {
        return this.getTypedRuleContext(PropertyContext,i);
    }
};

InlineCommonContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInlineCommon(this);
	}
};

InlineCommonContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInlineCommon(this);
	}
};




MetaEdGrammar.InlineCommonContext = InlineCommonContext;

MetaEdGrammar.prototype.inlineCommon = function() {

    var localctx = new InlineCommonContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, MetaEdGrammar.RULE_inlineCommon);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 675;
        this.match(MetaEdGrammar.INLINE_COMMON);
        this.state = 676;
        this.inlineCommonName();
        this.state = 678;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 677;
            this.metaEdId();
        }

        this.state = 681;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 680;
            this.deprecated();
        }

        this.state = 683;
        this.documentation();
        this.state = 685; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 684;
            this.property();
            this.state = 687; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.BOOLEAN - 20)) | (1 << (MetaEdGrammar.CHOICE_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_EXTENSION - 20)) | (1 << (MetaEdGrammar.CURRENCY - 20)) | (1 << (MetaEdGrammar.DATE - 20)) | (1 << (MetaEdGrammar.DATETIME - 20)) | (1 << (MetaEdGrammar.DECIMAL - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DURATION - 20)) | (1 << (MetaEdGrammar.ENUMERATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.INTEGER - 20)) | (1 << (MetaEdGrammar.PERCENT - 20)) | (1 << (MetaEdGrammar.SHARED_DECIMAL_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_INTEGER_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_SHORT_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHARED_STRING_KEYWORD - 20)) | (1 << (MetaEdGrammar.SHORT - 20)) | (1 << (MetaEdGrammar.STRING - 20)) | (1 << (MetaEdGrammar.TIME - 20)) | (1 << (MetaEdGrammar.YEAR - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterchangeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_interchange;
    return this;
}

InterchangeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterchangeContext.prototype.constructor = InterchangeContext;

InterchangeContext.prototype.INTERCHANGE = function() {
    return this.getToken(MetaEdGrammar.INTERCHANGE, 0);
};

InterchangeContext.prototype.interchangeName = function() {
    return this.getTypedRuleContext(InterchangeNameContext,0);
};

InterchangeContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

InterchangeContext.prototype.interchangeComponent = function() {
    return this.getTypedRuleContext(InterchangeComponentContext,0);
};

InterchangeContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

InterchangeContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

InterchangeContext.prototype.extendedDocumentation = function() {
    return this.getTypedRuleContext(ExtendedDocumentationContext,0);
};

InterchangeContext.prototype.useCaseDocumentation = function() {
    return this.getTypedRuleContext(UseCaseDocumentationContext,0);
};

InterchangeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInterchange(this);
	}
};

InterchangeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInterchange(this);
	}
};




MetaEdGrammar.InterchangeContext = InterchangeContext;

MetaEdGrammar.prototype.interchange = function() {

    var localctx = new InterchangeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, MetaEdGrammar.RULE_interchange);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 689;
        this.match(MetaEdGrammar.INTERCHANGE);
        this.state = 690;
        this.interchangeName();
        this.state = 692;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 691;
            this.metaEdId();
        }

        this.state = 695;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 694;
            this.deprecated();
        }

        this.state = 697;
        this.documentation();
        this.state = 699;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.EXTENDED_DOCUMENTATION) {
            this.state = 698;
            this.extendedDocumentation();
        }

        this.state = 702;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.USE_CASE_DOCUMENTATION) {
            this.state = 701;
            this.useCaseDocumentation();
        }

        this.state = 704;
        this.interchangeComponent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendedDocumentationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_extendedDocumentation;
    return this;
}

ExtendedDocumentationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendedDocumentationContext.prototype.constructor = ExtendedDocumentationContext;

ExtendedDocumentationContext.prototype.EXTENDED_DOCUMENTATION = function() {
    return this.getToken(MetaEdGrammar.EXTENDED_DOCUMENTATION, 0);
};

ExtendedDocumentationContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

ExtendedDocumentationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterExtendedDocumentation(this);
	}
};

ExtendedDocumentationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitExtendedDocumentation(this);
	}
};




MetaEdGrammar.ExtendedDocumentationContext = ExtendedDocumentationContext;

MetaEdGrammar.prototype.extendedDocumentation = function() {

    var localctx = new ExtendedDocumentationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, MetaEdGrammar.RULE_extendedDocumentation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 706;
        this.match(MetaEdGrammar.EXTENDED_DOCUMENTATION);
        this.state = 707;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UseCaseDocumentationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_useCaseDocumentation;
    return this;
}

UseCaseDocumentationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseCaseDocumentationContext.prototype.constructor = UseCaseDocumentationContext;

UseCaseDocumentationContext.prototype.USE_CASE_DOCUMENTATION = function() {
    return this.getToken(MetaEdGrammar.USE_CASE_DOCUMENTATION, 0);
};

UseCaseDocumentationContext.prototype.TEXT = function() {
    return this.getToken(MetaEdGrammar.TEXT, 0);
};

UseCaseDocumentationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterUseCaseDocumentation(this);
	}
};

UseCaseDocumentationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitUseCaseDocumentation(this);
	}
};




MetaEdGrammar.UseCaseDocumentationContext = UseCaseDocumentationContext;

MetaEdGrammar.prototype.useCaseDocumentation = function() {

    var localctx = new UseCaseDocumentationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, MetaEdGrammar.RULE_useCaseDocumentation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 709;
        this.match(MetaEdGrammar.USE_CASE_DOCUMENTATION);
        this.state = 710;
        this.match(MetaEdGrammar.TEXT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterchangeComponentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_interchangeComponent;
    return this;
}

InterchangeComponentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterchangeComponentContext.prototype.constructor = InterchangeComponentContext;

InterchangeComponentContext.prototype.interchangeElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterchangeElementContext);
    } else {
        return this.getTypedRuleContext(InterchangeElementContext,i);
    }
};

InterchangeComponentContext.prototype.interchangeIdentity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterchangeIdentityContext);
    } else {
        return this.getTypedRuleContext(InterchangeIdentityContext,i);
    }
};

InterchangeComponentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInterchangeComponent(this);
	}
};

InterchangeComponentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInterchangeComponent(this);
	}
};




MetaEdGrammar.InterchangeComponentContext = InterchangeComponentContext;

MetaEdGrammar.prototype.interchangeComponent = function() {

    var localctx = new InterchangeComponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, MetaEdGrammar.RULE_interchangeComponent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 715;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.ASSOCIATION_IDENTITY || _la===MetaEdGrammar.DOMAIN_ENTITY_IDENTITY) {
            this.state = 712;
            this.interchangeIdentity();
            this.state = 717;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 718;
        this.interchangeElement();
        this.state = 723;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.ASSOCIATION_IDENTITY - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_IDENTITY - 20)))) !== 0)) {
            this.state = 721;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MetaEdGrammar.ASSOCIATION_KEYWORD:
            case MetaEdGrammar.DESCRIPTOR_KEYWORD:
            case MetaEdGrammar.DOMAIN_ENTITY_KEYWORD:
                this.state = 719;
                this.interchangeElement();
                break;
            case MetaEdGrammar.ASSOCIATION_IDENTITY:
            case MetaEdGrammar.DOMAIN_ENTITY_IDENTITY:
                this.state = 720;
                this.interchangeIdentity();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 725;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterchangeElementContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_interchangeElement;
    return this;
}

InterchangeElementContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterchangeElementContext.prototype.constructor = InterchangeElementContext;

InterchangeElementContext.prototype.localInterchangeItemName = function() {
    return this.getTypedRuleContext(LocalInterchangeItemNameContext,0);
};

InterchangeElementContext.prototype.ASSOCIATION_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.ASSOCIATION_KEYWORD, 0);
};

InterchangeElementContext.prototype.DESCRIPTOR_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.DESCRIPTOR_KEYWORD, 0);
};

InterchangeElementContext.prototype.DOMAIN_ENTITY_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY_KEYWORD, 0);
};

InterchangeElementContext.prototype.baseNamespace = function() {
    return this.getTypedRuleContext(BaseNamespaceContext,0);
};

InterchangeElementContext.prototype.PERIOD = function() {
    return this.getToken(MetaEdGrammar.PERIOD, 0);
};

InterchangeElementContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

InterchangeElementContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInterchangeElement(this);
	}
};

InterchangeElementContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInterchangeElement(this);
	}
};




MetaEdGrammar.InterchangeElementContext = InterchangeElementContext;

MetaEdGrammar.prototype.interchangeElement = function() {

    var localctx = new InterchangeElementContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, MetaEdGrammar.RULE_interchangeElement);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 726;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << MetaEdGrammar.ASSOCIATION_KEYWORD) | (1 << MetaEdGrammar.DESCRIPTOR_KEYWORD) | (1 << MetaEdGrammar.DOMAIN_ENTITY_KEYWORD))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 730;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,84,this._ctx);
        if(la_===1) {
            this.state = 727;
            this.baseNamespace();
            this.state = 728;
            this.match(MetaEdGrammar.PERIOD);

        }
        this.state = 732;
        this.localInterchangeItemName();
        this.state = 734;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 733;
            this.metaEdId();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterchangeIdentityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_interchangeIdentity;
    return this;
}

InterchangeIdentityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterchangeIdentityContext.prototype.constructor = InterchangeIdentityContext;

InterchangeIdentityContext.prototype.localInterchangeItemName = function() {
    return this.getTypedRuleContext(LocalInterchangeItemNameContext,0);
};

InterchangeIdentityContext.prototype.ASSOCIATION_IDENTITY = function() {
    return this.getToken(MetaEdGrammar.ASSOCIATION_IDENTITY, 0);
};

InterchangeIdentityContext.prototype.DOMAIN_ENTITY_IDENTITY = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY_IDENTITY, 0);
};

InterchangeIdentityContext.prototype.baseNamespace = function() {
    return this.getTypedRuleContext(BaseNamespaceContext,0);
};

InterchangeIdentityContext.prototype.PERIOD = function() {
    return this.getToken(MetaEdGrammar.PERIOD, 0);
};

InterchangeIdentityContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

InterchangeIdentityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInterchangeIdentity(this);
	}
};

InterchangeIdentityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInterchangeIdentity(this);
	}
};




MetaEdGrammar.InterchangeIdentityContext = InterchangeIdentityContext;

MetaEdGrammar.prototype.interchangeIdentity = function() {

    var localctx = new InterchangeIdentityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, MetaEdGrammar.RULE_interchangeIdentity);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 736;
        _la = this._input.LA(1);
        if(!(_la===MetaEdGrammar.ASSOCIATION_IDENTITY || _la===MetaEdGrammar.DOMAIN_ENTITY_IDENTITY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 740;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,86,this._ctx);
        if(la_===1) {
            this.state = 737;
            this.baseNamespace();
            this.state = 738;
            this.match(MetaEdGrammar.PERIOD);

        }
        this.state = 742;
        this.localInterchangeItemName();
        this.state = 744;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 743;
            this.metaEdId();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterchangeExtensionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_interchangeExtension;
    return this;
}

InterchangeExtensionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterchangeExtensionContext.prototype.constructor = InterchangeExtensionContext;

InterchangeExtensionContext.prototype.INTERCHANGE = function() {
    return this.getToken(MetaEdGrammar.INTERCHANGE, 0);
};

InterchangeExtensionContext.prototype.extendeeName = function() {
    return this.getTypedRuleContext(ExtendeeNameContext,0);
};

InterchangeExtensionContext.prototype.ADDITIONS = function() {
    return this.getToken(MetaEdGrammar.ADDITIONS, 0);
};

InterchangeExtensionContext.prototype.interchangeExtensionComponent = function() {
    return this.getTypedRuleContext(InterchangeExtensionComponentContext,0);
};

InterchangeExtensionContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

InterchangeExtensionContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

InterchangeExtensionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInterchangeExtension(this);
	}
};

InterchangeExtensionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInterchangeExtension(this);
	}
};




MetaEdGrammar.InterchangeExtensionContext = InterchangeExtensionContext;

MetaEdGrammar.prototype.interchangeExtension = function() {

    var localctx = new InterchangeExtensionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, MetaEdGrammar.RULE_interchangeExtension);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 746;
        this.match(MetaEdGrammar.INTERCHANGE);
        this.state = 747;
        this.extendeeName();
        this.state = 748;
        this.match(MetaEdGrammar.ADDITIONS);
        this.state = 750;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 749;
            this.metaEdId();
        }

        this.state = 753;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 752;
            this.deprecated();
        }

        this.state = 755;
        this.interchangeExtensionComponent();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterchangeExtensionComponentContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_interchangeExtensionComponent;
    return this;
}

InterchangeExtensionComponentContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterchangeExtensionComponentContext.prototype.constructor = InterchangeExtensionComponentContext;

InterchangeExtensionComponentContext.prototype.interchangeElement = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterchangeElementContext);
    } else {
        return this.getTypedRuleContext(InterchangeElementContext,i);
    }
};

InterchangeExtensionComponentContext.prototype.interchangeIdentity = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(InterchangeIdentityContext);
    } else {
        return this.getTypedRuleContext(InterchangeIdentityContext,i);
    }
};

InterchangeExtensionComponentContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInterchangeExtensionComponent(this);
	}
};

InterchangeExtensionComponentContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInterchangeExtensionComponent(this);
	}
};




MetaEdGrammar.InterchangeExtensionComponentContext = InterchangeExtensionComponentContext;

MetaEdGrammar.prototype.interchangeExtensionComponent = function() {

    var localctx = new InterchangeExtensionComponentContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, MetaEdGrammar.RULE_interchangeExtensionComponent);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 759; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 759;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case MetaEdGrammar.ASSOCIATION_KEYWORD:
            case MetaEdGrammar.DESCRIPTOR_KEYWORD:
            case MetaEdGrammar.DOMAIN_ENTITY_KEYWORD:
                this.state = 757;
                this.interchangeElement();
                break;
            case MetaEdGrammar.ASSOCIATION_IDENTITY:
            case MetaEdGrammar.DOMAIN_ENTITY_IDENTITY:
                this.state = 758;
                this.interchangeIdentity();
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 761; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.ASSOCIATION_IDENTITY - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_IDENTITY - 20)))) !== 0));
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubdomainContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_subdomain;
    return this;
}

SubdomainContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubdomainContext.prototype.constructor = SubdomainContext;

SubdomainContext.prototype.SUBDOMAIN = function() {
    return this.getToken(MetaEdGrammar.SUBDOMAIN, 0);
};

SubdomainContext.prototype.subdomainName = function() {
    return this.getTypedRuleContext(SubdomainNameContext,0);
};

SubdomainContext.prototype.SUBDOMAIN_OF = function() {
    return this.getToken(MetaEdGrammar.SUBDOMAIN_OF, 0);
};

SubdomainContext.prototype.parentDomainName = function() {
    return this.getTypedRuleContext(ParentDomainNameContext,0);
};

SubdomainContext.prototype.documentation = function() {
    return this.getTypedRuleContext(DocumentationContext,0);
};

SubdomainContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SubdomainContext.prototype.deprecated = function() {
    return this.getTypedRuleContext(DeprecatedContext,0);
};

SubdomainContext.prototype.domainItem = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DomainItemContext);
    } else {
        return this.getTypedRuleContext(DomainItemContext,i);
    }
};

SubdomainContext.prototype.SUBDOMAIN_POSITION = function() {
    return this.getToken(MetaEdGrammar.SUBDOMAIN_POSITION, 0);
};

SubdomainContext.prototype.subdomainPosition = function() {
    return this.getTypedRuleContext(SubdomainPositionContext,0);
};

SubdomainContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSubdomain(this);
	}
};

SubdomainContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSubdomain(this);
	}
};




MetaEdGrammar.SubdomainContext = SubdomainContext;

MetaEdGrammar.prototype.subdomain = function() {

    var localctx = new SubdomainContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, MetaEdGrammar.RULE_subdomain);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 763;
        this.match(MetaEdGrammar.SUBDOMAIN);
        this.state = 764;
        this.subdomainName();
        this.state = 765;
        this.match(MetaEdGrammar.SUBDOMAIN_OF);
        this.state = 766;
        this.parentDomainName();
        this.state = 768;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 767;
            this.metaEdId();
        }

        this.state = 771;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 770;
            this.deprecated();
        }

        this.state = 773;
        this.documentation();
        this.state = 775; 
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        do {
            this.state = 774;
            this.domainItem();
            this.state = 777; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        } while(((((_la - 20)) & ~0x1f) == 0 && ((1 << (_la - 20)) & ((1 << (MetaEdGrammar.ASSOCIATION_KEYWORD - 20)) | (1 << (MetaEdGrammar.COMMON_KEYWORD - 20)) | (1 << (MetaEdGrammar.DESCRIPTOR_KEYWORD - 20)) | (1 << (MetaEdGrammar.DOMAIN_ENTITY_KEYWORD - 20)) | (1 << (MetaEdGrammar.INLINE_COMMON_KEYWORD - 20)))) !== 0));
        this.state = 781;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.SUBDOMAIN_POSITION) {
            this.state = 779;
            this.match(MetaEdGrammar.SUBDOMAIN_POSITION);
            this.state = 780;
            this.subdomainPosition();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubdomainPositionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_subdomainPosition;
    return this;
}

SubdomainPositionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubdomainPositionContext.prototype.constructor = SubdomainPositionContext;

SubdomainPositionContext.prototype.UNSIGNED_INT = function() {
    return this.getToken(MetaEdGrammar.UNSIGNED_INT, 0);
};

SubdomainPositionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSubdomainPosition(this);
	}
};

SubdomainPositionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSubdomainPosition(this);
	}
};




MetaEdGrammar.SubdomainPositionContext = SubdomainPositionContext;

MetaEdGrammar.prototype.subdomainPosition = function() {

    var localctx = new SubdomainPositionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, MetaEdGrammar.RULE_subdomainPosition);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 783;
        this.match(MetaEdGrammar.UNSIGNED_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MinValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_minValue;
    return this;
}

MinValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MinValueContext.prototype.constructor = MinValueContext;

MinValueContext.prototype.MIN_VALUE = function() {
    return this.getToken(MetaEdGrammar.MIN_VALUE, 0);
};

MinValueContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

MinValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMinValue(this);
	}
};

MinValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMinValue(this);
	}
};




MetaEdGrammar.MinValueContext = MinValueContext;

MetaEdGrammar.prototype.minValue = function() {

    var localctx = new MinValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, MetaEdGrammar.RULE_minValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 785;
        this.match(MetaEdGrammar.MIN_VALUE);
        this.state = 786;
        this.signed_int();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaxValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_maxValue;
    return this;
}

MaxValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaxValueContext.prototype.constructor = MaxValueContext;

MaxValueContext.prototype.MAX_VALUE = function() {
    return this.getToken(MetaEdGrammar.MAX_VALUE, 0);
};

MaxValueContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

MaxValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMaxValue(this);
	}
};

MaxValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMaxValue(this);
	}
};




MetaEdGrammar.MaxValueContext = MaxValueContext;

MetaEdGrammar.prototype.maxValue = function() {

    var localctx = new MaxValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, MetaEdGrammar.RULE_maxValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 788;
        this.match(MetaEdGrammar.MAX_VALUE);
        this.state = 789;
        this.signed_int();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MinValueDecimalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_minValueDecimal;
    return this;
}

MinValueDecimalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MinValueDecimalContext.prototype.constructor = MinValueDecimalContext;

MinValueDecimalContext.prototype.MIN_VALUE = function() {
    return this.getToken(MetaEdGrammar.MIN_VALUE, 0);
};

MinValueDecimalContext.prototype.decimalValue = function() {
    return this.getTypedRuleContext(DecimalValueContext,0);
};

MinValueDecimalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMinValueDecimal(this);
	}
};

MinValueDecimalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMinValueDecimal(this);
	}
};




MetaEdGrammar.MinValueDecimalContext = MinValueDecimalContext;

MetaEdGrammar.prototype.minValueDecimal = function() {

    var localctx = new MinValueDecimalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, MetaEdGrammar.RULE_minValueDecimal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 791;
        this.match(MetaEdGrammar.MIN_VALUE);
        this.state = 792;
        this.decimalValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaxValueDecimalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_maxValueDecimal;
    return this;
}

MaxValueDecimalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaxValueDecimalContext.prototype.constructor = MaxValueDecimalContext;

MaxValueDecimalContext.prototype.MAX_VALUE = function() {
    return this.getToken(MetaEdGrammar.MAX_VALUE, 0);
};

MaxValueDecimalContext.prototype.decimalValue = function() {
    return this.getTypedRuleContext(DecimalValueContext,0);
};

MaxValueDecimalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMaxValueDecimal(this);
	}
};

MaxValueDecimalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMaxValueDecimal(this);
	}
};




MetaEdGrammar.MaxValueDecimalContext = MaxValueDecimalContext;

MetaEdGrammar.prototype.maxValueDecimal = function() {

    var localctx = new MaxValueDecimalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, MetaEdGrammar.RULE_maxValueDecimal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 794;
        this.match(MetaEdGrammar.MAX_VALUE);
        this.state = 795;
        this.decimalValue();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecimalValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_decimalValue;
    return this;
}

DecimalValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalValueContext.prototype.constructor = DecimalValueContext;

DecimalValueContext.prototype.DECIMAL_VALUE = function() {
    return this.getToken(MetaEdGrammar.DECIMAL_VALUE, 0);
};

DecimalValueContext.prototype.signed_int = function() {
    return this.getTypedRuleContext(Signed_intContext,0);
};

DecimalValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDecimalValue(this);
	}
};

DecimalValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDecimalValue(this);
	}
};




MetaEdGrammar.DecimalValueContext = DecimalValueContext;

MetaEdGrammar.prototype.decimalValue = function() {

    var localctx = new DecimalValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, MetaEdGrammar.RULE_decimalValue);
    try {
        this.state = 799;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MetaEdGrammar.DECIMAL_VALUE:
            this.enterOuterAlt(localctx, 1);
            this.state = 797;
            this.match(MetaEdGrammar.DECIMAL_VALUE);
            break;
        case MetaEdGrammar.UNSIGNED_INT:
        case MetaEdGrammar.POS_SIGN:
        case MetaEdGrammar.NEG_SIGN:
            this.enterOuterAlt(localctx, 2);
            this.state = 798;
            this.signed_int();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TotalDigitsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_totalDigits;
    return this;
}

TotalDigitsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TotalDigitsContext.prototype.constructor = TotalDigitsContext;

TotalDigitsContext.prototype.TOTAL_DIGITS = function() {
    return this.getToken(MetaEdGrammar.TOTAL_DIGITS, 0);
};

TotalDigitsContext.prototype.UNSIGNED_INT = function() {
    return this.getToken(MetaEdGrammar.UNSIGNED_INT, 0);
};

TotalDigitsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterTotalDigits(this);
	}
};

TotalDigitsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitTotalDigits(this);
	}
};




MetaEdGrammar.TotalDigitsContext = TotalDigitsContext;

MetaEdGrammar.prototype.totalDigits = function() {

    var localctx = new TotalDigitsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, MetaEdGrammar.RULE_totalDigits);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 801;
        this.match(MetaEdGrammar.TOTAL_DIGITS);
        this.state = 802;
        this.match(MetaEdGrammar.UNSIGNED_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecimalPlacesContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_decimalPlaces;
    return this;
}

DecimalPlacesContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalPlacesContext.prototype.constructor = DecimalPlacesContext;

DecimalPlacesContext.prototype.DECIMAL_PLACES = function() {
    return this.getToken(MetaEdGrammar.DECIMAL_PLACES, 0);
};

DecimalPlacesContext.prototype.UNSIGNED_INT = function() {
    return this.getToken(MetaEdGrammar.UNSIGNED_INT, 0);
};

DecimalPlacesContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDecimalPlaces(this);
	}
};

DecimalPlacesContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDecimalPlaces(this);
	}
};




MetaEdGrammar.DecimalPlacesContext = DecimalPlacesContext;

MetaEdGrammar.prototype.decimalPlaces = function() {

    var localctx = new DecimalPlacesContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, MetaEdGrammar.RULE_decimalPlaces);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 804;
        this.match(MetaEdGrammar.DECIMAL_PLACES);
        this.state = 805;
        this.match(MetaEdGrammar.UNSIGNED_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommonExtensionOverrideContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_commonExtensionOverride;
    return this;
}

CommonExtensionOverrideContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonExtensionOverrideContext.prototype.constructor = CommonExtensionOverrideContext;

CommonExtensionOverrideContext.prototype.COMMON_EXTENSION = function() {
    return this.getToken(MetaEdGrammar.COMMON_EXTENSION, 0);
};

CommonExtensionOverrideContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCommonExtensionOverride(this);
	}
};

CommonExtensionOverrideContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCommonExtensionOverride(this);
	}
};




MetaEdGrammar.CommonExtensionOverrideContext = CommonExtensionOverrideContext;

MetaEdGrammar.prototype.commonExtensionOverride = function() {

    var localctx = new CommonExtensionOverrideContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, MetaEdGrammar.RULE_commonExtensionOverride);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 807;
        this.match(MetaEdGrammar.COMMON_EXTENSION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyAnnotationContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_propertyAnnotation;
    return this;
}

PropertyAnnotationContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyAnnotationContext.prototype.constructor = PropertyAnnotationContext;

PropertyAnnotationContext.prototype.identity = function() {
    return this.getTypedRuleContext(IdentityContext,0);
};

PropertyAnnotationContext.prototype.identityRename = function() {
    return this.getTypedRuleContext(IdentityRenameContext,0);
};

PropertyAnnotationContext.prototype.required = function() {
    return this.getTypedRuleContext(RequiredContext,0);
};

PropertyAnnotationContext.prototype.optional = function() {
    return this.getTypedRuleContext(OptionalContext,0);
};

PropertyAnnotationContext.prototype.collection = function() {
    return this.getTypedRuleContext(CollectionContext,0);
};

PropertyAnnotationContext.prototype.isQueryableOnly = function() {
    return this.getTypedRuleContext(IsQueryableOnlyContext,0);
};

PropertyAnnotationContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPropertyAnnotation(this);
	}
};

PropertyAnnotationContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPropertyAnnotation(this);
	}
};




MetaEdGrammar.PropertyAnnotationContext = PropertyAnnotationContext;

MetaEdGrammar.prototype.propertyAnnotation = function() {

    var localctx = new PropertyAnnotationContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, MetaEdGrammar.RULE_propertyAnnotation);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 815;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MetaEdGrammar.IDENTITY:
            this.state = 809;
            this.identity();
            break;
        case MetaEdGrammar.IDENTITY_RENAME:
            this.state = 810;
            this.identityRename();
            break;
        case MetaEdGrammar.REQUIRED:
            this.state = 811;
            this.required();
            break;
        case MetaEdGrammar.OPTIONAL:
            this.state = 812;
            this.optional();
            break;
        case MetaEdGrammar.OPTIONAL_COLLECTION:
        case MetaEdGrammar.REQUIRED_COLLECTION:
            this.state = 813;
            this.collection();
            break;
        case MetaEdGrammar.IS_QUERYABLE_ONLY:
            this.state = 814;
            this.isQueryableOnly();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentityContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_identity;
    return this;
}

IdentityContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentityContext.prototype.constructor = IdentityContext;

IdentityContext.prototype.IDENTITY = function() {
    return this.getToken(MetaEdGrammar.IDENTITY, 0);
};

IdentityContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterIdentity(this);
	}
};

IdentityContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitIdentity(this);
	}
};




MetaEdGrammar.IdentityContext = IdentityContext;

MetaEdGrammar.prototype.identity = function() {

    var localctx = new IdentityContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, MetaEdGrammar.RULE_identity);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 817;
        this.match(MetaEdGrammar.IDENTITY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IdentityRenameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_identityRename;
    return this;
}

IdentityRenameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentityRenameContext.prototype.constructor = IdentityRenameContext;

IdentityRenameContext.prototype.IDENTITY_RENAME = function() {
    return this.getToken(MetaEdGrammar.IDENTITY_RENAME, 0);
};

IdentityRenameContext.prototype.baseKeyName = function() {
    return this.getTypedRuleContext(BaseKeyNameContext,0);
};

IdentityRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterIdentityRename(this);
	}
};

IdentityRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitIdentityRename(this);
	}
};




MetaEdGrammar.IdentityRenameContext = IdentityRenameContext;

MetaEdGrammar.prototype.identityRename = function() {

    var localctx = new IdentityRenameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, MetaEdGrammar.RULE_identityRename);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 819;
        this.match(MetaEdGrammar.IDENTITY_RENAME);
        this.state = 820;
        this.baseKeyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RequiredContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_required;
    return this;
}

RequiredContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredContext.prototype.constructor = RequiredContext;

RequiredContext.prototype.REQUIRED = function() {
    return this.getToken(MetaEdGrammar.REQUIRED, 0);
};

RequiredContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterRequired(this);
	}
};

RequiredContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitRequired(this);
	}
};




MetaEdGrammar.RequiredContext = RequiredContext;

MetaEdGrammar.prototype.required = function() {

    var localctx = new RequiredContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, MetaEdGrammar.RULE_required);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 822;
        this.match(MetaEdGrammar.REQUIRED);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_optional;
    return this;
}

OptionalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalContext.prototype.constructor = OptionalContext;

OptionalContext.prototype.OPTIONAL = function() {
    return this.getToken(MetaEdGrammar.OPTIONAL, 0);
};

OptionalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterOptional(this);
	}
};

OptionalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitOptional(this);
	}
};




MetaEdGrammar.OptionalContext = OptionalContext;

MetaEdGrammar.prototype.optional = function() {

    var localctx = new OptionalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, MetaEdGrammar.RULE_optional);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 824;
        this.match(MetaEdGrammar.OPTIONAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CollectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_collection;
    return this;
}

CollectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CollectionContext.prototype.constructor = CollectionContext;

CollectionContext.prototype.requiredCollection = function() {
    return this.getTypedRuleContext(RequiredCollectionContext,0);
};

CollectionContext.prototype.optionalCollection = function() {
    return this.getTypedRuleContext(OptionalCollectionContext,0);
};

CollectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCollection(this);
	}
};

CollectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCollection(this);
	}
};




MetaEdGrammar.CollectionContext = CollectionContext;

MetaEdGrammar.prototype.collection = function() {

    var localctx = new CollectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, MetaEdGrammar.RULE_collection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 828;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MetaEdGrammar.REQUIRED_COLLECTION:
            this.state = 826;
            this.requiredCollection();
            break;
        case MetaEdGrammar.OPTIONAL_COLLECTION:
            this.state = 827;
            this.optionalCollection();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RequiredCollectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_requiredCollection;
    return this;
}

RequiredCollectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RequiredCollectionContext.prototype.constructor = RequiredCollectionContext;

RequiredCollectionContext.prototype.REQUIRED_COLLECTION = function() {
    return this.getToken(MetaEdGrammar.REQUIRED_COLLECTION, 0);
};

RequiredCollectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterRequiredCollection(this);
	}
};

RequiredCollectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitRequiredCollection(this);
	}
};




MetaEdGrammar.RequiredCollectionContext = RequiredCollectionContext;

MetaEdGrammar.prototype.requiredCollection = function() {

    var localctx = new RequiredCollectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, MetaEdGrammar.RULE_requiredCollection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 830;
        this.match(MetaEdGrammar.REQUIRED_COLLECTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function OptionalCollectionContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_optionalCollection;
    return this;
}

OptionalCollectionContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptionalCollectionContext.prototype.constructor = OptionalCollectionContext;

OptionalCollectionContext.prototype.OPTIONAL_COLLECTION = function() {
    return this.getToken(MetaEdGrammar.OPTIONAL_COLLECTION, 0);
};

OptionalCollectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterOptionalCollection(this);
	}
};

OptionalCollectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitOptionalCollection(this);
	}
};




MetaEdGrammar.OptionalCollectionContext = OptionalCollectionContext;

MetaEdGrammar.prototype.optionalCollection = function() {

    var localctx = new OptionalCollectionContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, MetaEdGrammar.RULE_optionalCollection);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 832;
        this.match(MetaEdGrammar.OPTIONAL_COLLECTION);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsQueryableOnlyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_isQueryableOnly;
    return this;
}

IsQueryableOnlyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsQueryableOnlyContext.prototype.constructor = IsQueryableOnlyContext;

IsQueryableOnlyContext.prototype.IS_QUERYABLE_ONLY = function() {
    return this.getToken(MetaEdGrammar.IS_QUERYABLE_ONLY, 0);
};

IsQueryableOnlyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterIsQueryableOnly(this);
	}
};

IsQueryableOnlyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitIsQueryableOnly(this);
	}
};




MetaEdGrammar.IsQueryableOnlyContext = IsQueryableOnlyContext;

MetaEdGrammar.prototype.isQueryableOnly = function() {

    var localctx = new IsQueryableOnlyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, MetaEdGrammar.RULE_isQueryableOnly);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 834;
        this.match(MetaEdGrammar.IS_QUERYABLE_ONLY);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyComponentsContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_propertyComponents;
    return this;
}

PropertyComponentsContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyComponentsContext.prototype.constructor = PropertyComponentsContext;

PropertyComponentsContext.prototype.propertyDocumentation = function() {
    return this.getTypedRuleContext(PropertyDocumentationContext,0);
};

PropertyComponentsContext.prototype.propertyAnnotation = function() {
    return this.getTypedRuleContext(PropertyAnnotationContext,0);
};

PropertyComponentsContext.prototype.propertyDeprecated = function() {
    return this.getTypedRuleContext(PropertyDeprecatedContext,0);
};

PropertyComponentsContext.prototype.roleName = function() {
    return this.getTypedRuleContext(RoleNameContext,0);
};

PropertyComponentsContext.prototype.isQueryableField = function() {
    return this.getTypedRuleContext(IsQueryableFieldContext,0);
};

PropertyComponentsContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPropertyComponents(this);
	}
};

PropertyComponentsContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPropertyComponents(this);
	}
};




MetaEdGrammar.PropertyComponentsContext = PropertyComponentsContext;

MetaEdGrammar.prototype.propertyComponents = function() {

    var localctx = new PropertyComponentsContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, MetaEdGrammar.RULE_propertyComponents);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 837;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.DEPRECATED) {
            this.state = 836;
            this.propertyDeprecated();
        }

        this.state = 839;
        this.propertyDocumentation();
        this.state = 840;
        this.propertyAnnotation();
        this.state = 842;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.ROLE_NAME) {
            this.state = 841;
            this.roleName();
        }

        this.state = 845;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.IS_QUERYABLE_FIELD) {
            this.state = 844;
            this.isQueryableField();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsQueryableFieldContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_isQueryableField;
    return this;
}

IsQueryableFieldContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsQueryableFieldContext.prototype.constructor = IsQueryableFieldContext;

IsQueryableFieldContext.prototype.IS_QUERYABLE_FIELD = function() {
    return this.getToken(MetaEdGrammar.IS_QUERYABLE_FIELD, 0);
};

IsQueryableFieldContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterIsQueryableField(this);
	}
};

IsQueryableFieldContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitIsQueryableField(this);
	}
};




MetaEdGrammar.IsQueryableFieldContext = IsQueryableFieldContext;

MetaEdGrammar.prototype.isQueryableField = function() {

    var localctx = new IsQueryableFieldContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, MetaEdGrammar.RULE_isQueryableField);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 847;
        this.match(MetaEdGrammar.IS_QUERYABLE_FIELD);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoleNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_roleName;
    return this;
}

RoleNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleNameContext.prototype.constructor = RoleNameContext;

RoleNameContext.prototype.ROLE_NAME = function() {
    return this.getToken(MetaEdGrammar.ROLE_NAME, 0);
};

RoleNameContext.prototype.roleNameName = function() {
    return this.getTypedRuleContext(RoleNameNameContext,0);
};

RoleNameContext.prototype.SHORTEN_TO = function() {
    return this.getToken(MetaEdGrammar.SHORTEN_TO, 0);
};

RoleNameContext.prototype.shortenToName = function() {
    return this.getTypedRuleContext(ShortenToNameContext,0);
};

RoleNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterRoleName(this);
	}
};

RoleNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitRoleName(this);
	}
};




MetaEdGrammar.RoleNameContext = RoleNameContext;

MetaEdGrammar.prototype.roleName = function() {

    var localctx = new RoleNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, MetaEdGrammar.RULE_roleName);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 849;
        this.match(MetaEdGrammar.ROLE_NAME);
        this.state = 850;
        this.roleNameName();
        this.state = 853;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.SHORTEN_TO) {
            this.state = 851;
            this.match(MetaEdGrammar.SHORTEN_TO);
            this.state = 852;
            this.shortenToName();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MinLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_minLength;
    return this;
}

MinLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MinLengthContext.prototype.constructor = MinLengthContext;

MinLengthContext.prototype.MIN_LENGTH = function() {
    return this.getToken(MetaEdGrammar.MIN_LENGTH, 0);
};

MinLengthContext.prototype.UNSIGNED_INT = function() {
    return this.getToken(MetaEdGrammar.UNSIGNED_INT, 0);
};

MinLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMinLength(this);
	}
};

MinLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMinLength(this);
	}
};




MetaEdGrammar.MinLengthContext = MinLengthContext;

MetaEdGrammar.prototype.minLength = function() {

    var localctx = new MinLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 138, MetaEdGrammar.RULE_minLength);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 855;
        this.match(MetaEdGrammar.MIN_LENGTH);
        this.state = 856;
        this.match(MetaEdGrammar.UNSIGNED_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MaxLengthContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_maxLength;
    return this;
}

MaxLengthContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MaxLengthContext.prototype.constructor = MaxLengthContext;

MaxLengthContext.prototype.MAX_LENGTH = function() {
    return this.getToken(MetaEdGrammar.MAX_LENGTH, 0);
};

MaxLengthContext.prototype.UNSIGNED_INT = function() {
    return this.getToken(MetaEdGrammar.UNSIGNED_INT, 0);
};

MaxLengthContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMaxLength(this);
	}
};

MaxLengthContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMaxLength(this);
	}
};




MetaEdGrammar.MaxLengthContext = MaxLengthContext;

MetaEdGrammar.prototype.maxLength = function() {

    var localctx = new MaxLengthContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, MetaEdGrammar.RULE_maxLength);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 858;
        this.match(MetaEdGrammar.MAX_LENGTH);
        this.state = 859;
        this.match(MetaEdGrammar.UNSIGNED_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_property;
    return this;
}

PropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyContext.prototype.constructor = PropertyContext;

PropertyContext.prototype.associationProperty = function() {
    return this.getTypedRuleContext(AssociationPropertyContext,0);
};

PropertyContext.prototype.booleanProperty = function() {
    return this.getTypedRuleContext(BooleanPropertyContext,0);
};

PropertyContext.prototype.choiceProperty = function() {
    return this.getTypedRuleContext(ChoicePropertyContext,0);
};

PropertyContext.prototype.commonProperty = function() {
    return this.getTypedRuleContext(CommonPropertyContext,0);
};

PropertyContext.prototype.currencyProperty = function() {
    return this.getTypedRuleContext(CurrencyPropertyContext,0);
};

PropertyContext.prototype.dateProperty = function() {
    return this.getTypedRuleContext(DatePropertyContext,0);
};

PropertyContext.prototype.datetimeProperty = function() {
    return this.getTypedRuleContext(DatetimePropertyContext,0);
};

PropertyContext.prototype.decimalProperty = function() {
    return this.getTypedRuleContext(DecimalPropertyContext,0);
};

PropertyContext.prototype.descriptorProperty = function() {
    return this.getTypedRuleContext(DescriptorPropertyContext,0);
};

PropertyContext.prototype.domainEntityProperty = function() {
    return this.getTypedRuleContext(DomainEntityPropertyContext,0);
};

PropertyContext.prototype.durationProperty = function() {
    return this.getTypedRuleContext(DurationPropertyContext,0);
};

PropertyContext.prototype.enumerationProperty = function() {
    return this.getTypedRuleContext(EnumerationPropertyContext,0);
};

PropertyContext.prototype.inlineCommonProperty = function() {
    return this.getTypedRuleContext(InlineCommonPropertyContext,0);
};

PropertyContext.prototype.integerProperty = function() {
    return this.getTypedRuleContext(IntegerPropertyContext,0);
};

PropertyContext.prototype.percentProperty = function() {
    return this.getTypedRuleContext(PercentPropertyContext,0);
};

PropertyContext.prototype.sharedDecimalProperty = function() {
    return this.getTypedRuleContext(SharedDecimalPropertyContext,0);
};

PropertyContext.prototype.sharedIntegerProperty = function() {
    return this.getTypedRuleContext(SharedIntegerPropertyContext,0);
};

PropertyContext.prototype.sharedShortProperty = function() {
    return this.getTypedRuleContext(SharedShortPropertyContext,0);
};

PropertyContext.prototype.sharedStringProperty = function() {
    return this.getTypedRuleContext(SharedStringPropertyContext,0);
};

PropertyContext.prototype.shortProperty = function() {
    return this.getTypedRuleContext(ShortPropertyContext,0);
};

PropertyContext.prototype.stringProperty = function() {
    return this.getTypedRuleContext(StringPropertyContext,0);
};

PropertyContext.prototype.timeProperty = function() {
    return this.getTypedRuleContext(TimePropertyContext,0);
};

PropertyContext.prototype.yearProperty = function() {
    return this.getTypedRuleContext(YearPropertyContext,0);
};

PropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterProperty(this);
	}
};

PropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitProperty(this);
	}
};




MetaEdGrammar.PropertyContext = PropertyContext;

MetaEdGrammar.prototype.property = function() {

    var localctx = new PropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, MetaEdGrammar.RULE_property);
    try {
        this.state = 884;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MetaEdGrammar.ASSOCIATION_KEYWORD:
            this.enterOuterAlt(localctx, 1);
            this.state = 861;
            this.associationProperty();
            break;
        case MetaEdGrammar.BOOLEAN:
            this.enterOuterAlt(localctx, 2);
            this.state = 862;
            this.booleanProperty();
            break;
        case MetaEdGrammar.CHOICE_KEYWORD:
            this.enterOuterAlt(localctx, 3);
            this.state = 863;
            this.choiceProperty();
            break;
        case MetaEdGrammar.COMMON_KEYWORD:
        case MetaEdGrammar.COMMON_EXTENSION:
            this.enterOuterAlt(localctx, 4);
            this.state = 864;
            this.commonProperty();
            break;
        case MetaEdGrammar.CURRENCY:
            this.enterOuterAlt(localctx, 5);
            this.state = 865;
            this.currencyProperty();
            break;
        case MetaEdGrammar.DATE:
            this.enterOuterAlt(localctx, 6);
            this.state = 866;
            this.dateProperty();
            break;
        case MetaEdGrammar.DATETIME:
            this.enterOuterAlt(localctx, 7);
            this.state = 867;
            this.datetimeProperty();
            break;
        case MetaEdGrammar.DECIMAL:
            this.enterOuterAlt(localctx, 8);
            this.state = 868;
            this.decimalProperty();
            break;
        case MetaEdGrammar.DESCRIPTOR_KEYWORD:
            this.enterOuterAlt(localctx, 9);
            this.state = 869;
            this.descriptorProperty();
            break;
        case MetaEdGrammar.DOMAIN_ENTITY_KEYWORD:
            this.enterOuterAlt(localctx, 10);
            this.state = 870;
            this.domainEntityProperty();
            break;
        case MetaEdGrammar.DURATION:
            this.enterOuterAlt(localctx, 11);
            this.state = 871;
            this.durationProperty();
            break;
        case MetaEdGrammar.ENUMERATION_KEYWORD:
            this.enterOuterAlt(localctx, 12);
            this.state = 872;
            this.enumerationProperty();
            break;
        case MetaEdGrammar.INLINE_COMMON_KEYWORD:
            this.enterOuterAlt(localctx, 13);
            this.state = 873;
            this.inlineCommonProperty();
            break;
        case MetaEdGrammar.INTEGER:
            this.enterOuterAlt(localctx, 14);
            this.state = 874;
            this.integerProperty();
            break;
        case MetaEdGrammar.PERCENT:
            this.enterOuterAlt(localctx, 15);
            this.state = 875;
            this.percentProperty();
            break;
        case MetaEdGrammar.SHARED_DECIMAL_KEYWORD:
            this.enterOuterAlt(localctx, 16);
            this.state = 876;
            this.sharedDecimalProperty();
            break;
        case MetaEdGrammar.SHARED_INTEGER_KEYWORD:
            this.enterOuterAlt(localctx, 17);
            this.state = 877;
            this.sharedIntegerProperty();
            break;
        case MetaEdGrammar.SHARED_SHORT_KEYWORD:
            this.enterOuterAlt(localctx, 18);
            this.state = 878;
            this.sharedShortProperty();
            break;
        case MetaEdGrammar.SHARED_STRING_KEYWORD:
            this.enterOuterAlt(localctx, 19);
            this.state = 879;
            this.sharedStringProperty();
            break;
        case MetaEdGrammar.SHORT:
            this.enterOuterAlt(localctx, 20);
            this.state = 880;
            this.shortProperty();
            break;
        case MetaEdGrammar.STRING:
            this.enterOuterAlt(localctx, 21);
            this.state = 881;
            this.stringProperty();
            break;
        case MetaEdGrammar.TIME:
            this.enterOuterAlt(localctx, 22);
            this.state = 882;
            this.timeProperty();
            break;
        case MetaEdGrammar.YEAR:
            this.enterOuterAlt(localctx, 23);
            this.state = 883;
            this.yearProperty();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BooleanPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_booleanProperty;
    return this;
}

BooleanPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BooleanPropertyContext.prototype.constructor = BooleanPropertyContext;

BooleanPropertyContext.prototype.BOOLEAN = function() {
    return this.getToken(MetaEdGrammar.BOOLEAN, 0);
};

BooleanPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

BooleanPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

BooleanPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

BooleanPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterBooleanProperty(this);
	}
};

BooleanPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitBooleanProperty(this);
	}
};




MetaEdGrammar.BooleanPropertyContext = BooleanPropertyContext;

MetaEdGrammar.prototype.booleanProperty = function() {

    var localctx = new BooleanPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, MetaEdGrammar.RULE_booleanProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 886;
        this.match(MetaEdGrammar.BOOLEAN);
        this.state = 887;
        this.simplePropertyName();
        this.state = 889;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 888;
            this.metaEdId();
        }

        this.state = 891;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CurrencyPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_currencyProperty;
    return this;
}

CurrencyPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CurrencyPropertyContext.prototype.constructor = CurrencyPropertyContext;

CurrencyPropertyContext.prototype.CURRENCY = function() {
    return this.getToken(MetaEdGrammar.CURRENCY, 0);
};

CurrencyPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

CurrencyPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

CurrencyPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

CurrencyPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCurrencyProperty(this);
	}
};

CurrencyPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCurrencyProperty(this);
	}
};




MetaEdGrammar.CurrencyPropertyContext = CurrencyPropertyContext;

MetaEdGrammar.prototype.currencyProperty = function() {

    var localctx = new CurrencyPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, MetaEdGrammar.RULE_currencyProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 893;
        this.match(MetaEdGrammar.CURRENCY);
        this.state = 894;
        this.simplePropertyName();
        this.state = 896;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 895;
            this.metaEdId();
        }

        this.state = 898;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_dateProperty;
    return this;
}

DatePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatePropertyContext.prototype.constructor = DatePropertyContext;

DatePropertyContext.prototype.DATE = function() {
    return this.getToken(MetaEdGrammar.DATE, 0);
};

DatePropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

DatePropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

DatePropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DatePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDateProperty(this);
	}
};

DatePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDateProperty(this);
	}
};




MetaEdGrammar.DatePropertyContext = DatePropertyContext;

MetaEdGrammar.prototype.dateProperty = function() {

    var localctx = new DatePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, MetaEdGrammar.RULE_dateProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 900;
        this.match(MetaEdGrammar.DATE);
        this.state = 901;
        this.simplePropertyName();
        this.state = 903;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 902;
            this.metaEdId();
        }

        this.state = 905;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DatetimePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_datetimeProperty;
    return this;
}

DatetimePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatetimePropertyContext.prototype.constructor = DatetimePropertyContext;

DatetimePropertyContext.prototype.DATETIME = function() {
    return this.getToken(MetaEdGrammar.DATETIME, 0);
};

DatetimePropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

DatetimePropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

DatetimePropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DatetimePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDatetimeProperty(this);
	}
};

DatetimePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDatetimeProperty(this);
	}
};




MetaEdGrammar.DatetimePropertyContext = DatetimePropertyContext;

MetaEdGrammar.prototype.datetimeProperty = function() {

    var localctx = new DatetimePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, MetaEdGrammar.RULE_datetimeProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 907;
        this.match(MetaEdGrammar.DATETIME);
        this.state = 908;
        this.simplePropertyName();
        this.state = 910;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 909;
            this.metaEdId();
        }

        this.state = 912;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DecimalPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_decimalProperty;
    return this;
}

DecimalPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DecimalPropertyContext.prototype.constructor = DecimalPropertyContext;

DecimalPropertyContext.prototype.DECIMAL = function() {
    return this.getToken(MetaEdGrammar.DECIMAL, 0);
};

DecimalPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

DecimalPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

DecimalPropertyContext.prototype.totalDigits = function() {
    return this.getTypedRuleContext(TotalDigitsContext,0);
};

DecimalPropertyContext.prototype.decimalPlaces = function() {
    return this.getTypedRuleContext(DecimalPlacesContext,0);
};

DecimalPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DecimalPropertyContext.prototype.minValueDecimal = function() {
    return this.getTypedRuleContext(MinValueDecimalContext,0);
};

DecimalPropertyContext.prototype.maxValueDecimal = function() {
    return this.getTypedRuleContext(MaxValueDecimalContext,0);
};

DecimalPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDecimalProperty(this);
	}
};

DecimalPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDecimalProperty(this);
	}
};




MetaEdGrammar.DecimalPropertyContext = DecimalPropertyContext;

MetaEdGrammar.prototype.decimalProperty = function() {

    var localctx = new DecimalPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, MetaEdGrammar.RULE_decimalProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 914;
        this.match(MetaEdGrammar.DECIMAL);
        this.state = 915;
        this.simplePropertyName();
        this.state = 917;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 916;
            this.metaEdId();
        }

        this.state = 919;
        this.propertyComponents();
        this.state = 920;
        this.totalDigits();
        this.state = 921;
        this.decimalPlaces();
        this.state = 923;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_VALUE) {
            this.state = 922;
            this.minValueDecimal();
        }

        this.state = 926;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MAX_VALUE) {
            this.state = 925;
            this.maxValueDecimal();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescriptorPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_descriptorProperty;
    return this;
}

DescriptorPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescriptorPropertyContext.prototype.constructor = DescriptorPropertyContext;

DescriptorPropertyContext.prototype.DESCRIPTOR_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.DESCRIPTOR_KEYWORD, 0);
};

DescriptorPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

DescriptorPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

DescriptorPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DescriptorPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDescriptorProperty(this);
	}
};

DescriptorPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDescriptorProperty(this);
	}
};




MetaEdGrammar.DescriptorPropertyContext = DescriptorPropertyContext;

MetaEdGrammar.prototype.descriptorProperty = function() {

    var localctx = new DescriptorPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, MetaEdGrammar.RULE_descriptorProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 928;
        this.match(MetaEdGrammar.DESCRIPTOR_KEYWORD);
        this.state = 929;
        this.propertyName();
        this.state = 931;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 930;
            this.metaEdId();
        }

        this.state = 933;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DurationPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_durationProperty;
    return this;
}

DurationPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DurationPropertyContext.prototype.constructor = DurationPropertyContext;

DurationPropertyContext.prototype.DURATION = function() {
    return this.getToken(MetaEdGrammar.DURATION, 0);
};

DurationPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

DurationPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

DurationPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DurationPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDurationProperty(this);
	}
};

DurationPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDurationProperty(this);
	}
};




MetaEdGrammar.DurationPropertyContext = DurationPropertyContext;

MetaEdGrammar.prototype.durationProperty = function() {

    var localctx = new DurationPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, MetaEdGrammar.RULE_durationProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 935;
        this.match(MetaEdGrammar.DURATION);
        this.state = 936;
        this.simplePropertyName();
        this.state = 938;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 937;
            this.metaEdId();
        }

        this.state = 940;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumerationPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_enumerationProperty;
    return this;
}

EnumerationPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationPropertyContext.prototype.constructor = EnumerationPropertyContext;

EnumerationPropertyContext.prototype.ENUMERATION_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.ENUMERATION_KEYWORD, 0);
};

EnumerationPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

EnumerationPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

EnumerationPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

EnumerationPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterEnumerationProperty(this);
	}
};

EnumerationPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitEnumerationProperty(this);
	}
};




MetaEdGrammar.EnumerationPropertyContext = EnumerationPropertyContext;

MetaEdGrammar.prototype.enumerationProperty = function() {

    var localctx = new EnumerationPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, MetaEdGrammar.RULE_enumerationProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 942;
        this.match(MetaEdGrammar.ENUMERATION_KEYWORD);
        this.state = 943;
        this.propertyName();
        this.state = 945;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 944;
            this.metaEdId();
        }

        this.state = 947;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommonPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_commonProperty;
    return this;
}

CommonPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonPropertyContext.prototype.constructor = CommonPropertyContext;

CommonPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

CommonPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

CommonPropertyContext.prototype.COMMON_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.COMMON_KEYWORD, 0);
};

CommonPropertyContext.prototype.commonExtensionOverride = function() {
    return this.getTypedRuleContext(CommonExtensionOverrideContext,0);
};

CommonPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

CommonPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

CommonPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCommonProperty(this);
	}
};

CommonPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCommonProperty(this);
	}
};




MetaEdGrammar.CommonPropertyContext = CommonPropertyContext;

MetaEdGrammar.prototype.commonProperty = function() {

    var localctx = new CommonPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, MetaEdGrammar.RULE_commonProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 951;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case MetaEdGrammar.COMMON_KEYWORD:
            this.state = 949;
            this.match(MetaEdGrammar.COMMON_KEYWORD);
            break;
        case MetaEdGrammar.COMMON_EXTENSION:
            this.state = 950;
            this.commonExtensionOverride();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 953;
        this.propertyName();
        this.state = 955;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 954;
            this.metaEdId();
        }

        this.state = 957;
        this.propertyComponents();
        this.state = 961;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 958;
            this.mergeDirective();
            this.state = 963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineCommonPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_inlineCommonProperty;
    return this;
}

InlineCommonPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineCommonPropertyContext.prototype.constructor = InlineCommonPropertyContext;

InlineCommonPropertyContext.prototype.INLINE_COMMON_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.INLINE_COMMON_KEYWORD, 0);
};

InlineCommonPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

InlineCommonPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

InlineCommonPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

InlineCommonPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

InlineCommonPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInlineCommonProperty(this);
	}
};

InlineCommonPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInlineCommonProperty(this);
	}
};




MetaEdGrammar.InlineCommonPropertyContext = InlineCommonPropertyContext;

MetaEdGrammar.prototype.inlineCommonProperty = function() {

    var localctx = new InlineCommonPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, MetaEdGrammar.RULE_inlineCommonProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 964;
        this.match(MetaEdGrammar.INLINE_COMMON_KEYWORD);
        this.state = 965;
        this.propertyName();
        this.state = 967;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 966;
            this.metaEdId();
        }

        this.state = 969;
        this.propertyComponents();
        this.state = 973;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 970;
            this.mergeDirective();
            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChoicePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_choiceProperty;
    return this;
}

ChoicePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoicePropertyContext.prototype.constructor = ChoicePropertyContext;

ChoicePropertyContext.prototype.CHOICE_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.CHOICE_KEYWORD, 0);
};

ChoicePropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

ChoicePropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

ChoicePropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

ChoicePropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

ChoicePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterChoiceProperty(this);
	}
};

ChoicePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitChoiceProperty(this);
	}
};




MetaEdGrammar.ChoicePropertyContext = ChoicePropertyContext;

MetaEdGrammar.prototype.choiceProperty = function() {

    var localctx = new ChoicePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, MetaEdGrammar.RULE_choiceProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 976;
        this.match(MetaEdGrammar.CHOICE_KEYWORD);
        this.state = 977;
        this.propertyName();
        this.state = 979;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 978;
            this.metaEdId();
        }

        this.state = 981;
        this.propertyComponents();
        this.state = 985;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 982;
            this.mergeDirective();
            this.state = 987;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IntegerPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_integerProperty;
    return this;
}

IntegerPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntegerPropertyContext.prototype.constructor = IntegerPropertyContext;

IntegerPropertyContext.prototype.INTEGER = function() {
    return this.getToken(MetaEdGrammar.INTEGER, 0);
};

IntegerPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

IntegerPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

IntegerPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

IntegerPropertyContext.prototype.minValue = function() {
    return this.getTypedRuleContext(MinValueContext,0);
};

IntegerPropertyContext.prototype.maxValue = function() {
    return this.getTypedRuleContext(MaxValueContext,0);
};

IntegerPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterIntegerProperty(this);
	}
};

IntegerPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitIntegerProperty(this);
	}
};




MetaEdGrammar.IntegerPropertyContext = IntegerPropertyContext;

MetaEdGrammar.prototype.integerProperty = function() {

    var localctx = new IntegerPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, MetaEdGrammar.RULE_integerProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 988;
        this.match(MetaEdGrammar.INTEGER);
        this.state = 989;
        this.simplePropertyName();
        this.state = 991;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 990;
            this.metaEdId();
        }

        this.state = 993;
        this.propertyComponents();
        this.state = 995;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_VALUE) {
            this.state = 994;
            this.minValue();
        }

        this.state = 998;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MAX_VALUE) {
            this.state = 997;
            this.maxValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PercentPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_percentProperty;
    return this;
}

PercentPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PercentPropertyContext.prototype.constructor = PercentPropertyContext;

PercentPropertyContext.prototype.PERCENT = function() {
    return this.getToken(MetaEdGrammar.PERCENT, 0);
};

PercentPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

PercentPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

PercentPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

PercentPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPercentProperty(this);
	}
};

PercentPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPercentProperty(this);
	}
};




MetaEdGrammar.PercentPropertyContext = PercentPropertyContext;

MetaEdGrammar.prototype.percentProperty = function() {

    var localctx = new PercentPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, MetaEdGrammar.RULE_percentProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1000;
        this.match(MetaEdGrammar.PERCENT);
        this.state = 1001;
        this.simplePropertyName();
        this.state = 1003;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1002;
            this.metaEdId();
        }

        this.state = 1005;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociationPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_associationProperty;
    return this;
}

AssociationPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociationPropertyContext.prototype.constructor = AssociationPropertyContext;

AssociationPropertyContext.prototype.ASSOCIATION_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.ASSOCIATION_KEYWORD, 0);
};

AssociationPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

AssociationPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

AssociationPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

AssociationPropertyContext.prototype.possiblyExternal = function() {
    return this.getTypedRuleContext(PossiblyExternalContext,0);
};

AssociationPropertyContext.prototype.isWeakReference = function() {
    return this.getTypedRuleContext(IsWeakReferenceContext,0);
};

AssociationPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

AssociationPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterAssociationProperty(this);
	}
};

AssociationPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitAssociationProperty(this);
	}
};




MetaEdGrammar.AssociationPropertyContext = AssociationPropertyContext;

MetaEdGrammar.prototype.associationProperty = function() {

    var localctx = new AssociationPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, MetaEdGrammar.RULE_associationProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1007;
        this.match(MetaEdGrammar.ASSOCIATION_KEYWORD);
        this.state = 1008;
        this.propertyName();
        this.state = 1010;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1009;
            this.metaEdId();
        }

        this.state = 1012;
        this.propertyComponents();
        this.state = 1014;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.POSSIBLY_EXTERNAL) {
            this.state = 1013;
            this.possiblyExternal();
        }

        this.state = 1017;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.IS_WEAK_REFERENCE) {
            this.state = 1016;
            this.isWeakReference();
        }

        this.state = 1022;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 1019;
            this.mergeDirective();
            this.state = 1024;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DomainEntityPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_domainEntityProperty;
    return this;
}

DomainEntityPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DomainEntityPropertyContext.prototype.constructor = DomainEntityPropertyContext;

DomainEntityPropertyContext.prototype.DOMAIN_ENTITY_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.DOMAIN_ENTITY_KEYWORD, 0);
};

DomainEntityPropertyContext.prototype.propertyName = function() {
    return this.getTypedRuleContext(PropertyNameContext,0);
};

DomainEntityPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

DomainEntityPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

DomainEntityPropertyContext.prototype.possiblyExternal = function() {
    return this.getTypedRuleContext(PossiblyExternalContext,0);
};

DomainEntityPropertyContext.prototype.isWeakReference = function() {
    return this.getTypedRuleContext(IsWeakReferenceContext,0);
};

DomainEntityPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

DomainEntityPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDomainEntityProperty(this);
	}
};

DomainEntityPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDomainEntityProperty(this);
	}
};




MetaEdGrammar.DomainEntityPropertyContext = DomainEntityPropertyContext;

MetaEdGrammar.prototype.domainEntityProperty = function() {

    var localctx = new DomainEntityPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, MetaEdGrammar.RULE_domainEntityProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1025;
        this.match(MetaEdGrammar.DOMAIN_ENTITY_KEYWORD);
        this.state = 1026;
        this.propertyName();
        this.state = 1028;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1027;
            this.metaEdId();
        }

        this.state = 1030;
        this.propertyComponents();
        this.state = 1032;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.POSSIBLY_EXTERNAL) {
            this.state = 1031;
            this.possiblyExternal();
        }

        this.state = 1035;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.IS_WEAK_REFERENCE) {
            this.state = 1034;
            this.isWeakReference();
        }

        this.state = 1040;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 1037;
            this.mergeDirective();
            this.state = 1042;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedDecimalPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedDecimalProperty;
    return this;
}

SharedDecimalPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedDecimalPropertyContext.prototype.constructor = SharedDecimalPropertyContext;

SharedDecimalPropertyContext.prototype.SHARED_DECIMAL_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.SHARED_DECIMAL_KEYWORD, 0);
};

SharedDecimalPropertyContext.prototype.sharedPropertyType = function() {
    return this.getTypedRuleContext(SharedPropertyTypeContext,0);
};

SharedDecimalPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

SharedDecimalPropertyContext.prototype.SHARED_NAMED = function() {
    return this.getToken(MetaEdGrammar.SHARED_NAMED, 0);
};

SharedDecimalPropertyContext.prototype.sharedPropertyName = function() {
    return this.getTypedRuleContext(SharedPropertyNameContext,0);
};

SharedDecimalPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedDecimalPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

SharedDecimalPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedDecimalProperty(this);
	}
};

SharedDecimalPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedDecimalProperty(this);
	}
};




MetaEdGrammar.SharedDecimalPropertyContext = SharedDecimalPropertyContext;

MetaEdGrammar.prototype.sharedDecimalProperty = function() {

    var localctx = new SharedDecimalPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, MetaEdGrammar.RULE_sharedDecimalProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1043;
        this.match(MetaEdGrammar.SHARED_DECIMAL_KEYWORD);
        this.state = 1044;
        this.sharedPropertyType();
        this.state = 1047;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.SHARED_NAMED) {
            this.state = 1045;
            this.match(MetaEdGrammar.SHARED_NAMED);
            this.state = 1046;
            this.sharedPropertyName();
        }

        this.state = 1050;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1049;
            this.metaEdId();
        }

        this.state = 1052;
        this.propertyComponents();
        this.state = 1056;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 1053;
            this.mergeDirective();
            this.state = 1058;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedIntegerPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedIntegerProperty;
    return this;
}

SharedIntegerPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedIntegerPropertyContext.prototype.constructor = SharedIntegerPropertyContext;

SharedIntegerPropertyContext.prototype.SHARED_INTEGER_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.SHARED_INTEGER_KEYWORD, 0);
};

SharedIntegerPropertyContext.prototype.sharedPropertyType = function() {
    return this.getTypedRuleContext(SharedPropertyTypeContext,0);
};

SharedIntegerPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

SharedIntegerPropertyContext.prototype.SHARED_NAMED = function() {
    return this.getToken(MetaEdGrammar.SHARED_NAMED, 0);
};

SharedIntegerPropertyContext.prototype.sharedPropertyName = function() {
    return this.getTypedRuleContext(SharedPropertyNameContext,0);
};

SharedIntegerPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedIntegerPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

SharedIntegerPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedIntegerProperty(this);
	}
};

SharedIntegerPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedIntegerProperty(this);
	}
};




MetaEdGrammar.SharedIntegerPropertyContext = SharedIntegerPropertyContext;

MetaEdGrammar.prototype.sharedIntegerProperty = function() {

    var localctx = new SharedIntegerPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, MetaEdGrammar.RULE_sharedIntegerProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1059;
        this.match(MetaEdGrammar.SHARED_INTEGER_KEYWORD);
        this.state = 1060;
        this.sharedPropertyType();
        this.state = 1063;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.SHARED_NAMED) {
            this.state = 1061;
            this.match(MetaEdGrammar.SHARED_NAMED);
            this.state = 1062;
            this.sharedPropertyName();
        }

        this.state = 1066;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1065;
            this.metaEdId();
        }

        this.state = 1068;
        this.propertyComponents();
        this.state = 1072;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 1069;
            this.mergeDirective();
            this.state = 1074;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedShortPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedShortProperty;
    return this;
}

SharedShortPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedShortPropertyContext.prototype.constructor = SharedShortPropertyContext;

SharedShortPropertyContext.prototype.SHARED_SHORT_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.SHARED_SHORT_KEYWORD, 0);
};

SharedShortPropertyContext.prototype.sharedPropertyType = function() {
    return this.getTypedRuleContext(SharedPropertyTypeContext,0);
};

SharedShortPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

SharedShortPropertyContext.prototype.SHARED_NAMED = function() {
    return this.getToken(MetaEdGrammar.SHARED_NAMED, 0);
};

SharedShortPropertyContext.prototype.sharedPropertyName = function() {
    return this.getTypedRuleContext(SharedPropertyNameContext,0);
};

SharedShortPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedShortPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

SharedShortPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedShortProperty(this);
	}
};

SharedShortPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedShortProperty(this);
	}
};




MetaEdGrammar.SharedShortPropertyContext = SharedShortPropertyContext;

MetaEdGrammar.prototype.sharedShortProperty = function() {

    var localctx = new SharedShortPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, MetaEdGrammar.RULE_sharedShortProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1075;
        this.match(MetaEdGrammar.SHARED_SHORT_KEYWORD);
        this.state = 1076;
        this.sharedPropertyType();
        this.state = 1079;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.SHARED_NAMED) {
            this.state = 1077;
            this.match(MetaEdGrammar.SHARED_NAMED);
            this.state = 1078;
            this.sharedPropertyName();
        }

        this.state = 1082;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1081;
            this.metaEdId();
        }

        this.state = 1084;
        this.propertyComponents();
        this.state = 1088;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 1085;
            this.mergeDirective();
            this.state = 1090;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedStringPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedStringProperty;
    return this;
}

SharedStringPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedStringPropertyContext.prototype.constructor = SharedStringPropertyContext;

SharedStringPropertyContext.prototype.SHARED_STRING_KEYWORD = function() {
    return this.getToken(MetaEdGrammar.SHARED_STRING_KEYWORD, 0);
};

SharedStringPropertyContext.prototype.sharedPropertyType = function() {
    return this.getTypedRuleContext(SharedPropertyTypeContext,0);
};

SharedStringPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

SharedStringPropertyContext.prototype.SHARED_NAMED = function() {
    return this.getToken(MetaEdGrammar.SHARED_NAMED, 0);
};

SharedStringPropertyContext.prototype.sharedPropertyName = function() {
    return this.getTypedRuleContext(SharedPropertyNameContext,0);
};

SharedStringPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

SharedStringPropertyContext.prototype.mergeDirective = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(MergeDirectiveContext);
    } else {
        return this.getTypedRuleContext(MergeDirectiveContext,i);
    }
};

SharedStringPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedStringProperty(this);
	}
};

SharedStringPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedStringProperty(this);
	}
};




MetaEdGrammar.SharedStringPropertyContext = SharedStringPropertyContext;

MetaEdGrammar.prototype.sharedStringProperty = function() {

    var localctx = new SharedStringPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, MetaEdGrammar.RULE_sharedStringProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1091;
        this.match(MetaEdGrammar.SHARED_STRING_KEYWORD);
        this.state = 1092;
        this.sharedPropertyType();
        this.state = 1095;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.SHARED_NAMED) {
            this.state = 1093;
            this.match(MetaEdGrammar.SHARED_NAMED);
            this.state = 1094;
            this.sharedPropertyName();
        }

        this.state = 1098;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1097;
            this.metaEdId();
        }

        this.state = 1100;
        this.propertyComponents();
        this.state = 1104;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.MERGE_REFERENCE) {
            this.state = 1101;
            this.mergeDirective();
            this.state = 1106;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_shortProperty;
    return this;
}

ShortPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortPropertyContext.prototype.constructor = ShortPropertyContext;

ShortPropertyContext.prototype.SHORT = function() {
    return this.getToken(MetaEdGrammar.SHORT, 0);
};

ShortPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

ShortPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

ShortPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

ShortPropertyContext.prototype.minValue = function() {
    return this.getTypedRuleContext(MinValueContext,0);
};

ShortPropertyContext.prototype.maxValue = function() {
    return this.getTypedRuleContext(MaxValueContext,0);
};

ShortPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterShortProperty(this);
	}
};

ShortPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitShortProperty(this);
	}
};




MetaEdGrammar.ShortPropertyContext = ShortPropertyContext;

MetaEdGrammar.prototype.shortProperty = function() {

    var localctx = new ShortPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, MetaEdGrammar.RULE_shortProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1107;
        this.match(MetaEdGrammar.SHORT);
        this.state = 1108;
        this.simplePropertyName();
        this.state = 1110;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1109;
            this.metaEdId();
        }

        this.state = 1112;
        this.propertyComponents();
        this.state = 1114;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_VALUE) {
            this.state = 1113;
            this.minValue();
        }

        this.state = 1117;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MAX_VALUE) {
            this.state = 1116;
            this.maxValue();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function StringPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_stringProperty;
    return this;
}

StringPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
StringPropertyContext.prototype.constructor = StringPropertyContext;

StringPropertyContext.prototype.STRING = function() {
    return this.getToken(MetaEdGrammar.STRING, 0);
};

StringPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

StringPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

StringPropertyContext.prototype.maxLength = function() {
    return this.getTypedRuleContext(MaxLengthContext,0);
};

StringPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

StringPropertyContext.prototype.minLength = function() {
    return this.getTypedRuleContext(MinLengthContext,0);
};

StringPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterStringProperty(this);
	}
};

StringPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitStringProperty(this);
	}
};




MetaEdGrammar.StringPropertyContext = StringPropertyContext;

MetaEdGrammar.prototype.stringProperty = function() {

    var localctx = new StringPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, MetaEdGrammar.RULE_stringProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1119;
        this.match(MetaEdGrammar.STRING);
        this.state = 1120;
        this.simplePropertyName();
        this.state = 1122;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1121;
            this.metaEdId();
        }

        this.state = 1124;
        this.propertyComponents();
        this.state = 1126;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.MIN_LENGTH) {
            this.state = 1125;
            this.minLength();
        }

        this.state = 1128;
        this.maxLength();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TimePropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_timeProperty;
    return this;
}

TimePropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TimePropertyContext.prototype.constructor = TimePropertyContext;

TimePropertyContext.prototype.TIME = function() {
    return this.getToken(MetaEdGrammar.TIME, 0);
};

TimePropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

TimePropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

TimePropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

TimePropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterTimeProperty(this);
	}
};

TimePropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitTimeProperty(this);
	}
};




MetaEdGrammar.TimePropertyContext = TimePropertyContext;

MetaEdGrammar.prototype.timeProperty = function() {

    var localctx = new TimePropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, MetaEdGrammar.RULE_timeProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1130;
        this.match(MetaEdGrammar.TIME);
        this.state = 1131;
        this.simplePropertyName();
        this.state = 1133;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1132;
            this.metaEdId();
        }

        this.state = 1135;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function YearPropertyContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_yearProperty;
    return this;
}

YearPropertyContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
YearPropertyContext.prototype.constructor = YearPropertyContext;

YearPropertyContext.prototype.YEAR = function() {
    return this.getToken(MetaEdGrammar.YEAR, 0);
};

YearPropertyContext.prototype.simplePropertyName = function() {
    return this.getTypedRuleContext(SimplePropertyNameContext,0);
};

YearPropertyContext.prototype.propertyComponents = function() {
    return this.getTypedRuleContext(PropertyComponentsContext,0);
};

YearPropertyContext.prototype.metaEdId = function() {
    return this.getTypedRuleContext(MetaEdIdContext,0);
};

YearPropertyContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterYearProperty(this);
	}
};

YearPropertyContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitYearProperty(this);
	}
};




MetaEdGrammar.YearPropertyContext = YearPropertyContext;

MetaEdGrammar.prototype.yearProperty = function() {

    var localctx = new YearPropertyContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, MetaEdGrammar.RULE_yearProperty);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1137;
        this.match(MetaEdGrammar.YEAR);
        this.state = 1138;
        this.simplePropertyName();
        this.state = 1140;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.METAED_ID) {
            this.state = 1139;
            this.metaEdId();
        }

        this.state = 1142;
        this.propertyComponents();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function IsWeakReferenceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_isWeakReference;
    return this;
}

IsWeakReferenceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IsWeakReferenceContext.prototype.constructor = IsWeakReferenceContext;

IsWeakReferenceContext.prototype.IS_WEAK_REFERENCE = function() {
    return this.getToken(MetaEdGrammar.IS_WEAK_REFERENCE, 0);
};

IsWeakReferenceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterIsWeakReference(this);
	}
};

IsWeakReferenceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitIsWeakReference(this);
	}
};




MetaEdGrammar.IsWeakReferenceContext = IsWeakReferenceContext;

MetaEdGrammar.prototype.isWeakReference = function() {

    var localctx = new IsWeakReferenceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 190, MetaEdGrammar.RULE_isWeakReference);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1144;
        this.match(MetaEdGrammar.IS_WEAK_REFERENCE);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PossiblyExternalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_possiblyExternal;
    return this;
}

PossiblyExternalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PossiblyExternalContext.prototype.constructor = PossiblyExternalContext;

PossiblyExternalContext.prototype.POSSIBLY_EXTERNAL = function() {
    return this.getToken(MetaEdGrammar.POSSIBLY_EXTERNAL, 0);
};

PossiblyExternalContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPossiblyExternal(this);
	}
};

PossiblyExternalContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPossiblyExternal(this);
	}
};




MetaEdGrammar.PossiblyExternalContext = PossiblyExternalContext;

MetaEdGrammar.prototype.possiblyExternal = function() {

    var localctx = new PossiblyExternalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, MetaEdGrammar.RULE_possiblyExternal);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1146;
        this.match(MetaEdGrammar.POSSIBLY_EXTERNAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MergeDirectiveContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_mergeDirective;
    return this;
}

MergeDirectiveContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MergeDirectiveContext.prototype.constructor = MergeDirectiveContext;

MergeDirectiveContext.prototype.MERGE_REFERENCE = function() {
    return this.getToken(MetaEdGrammar.MERGE_REFERENCE, 0);
};

MergeDirectiveContext.prototype.sourcePropertyPath = function() {
    return this.getTypedRuleContext(SourcePropertyPathContext,0);
};

MergeDirectiveContext.prototype.WITH = function() {
    return this.getToken(MetaEdGrammar.WITH, 0);
};

MergeDirectiveContext.prototype.targetPropertyPath = function() {
    return this.getTypedRuleContext(TargetPropertyPathContext,0);
};

MergeDirectiveContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMergeDirective(this);
	}
};

MergeDirectiveContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMergeDirective(this);
	}
};




MetaEdGrammar.MergeDirectiveContext = MergeDirectiveContext;

MetaEdGrammar.prototype.mergeDirective = function() {

    var localctx = new MergeDirectiveContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, MetaEdGrammar.RULE_mergeDirective);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1148;
        this.match(MetaEdGrammar.MERGE_REFERENCE);
        this.state = 1149;
        this.sourcePropertyPath();
        this.state = 1150;
        this.match(MetaEdGrammar.WITH);
        this.state = 1151;
        this.targetPropertyPath();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SourcePropertyPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sourcePropertyPath;
    return this;
}

SourcePropertyPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourcePropertyPathContext.prototype.constructor = SourcePropertyPathContext;

SourcePropertyPathContext.prototype.propertyPath = function() {
    return this.getTypedRuleContext(PropertyPathContext,0);
};

SourcePropertyPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSourcePropertyPath(this);
	}
};

SourcePropertyPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSourcePropertyPath(this);
	}
};




MetaEdGrammar.SourcePropertyPathContext = SourcePropertyPathContext;

MetaEdGrammar.prototype.sourcePropertyPath = function() {

    var localctx = new SourcePropertyPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, MetaEdGrammar.RULE_sourcePropertyPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1153;
        this.propertyPath();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function TargetPropertyPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_targetPropertyPath;
    return this;
}

TargetPropertyPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TargetPropertyPathContext.prototype.constructor = TargetPropertyPathContext;

TargetPropertyPathContext.prototype.propertyPath = function() {
    return this.getTypedRuleContext(PropertyPathContext,0);
};

TargetPropertyPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterTargetPropertyPath(this);
	}
};

TargetPropertyPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitTargetPropertyPath(this);
	}
};




MetaEdGrammar.TargetPropertyPathContext = TargetPropertyPathContext;

MetaEdGrammar.prototype.targetPropertyPath = function() {

    var localctx = new TargetPropertyPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, MetaEdGrammar.RULE_targetPropertyPath);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1155;
        this.propertyPath();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyPathContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_propertyPath;
    return this;
}

PropertyPathContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyPathContext.prototype.constructor = PropertyPathContext;

PropertyPathContext.prototype.ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MetaEdGrammar.ID);
    } else {
        return this.getToken(MetaEdGrammar.ID, i);
    }
};


PropertyPathContext.prototype.PERIOD = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(MetaEdGrammar.PERIOD);
    } else {
        return this.getToken(MetaEdGrammar.PERIOD, i);
    }
};


PropertyPathContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPropertyPath(this);
	}
};

PropertyPathContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPropertyPath(this);
	}
};




MetaEdGrammar.PropertyPathContext = PropertyPathContext;

MetaEdGrammar.prototype.propertyPath = function() {

    var localctx = new PropertyPathContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, MetaEdGrammar.RULE_propertyPath);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1157;
        this.match(MetaEdGrammar.ID);
        this.state = 1162;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===MetaEdGrammar.PERIOD) {
            this.state = 1158;
            this.match(MetaEdGrammar.PERIOD);
            this.state = 1159;
            this.match(MetaEdGrammar.ID);
            this.state = 1164;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function Signed_intContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_signed_int;
    return this;
}

Signed_intContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
Signed_intContext.prototype.constructor = Signed_intContext;

Signed_intContext.prototype.UNSIGNED_INT = function() {
    return this.getToken(MetaEdGrammar.UNSIGNED_INT, 0);
};

Signed_intContext.prototype.unaryOperator = function() {
    return this.getTypedRuleContext(UnaryOperatorContext,0);
};

Signed_intContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSigned_int(this);
	}
};

Signed_intContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSigned_int(this);
	}
};




MetaEdGrammar.Signed_intContext = Signed_intContext;

MetaEdGrammar.prototype.signed_int = function() {

    var localctx = new Signed_intContext(this, this._ctx, this.state);
    this.enterRule(localctx, 202, MetaEdGrammar.RULE_signed_int);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1166;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===MetaEdGrammar.POS_SIGN || _la===MetaEdGrammar.NEG_SIGN) {
            this.state = 1165;
            this.unaryOperator();
        }

        this.state = 1168;
        this.match(MetaEdGrammar.UNSIGNED_INT);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function UnaryOperatorContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_unaryOperator;
    return this;
}

UnaryOperatorContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UnaryOperatorContext.prototype.constructor = UnaryOperatorContext;

UnaryOperatorContext.prototype.POS_SIGN = function() {
    return this.getToken(MetaEdGrammar.POS_SIGN, 0);
};

UnaryOperatorContext.prototype.NEG_SIGN = function() {
    return this.getToken(MetaEdGrammar.NEG_SIGN, 0);
};

UnaryOperatorContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterUnaryOperator(this);
	}
};

UnaryOperatorContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitUnaryOperator(this);
	}
};




MetaEdGrammar.UnaryOperatorContext = UnaryOperatorContext;

MetaEdGrammar.prototype.unaryOperator = function() {

    var localctx = new UnaryOperatorContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, MetaEdGrammar.RULE_unaryOperator);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1170;
        _la = this._input.LA(1);
        if(!(_la===MetaEdGrammar.POS_SIGN || _la===MetaEdGrammar.NEG_SIGN)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AbstractEntityNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_abstractEntityName;
    return this;
}

AbstractEntityNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AbstractEntityNameContext.prototype.constructor = AbstractEntityNameContext;

AbstractEntityNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

AbstractEntityNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterAbstractEntityName(this);
	}
};

AbstractEntityNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitAbstractEntityName(this);
	}
};




MetaEdGrammar.AbstractEntityNameContext = AbstractEntityNameContext;

MetaEdGrammar.prototype.abstractEntityName = function() {

    var localctx = new AbstractEntityNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, MetaEdGrammar.RULE_abstractEntityName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1172;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function AssociationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_associationName;
    return this;
}

AssociationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssociationNameContext.prototype.constructor = AssociationNameContext;

AssociationNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

AssociationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterAssociationName(this);
	}
};

AssociationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitAssociationName(this);
	}
};




MetaEdGrammar.AssociationNameContext = AssociationNameContext;

MetaEdGrammar.prototype.associationName = function() {

    var localctx = new AssociationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, MetaEdGrammar.RULE_associationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1174;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseKeyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_baseKeyName;
    return this;
}

BaseKeyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseKeyNameContext.prototype.constructor = BaseKeyNameContext;

BaseKeyNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

BaseKeyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterBaseKeyName(this);
	}
};

BaseKeyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitBaseKeyName(this);
	}
};




MetaEdGrammar.BaseKeyNameContext = BaseKeyNameContext;

MetaEdGrammar.prototype.baseKeyName = function() {

    var localctx = new BaseKeyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, MetaEdGrammar.RULE_baseKeyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1176;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_baseName;
    return this;
}

BaseNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseNameContext.prototype.constructor = BaseNameContext;

BaseNameContext.prototype.localBaseName = function() {
    return this.getTypedRuleContext(LocalBaseNameContext,0);
};

BaseNameContext.prototype.baseNamespace = function() {
    return this.getTypedRuleContext(BaseNamespaceContext,0);
};

BaseNameContext.prototype.PERIOD = function() {
    return this.getToken(MetaEdGrammar.PERIOD, 0);
};

BaseNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterBaseName(this);
	}
};

BaseNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitBaseName(this);
	}
};




MetaEdGrammar.BaseNameContext = BaseNameContext;

MetaEdGrammar.prototype.baseName = function() {

    var localctx = new BaseNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, MetaEdGrammar.RULE_baseName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1181;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        if(la_===1) {
            this.state = 1178;
            this.baseNamespace();
            this.state = 1179;
            this.match(MetaEdGrammar.PERIOD);

        }
        this.state = 1183;
        this.localBaseName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function BaseNamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_baseNamespace;
    return this;
}

BaseNamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
BaseNamespaceContext.prototype.constructor = BaseNamespaceContext;

BaseNamespaceContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

BaseNamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterBaseNamespace(this);
	}
};

BaseNamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitBaseNamespace(this);
	}
};




MetaEdGrammar.BaseNamespaceContext = BaseNamespaceContext;

MetaEdGrammar.prototype.baseNamespace = function() {

    var localctx = new BaseNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, MetaEdGrammar.RULE_baseNamespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1185;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ChoiceNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_choiceName;
    return this;
}

ChoiceNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ChoiceNameContext.prototype.constructor = ChoiceNameContext;

ChoiceNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

ChoiceNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterChoiceName(this);
	}
};

ChoiceNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitChoiceName(this);
	}
};




MetaEdGrammar.ChoiceNameContext = ChoiceNameContext;

MetaEdGrammar.prototype.choiceName = function() {

    var localctx = new ChoiceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, MetaEdGrammar.RULE_choiceName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1187;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedDecimalNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedDecimalName;
    return this;
}

SharedDecimalNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedDecimalNameContext.prototype.constructor = SharedDecimalNameContext;

SharedDecimalNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

SharedDecimalNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedDecimalName(this);
	}
};

SharedDecimalNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedDecimalName(this);
	}
};




MetaEdGrammar.SharedDecimalNameContext = SharedDecimalNameContext;

MetaEdGrammar.prototype.sharedDecimalName = function() {

    var localctx = new SharedDecimalNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, MetaEdGrammar.RULE_sharedDecimalName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1189;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedIntegerNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedIntegerName;
    return this;
}

SharedIntegerNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedIntegerNameContext.prototype.constructor = SharedIntegerNameContext;

SharedIntegerNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

SharedIntegerNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedIntegerName(this);
	}
};

SharedIntegerNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedIntegerName(this);
	}
};




MetaEdGrammar.SharedIntegerNameContext = SharedIntegerNameContext;

MetaEdGrammar.prototype.sharedIntegerName = function() {

    var localctx = new SharedIntegerNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, MetaEdGrammar.RULE_sharedIntegerName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1191;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function CommonNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_commonName;
    return this;
}

CommonNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CommonNameContext.prototype.constructor = CommonNameContext;

CommonNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

CommonNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterCommonName(this);
	}
};

CommonNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitCommonName(this);
	}
};




MetaEdGrammar.CommonNameContext = CommonNameContext;

MetaEdGrammar.prototype.commonName = function() {

    var localctx = new CommonNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, MetaEdGrammar.RULE_commonName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1193;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedShortNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedShortName;
    return this;
}

SharedShortNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedShortNameContext.prototype.constructor = SharedShortNameContext;

SharedShortNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

SharedShortNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedShortName(this);
	}
};

SharedShortNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedShortName(this);
	}
};




MetaEdGrammar.SharedShortNameContext = SharedShortNameContext;

MetaEdGrammar.prototype.sharedShortName = function() {

    var localctx = new SharedShortNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, MetaEdGrammar.RULE_sharedShortName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1195;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedStringNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedStringName;
    return this;
}

SharedStringNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedStringNameContext.prototype.constructor = SharedStringNameContext;

SharedStringNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

SharedStringNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedStringName(this);
	}
};

SharedStringNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedStringName(this);
	}
};




MetaEdGrammar.SharedStringNameContext = SharedStringNameContext;

MetaEdGrammar.prototype.sharedStringName = function() {

    var localctx = new SharedStringNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, MetaEdGrammar.RULE_sharedStringName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1197;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DescriptorNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_descriptorName;
    return this;
}

DescriptorNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescriptorNameContext.prototype.constructor = DescriptorNameContext;

DescriptorNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

DescriptorNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDescriptorName(this);
	}
};

DescriptorNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDescriptorName(this);
	}
};




MetaEdGrammar.DescriptorNameContext = DescriptorNameContext;

MetaEdGrammar.prototype.descriptorName = function() {

    var localctx = new DescriptorNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, MetaEdGrammar.RULE_descriptorName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1199;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function DomainNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_domainName;
    return this;
}

DomainNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DomainNameContext.prototype.constructor = DomainNameContext;

DomainNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

DomainNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterDomainName(this);
	}
};

DomainNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitDomainName(this);
	}
};




MetaEdGrammar.DomainNameContext = DomainNameContext;

MetaEdGrammar.prototype.domainName = function() {

    var localctx = new DomainNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, MetaEdGrammar.RULE_domainName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1201;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EntityNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_entityName;
    return this;
}

EntityNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EntityNameContext.prototype.constructor = EntityNameContext;

EntityNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

EntityNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterEntityName(this);
	}
};

EntityNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitEntityName(this);
	}
};




MetaEdGrammar.EntityNameContext = EntityNameContext;

MetaEdGrammar.prototype.entityName = function() {

    var localctx = new EntityNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, MetaEdGrammar.RULE_entityName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1203;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function EnumerationNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_enumerationName;
    return this;
}

EnumerationNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumerationNameContext.prototype.constructor = EnumerationNameContext;

EnumerationNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

EnumerationNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterEnumerationName(this);
	}
};

EnumerationNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitEnumerationName(this);
	}
};




MetaEdGrammar.EnumerationNameContext = EnumerationNameContext;

MetaEdGrammar.prototype.enumerationName = function() {

    var localctx = new EnumerationNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 234, MetaEdGrammar.RULE_enumerationName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1205;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendeeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_extendeeName;
    return this;
}

ExtendeeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendeeNameContext.prototype.constructor = ExtendeeNameContext;

ExtendeeNameContext.prototype.localExtendeeName = function() {
    return this.getTypedRuleContext(LocalExtendeeNameContext,0);
};

ExtendeeNameContext.prototype.extendeeNamespace = function() {
    return this.getTypedRuleContext(ExtendeeNamespaceContext,0);
};

ExtendeeNameContext.prototype.PERIOD = function() {
    return this.getToken(MetaEdGrammar.PERIOD, 0);
};

ExtendeeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterExtendeeName(this);
	}
};

ExtendeeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitExtendeeName(this);
	}
};




MetaEdGrammar.ExtendeeNameContext = ExtendeeNameContext;

MetaEdGrammar.prototype.extendeeName = function() {

    var localctx = new ExtendeeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 236, MetaEdGrammar.RULE_extendeeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1210;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        if(la_===1) {
            this.state = 1207;
            this.extendeeNamespace();
            this.state = 1208;
            this.match(MetaEdGrammar.PERIOD);

        }
        this.state = 1212;
        this.localExtendeeName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ExtendeeNamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_extendeeNamespace;
    return this;
}

ExtendeeNamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExtendeeNamespaceContext.prototype.constructor = ExtendeeNamespaceContext;

ExtendeeNamespaceContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

ExtendeeNamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterExtendeeNamespace(this);
	}
};

ExtendeeNamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitExtendeeNamespace(this);
	}
};




MetaEdGrammar.ExtendeeNamespaceContext = ExtendeeNamespaceContext;

MetaEdGrammar.prototype.extendeeNamespace = function() {

    var localctx = new ExtendeeNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 238, MetaEdGrammar.RULE_extendeeNamespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1214;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InlineCommonNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_inlineCommonName;
    return this;
}

InlineCommonNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InlineCommonNameContext.prototype.constructor = InlineCommonNameContext;

InlineCommonNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

InlineCommonNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInlineCommonName(this);
	}
};

InlineCommonNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInlineCommonName(this);
	}
};




MetaEdGrammar.InlineCommonNameContext = InlineCommonNameContext;

MetaEdGrammar.prototype.inlineCommonName = function() {

    var localctx = new InlineCommonNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 240, MetaEdGrammar.RULE_inlineCommonName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1216;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function InterchangeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_interchangeName;
    return this;
}

InterchangeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InterchangeNameContext.prototype.constructor = InterchangeNameContext;

InterchangeNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

InterchangeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterInterchangeName(this);
	}
};

InterchangeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitInterchangeName(this);
	}
};




MetaEdGrammar.InterchangeNameContext = InterchangeNameContext;

MetaEdGrammar.prototype.interchangeName = function() {

    var localctx = new InterchangeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 242, MetaEdGrammar.RULE_interchangeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1218;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalBaseNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_localBaseName;
    return this;
}

LocalBaseNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalBaseNameContext.prototype.constructor = LocalBaseNameContext;

LocalBaseNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

LocalBaseNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterLocalBaseName(this);
	}
};

LocalBaseNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitLocalBaseName(this);
	}
};




MetaEdGrammar.LocalBaseNameContext = LocalBaseNameContext;

MetaEdGrammar.prototype.localBaseName = function() {

    var localctx = new LocalBaseNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 244, MetaEdGrammar.RULE_localBaseName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1220;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalDomainItemNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_localDomainItemName;
    return this;
}

LocalDomainItemNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalDomainItemNameContext.prototype.constructor = LocalDomainItemNameContext;

LocalDomainItemNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

LocalDomainItemNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterLocalDomainItemName(this);
	}
};

LocalDomainItemNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitLocalDomainItemName(this);
	}
};




MetaEdGrammar.LocalDomainItemNameContext = LocalDomainItemNameContext;

MetaEdGrammar.prototype.localDomainItemName = function() {

    var localctx = new LocalDomainItemNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 246, MetaEdGrammar.RULE_localDomainItemName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1222;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalExtendeeNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_localExtendeeName;
    return this;
}

LocalExtendeeNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalExtendeeNameContext.prototype.constructor = LocalExtendeeNameContext;

LocalExtendeeNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

LocalExtendeeNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterLocalExtendeeName(this);
	}
};

LocalExtendeeNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitLocalExtendeeName(this);
	}
};




MetaEdGrammar.LocalExtendeeNameContext = LocalExtendeeNameContext;

MetaEdGrammar.prototype.localExtendeeName = function() {

    var localctx = new LocalExtendeeNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 248, MetaEdGrammar.RULE_localExtendeeName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1224;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalInterchangeItemNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_localInterchangeItemName;
    return this;
}

LocalInterchangeItemNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalInterchangeItemNameContext.prototype.constructor = LocalInterchangeItemNameContext;

LocalInterchangeItemNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

LocalInterchangeItemNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterLocalInterchangeItemName(this);
	}
};

LocalInterchangeItemNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitLocalInterchangeItemName(this);
	}
};




MetaEdGrammar.LocalInterchangeItemNameContext = LocalInterchangeItemNameContext;

MetaEdGrammar.prototype.localInterchangeItemName = function() {

    var localctx = new LocalInterchangeItemNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 250, MetaEdGrammar.RULE_localInterchangeItemName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1226;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_localPropertyName;
    return this;
}

LocalPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalPropertyNameContext.prototype.constructor = LocalPropertyNameContext;

LocalPropertyNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

LocalPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterLocalPropertyName(this);
	}
};

LocalPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitLocalPropertyName(this);
	}
};




MetaEdGrammar.LocalPropertyNameContext = LocalPropertyNameContext;

MetaEdGrammar.prototype.localPropertyName = function() {

    var localctx = new LocalPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 252, MetaEdGrammar.RULE_localPropertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1228;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function LocalPropertyTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_localPropertyType;
    return this;
}

LocalPropertyTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LocalPropertyTypeContext.prototype.constructor = LocalPropertyTypeContext;

LocalPropertyTypeContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

LocalPropertyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterLocalPropertyType(this);
	}
};

LocalPropertyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitLocalPropertyType(this);
	}
};




MetaEdGrammar.LocalPropertyTypeContext = LocalPropertyTypeContext;

MetaEdGrammar.prototype.localPropertyType = function() {

    var localctx = new LocalPropertyTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 254, MetaEdGrammar.RULE_localPropertyType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1230;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ParentDomainNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_parentDomainName;
    return this;
}

ParentDomainNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ParentDomainNameContext.prototype.constructor = ParentDomainNameContext;

ParentDomainNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

ParentDomainNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterParentDomainName(this);
	}
};

ParentDomainNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitParentDomainName(this);
	}
};




MetaEdGrammar.ParentDomainNameContext = ParentDomainNameContext;

MetaEdGrammar.prototype.parentDomainName = function() {

    var localctx = new ParentDomainNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 256, MetaEdGrammar.RULE_parentDomainName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1232;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_propertyName;
    return this;
}

PropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNameContext.prototype.constructor = PropertyNameContext;

PropertyNameContext.prototype.localPropertyName = function() {
    return this.getTypedRuleContext(LocalPropertyNameContext,0);
};

PropertyNameContext.prototype.propertyNamespace = function() {
    return this.getTypedRuleContext(PropertyNamespaceContext,0);
};

PropertyNameContext.prototype.PERIOD = function() {
    return this.getToken(MetaEdGrammar.PERIOD, 0);
};

PropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPropertyName(this);
	}
};

PropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPropertyName(this);
	}
};




MetaEdGrammar.PropertyNameContext = PropertyNameContext;

MetaEdGrammar.prototype.propertyName = function() {

    var localctx = new PropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 258, MetaEdGrammar.RULE_propertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1237;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
        if(la_===1) {
            this.state = 1234;
            this.propertyNamespace();
            this.state = 1235;
            this.match(MetaEdGrammar.PERIOD);

        }
        this.state = 1239;
        this.localPropertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function PropertyNamespaceContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_propertyNamespace;
    return this;
}

PropertyNamespaceContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PropertyNamespaceContext.prototype.constructor = PropertyNamespaceContext;

PropertyNamespaceContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

PropertyNamespaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterPropertyNamespace(this);
	}
};

PropertyNamespaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitPropertyNamespace(this);
	}
};




MetaEdGrammar.PropertyNamespaceContext = PropertyNamespaceContext;

MetaEdGrammar.prototype.propertyNamespace = function() {

    var localctx = new PropertyNamespaceContext(this, this._ctx, this.state);
    this.enterRule(localctx, 260, MetaEdGrammar.RULE_propertyNamespace);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1241;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function RoleNameNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_roleNameName;
    return this;
}

RoleNameNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RoleNameNameContext.prototype.constructor = RoleNameNameContext;

RoleNameNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

RoleNameNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterRoleNameName(this);
	}
};

RoleNameNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitRoleNameName(this);
	}
};




MetaEdGrammar.RoleNameNameContext = RoleNameNameContext;

MetaEdGrammar.prototype.roleNameName = function() {

    var localctx = new RoleNameNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 262, MetaEdGrammar.RULE_roleNameName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1243;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedPropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedPropertyName;
    return this;
}

SharedPropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedPropertyNameContext.prototype.constructor = SharedPropertyNameContext;

SharedPropertyNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

SharedPropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedPropertyName(this);
	}
};

SharedPropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedPropertyName(this);
	}
};




MetaEdGrammar.SharedPropertyNameContext = SharedPropertyNameContext;

MetaEdGrammar.prototype.sharedPropertyName = function() {

    var localctx = new SharedPropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 264, MetaEdGrammar.RULE_sharedPropertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1245;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SharedPropertyTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_sharedPropertyType;
    return this;
}

SharedPropertyTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SharedPropertyTypeContext.prototype.constructor = SharedPropertyTypeContext;

SharedPropertyTypeContext.prototype.localPropertyType = function() {
    return this.getTypedRuleContext(LocalPropertyTypeContext,0);
};

SharedPropertyTypeContext.prototype.propertyNamespace = function() {
    return this.getTypedRuleContext(PropertyNamespaceContext,0);
};

SharedPropertyTypeContext.prototype.PERIOD = function() {
    return this.getToken(MetaEdGrammar.PERIOD, 0);
};

SharedPropertyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSharedPropertyType(this);
	}
};

SharedPropertyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSharedPropertyType(this);
	}
};




MetaEdGrammar.SharedPropertyTypeContext = SharedPropertyTypeContext;

MetaEdGrammar.prototype.sharedPropertyType = function() {

    var localctx = new SharedPropertyTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 266, MetaEdGrammar.RULE_sharedPropertyType);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1250;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
        if(la_===1) {
            this.state = 1247;
            this.propertyNamespace();
            this.state = 1248;
            this.match(MetaEdGrammar.PERIOD);

        }
        this.state = 1252;
        this.localPropertyType();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function ShortenToNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_shortenToName;
    return this;
}

ShortenToNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShortenToNameContext.prototype.constructor = ShortenToNameContext;

ShortenToNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

ShortenToNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterShortenToName(this);
	}
};

ShortenToNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitShortenToName(this);
	}
};




MetaEdGrammar.ShortenToNameContext = ShortenToNameContext;

MetaEdGrammar.prototype.shortenToName = function() {

    var localctx = new ShortenToNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 268, MetaEdGrammar.RULE_shortenToName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1254;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SimplePropertyNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_simplePropertyName;
    return this;
}

SimplePropertyNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SimplePropertyNameContext.prototype.constructor = SimplePropertyNameContext;

SimplePropertyNameContext.prototype.localPropertyName = function() {
    return this.getTypedRuleContext(LocalPropertyNameContext,0);
};

SimplePropertyNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSimplePropertyName(this);
	}
};

SimplePropertyNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSimplePropertyName(this);
	}
};




MetaEdGrammar.SimplePropertyNameContext = SimplePropertyNameContext;

MetaEdGrammar.prototype.simplePropertyName = function() {

    var localctx = new SimplePropertyNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 270, MetaEdGrammar.RULE_simplePropertyName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1256;
        this.localPropertyName();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function SubdomainNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_subdomainName;
    return this;
}

SubdomainNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubdomainNameContext.prototype.constructor = SubdomainNameContext;

SubdomainNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

SubdomainNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterSubdomainName(this);
	}
};

SubdomainNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitSubdomainName(this);
	}
};




MetaEdGrammar.SubdomainNameContext = SubdomainNameContext;

MetaEdGrammar.prototype.subdomainName = function() {

    var localctx = new SubdomainNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 272, MetaEdGrammar.RULE_subdomainName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function NamespaceNameContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_namespaceName;
    return this;
}

NamespaceNameContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NamespaceNameContext.prototype.constructor = NamespaceNameContext;

NamespaceNameContext.prototype.ID = function() {
    return this.getToken(MetaEdGrammar.ID, 0);
};

NamespaceNameContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterNamespaceName(this);
	}
};

NamespaceNameContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitNamespaceName(this);
	}
};




MetaEdGrammar.NamespaceNameContext = NamespaceNameContext;

MetaEdGrammar.prototype.namespaceName = function() {

    var localctx = new NamespaceNameContext(this, this._ctx, this.state);
    this.enterRule(localctx, 274, MetaEdGrammar.RULE_namespaceName);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1260;
        this.match(MetaEdGrammar.ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};

function MetaEdIdContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = MetaEdGrammar.RULE_metaEdId;
    return this;
}

MetaEdIdContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
MetaEdIdContext.prototype.constructor = MetaEdIdContext;

MetaEdIdContext.prototype.METAED_ID = function() {
    return this.getToken(MetaEdGrammar.METAED_ID, 0);
};

MetaEdIdContext.prototype.enterRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.enterMetaEdId(this);
	}
};

MetaEdIdContext.prototype.exitRule = function(listener) {
    if(listener instanceof MetaEdGrammarListener ) {
        listener.exitMetaEdId(this);
	}
};




MetaEdGrammar.MetaEdIdContext = MetaEdIdContext;

MetaEdGrammar.prototype.metaEdId = function() {

    var localctx = new MetaEdIdContext(this, this._ctx, this.state);
    this.enterRule(localctx, 276, MetaEdGrammar.RULE_metaEdId);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        this.match(MetaEdGrammar.METAED_ID);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


exports.MetaEdGrammar = MetaEdGrammar;
