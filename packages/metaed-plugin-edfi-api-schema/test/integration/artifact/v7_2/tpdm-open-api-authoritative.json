{
  "components": {
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
          }
        },
        "description": "Bad Request. The request was invalid and cannot be completed. See the response body for specific validation errors. This will typically be an issue with the query parameters or their values."
      },
      "Conflict": {
        "content": {
          "application/json": {
          }
        },
        "description": "Conflict.  The request cannot be completed because it would result in an invalid state.  See the response body for details."
      },
      "Created": {
        "description": "The resource was created.  An ETag value is available in the ETag header, and the location of the resource is available in the Location header of the response."
      },
      "Deleted": {
        "description": "The resource was successfully deleted."
      },
      "Error": {
        "content": {
          "application/json": {
          }
        },
        "description": "An unhandled error occurred on the server. See the response body for details."
      },
      "Forbidden": {
        "description": "Forbidden. The request cannot be completed in the current authorization context. Contact your administrator if you believe this operation should be allowed."
      },
      "NotFound": {
        "description": "The resource could not be found."
      },
      "NotFoundUseSnapshot": {
        "description": "The resource could not be found. If Use-Snapshot header is set to true, this response can indicate the snapshot may have been removed."
      },
      "NotModified": {
        "description": "The resource's current server-side ETag value matched the If-None-Match header value supplied with the request indicating the resource has not been modified."
      },
      "PreconditionFailed": {
        "description": "The resource's current server-side ETag value does not match the supplied If-Match header value in the request. This indicates the resource has been modified by another consumer."
      },
      "Unauthorized": {
        "description": "Unauthorized. The request requires authentication. The OAuth bearer token was either not provided or is invalid. The operation may succeed once authentication has been successfully completed."
      },
      "Updated": {
        "description": "The resource was updated.  An updated ETag value is available in the ETag header of the response."
      }
    },
    "schemas": {
      "TPDM_Candidate": {
        "description": "A candidate is both a person enrolled in a educator preparation program and a candidate to become an educator.",
        "properties": {
          "addresses": {
            "items": {
              "properties": {
                "addressTypeDescriptor": {
                  "description": "The type of address listed for an individual or organization.    For example:  Physical Address, Mailing Address, Home Address, etc.)",
                  "type": "string"
                },
                "apartmentRoomSuiteNumber": {
                  "description": "The apartment, room, or suite number of an address.",
                  "maxLength": 50,
                  "type": "string"
                },
                "buildingSiteNumber": {
                  "description": "The number of the building on the site, if more than one building shares the same address.",
                  "maxLength": 20,
                  "type": "string"
                },
                "city": {
                  "description": "The name of the city in which an address is located.",
                  "maxLength": 30,
                  "minLength": 2,
                  "type": "string"
                },
                "congressionalDistrict": {
                  "description": "The congressional district in which an address is located.",
                  "maxLength": 30,
                  "type": "string"
                },
                "countyFIPSCode": {
                  "description": "The Federal Information Processing Standards (FIPS) numeric code for the county issued by the National Institute of Standards and Technology (NIST). Counties are considered to be the \"first-order subdivisions\" of each State and statistically equivalent entity, regardless of their local designations (county, parish, borough, etc.) Counties in different States will have the same code. A unique county number is created when combined with the 2-digit FIPS State Code.",
                  "maxLength": 5,
                  "minLength": 3,
                  "type": "string"
                },
                "doNotPublishIndicator": {
                  "description": "An indication that the address should not be published.",
                  "type": "boolean"
                },
                "latitude": {
                  "description": "The geographic latitude of the physical address.",
                  "maxLength": 20,
                  "type": "string"
                },
                "localeDescriptor": {
                  "description": "A general geographic indicator that categorizes U.S. territory (e.g., City, Suburban).",
                  "type": "string"
                },
                "longitude": {
                  "description": "The geographic longitude of the physical address.",
                  "maxLength": 20,
                  "type": "string"
                },
                "nameOfCounty": {
                  "description": "The name of the county, parish, borough, or comparable unit (within a state) in which an address is located.",
                  "maxLength": 30,
                  "type": "string"
                },
                "periods": {
                  "items": {
                    "properties": {
                      "beginDate": {
                        "description": "The month, day, and year for the start of the period.",
                        "format": "date",
                        "type": "string"
                      },
                      "endDate": {
                        "description": "The month, day, and year for the end of the period.",
                        "format": "date",
                        "type": "string"
                      }
                    },
                    "required": [
                      "beginDate"
                    ],
                    "type": "object"
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": false
                },
                "postalCode": {
                  "description": "The five or nine digit zip code or overseas postal code portion of an address.",
                  "maxLength": 17,
                  "type": "string"
                },
                "stateAbbreviationDescriptor": {
                  "description": "The abbreviation for the state (within the United States) or outlying area in which an address is located.",
                  "type": "string"
                },
                "streetNumberName": {
                  "description": "The street number and street name or post office box number of an address.",
                  "maxLength": 150,
                  "type": "string"
                }
              },
              "required": [
                "streetNumberName",
                "city",
                "stateAbbreviationDescriptor",
                "postalCode",
                "addressTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "birthCity": {
            "description": "The city the student was born in.",
            "maxLength": 30,
            "minLength": 2,
            "type": "string"
          },
          "birthCountryDescriptor": {
            "description": "The country in which an individual is born. It is strongly recommended that entries use only ISO 3166 2-letter country codes.",
            "type": "string"
          },
          "birthDate": {
            "description": "The month, day, and year on which an individual was born.",
            "format": "date",
            "type": "string"
          },
          "birthInternationalProvince": {
            "description": "For students born outside of the U.S., the Province or jurisdiction in which an individual is born.",
            "maxLength": 150,
            "type": "string"
          },
          "birthSexDescriptor": {
            "description": "A person's sex at birth.",
            "type": "string"
          },
          "birthStateAbbreviationDescriptor": {
            "description": "The abbreviation for the name of the state (within the United States) or extra-state jurisdiction in which an individual was born.",
            "type": "string"
          },
          "candidateIdentifier": {
            "description": "A unique alphanumeric code assigned to a candidate.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "dateEnteredUS": {
            "description": "For students born outside of the U.S., the date the student entered the U.S.",
            "format": "date",
            "type": "string"
          },
          "disabilities": {
            "items": {
              "properties": {
                "designations": {
                  "items": {
                    "properties": {
                      "disabilityDesignationDescriptor": {
                        "description": "An Ed-Fi Descriptor",
                        "type": "string"
                      }
                    },
                    "required": [
                      "disabilityDesignationDescriptor"
                    ],
                    "type": "object"
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": false
                },
                "disabilityDescriptor": {
                  "description": "A disability category that describes a individual's impairment.",
                  "type": "string"
                },
                "disabilityDeterminationSourceTypeDescriptor": {
                  "description": "The source that provided the disability determination.",
                  "type": "string"
                },
                "disabilityDiagnosis": {
                  "description": "A description of the disability diagnosis.",
                  "maxLength": 80,
                  "type": "string"
                },
                "orderOfDisability": {
                  "description": "The order by severity of individual's disabilities: 1- Primary, 2 -  Secondary, 3 - Tertiary, etc.",
                  "type": "integer"
                }
              },
              "required": [
                "disabilityDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "displacementStatus": {
            "description": "Indicates a state health or weather related event that displaces a group of students, and may require additional funding, educational, or social services.",
            "maxLength": 30,
            "minLength": 1,
            "type": "string"
          },
          "economicDisadvantaged": {
            "description": "An indication of inadequate financial condition of an individual's family, as determined by family income, number of family members/dependents, participation in public assistance programs, and/or other characteristics considered relevant by federal, state, and local policy.",
            "type": "boolean"
          },
          "electronicMails": {
            "items": {
              "properties": {
                "doNotPublishIndicator": {
                  "description": "An indication that the electronic email address should not be published.",
                  "type": "boolean"
                },
                "electronicMailAddress": {
                  "description": "The electronic mail (e-mail) address listed for an individual or organization.",
                  "maxLength": 128,
                  "minLength": 7,
                  "type": "string"
                },
                "electronicMailTypeDescriptor": {
                  "description": "The type of email listed for an individual or organization. For example: Home/Personal, Work, etc.)",
                  "type": "string"
                },
                "primaryEmailAddressIndicator": {
                  "description": "An indication that the electronic mail address should be used as the principal electronic mail address for an individual or organization.",
                  "type": "boolean"
                }
              },
              "required": [
                "electronicMailAddress",
                "electronicMailTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "englishLanguageExamDescriptor": {
            "description": "Indicates that a person passed, failed, or did not take an English Language assessment (e.g., TOEFFL).",
            "type": "string"
          },
          "firstGenerationStudent": {
            "description": "Indicator of whether individual is a first generation college student.",
            "type": "boolean"
          },
          "firstName": {
            "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
            "maxLength": 75,
            "type": "string"
          },
          "genderDescriptor": {
            "description": "The gender of the candidate.",
            "type": "string"
          },
          "generationCodeSuffix": {
            "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).",
            "maxLength": 10,
            "type": "string"
          },
          "hispanicLatinoEthnicity": {
            "description": "An indication that the individual traces his or her origin or descent to Mexico, Puerto Rico, Cuba, Central, and South America, and other Spanish cultures, regardless of race. The term, \"Spanish origin,\" can be used in addition to \"Hispanic or Latino.\"",
            "type": "boolean"
          },
          "languages": {
            "items": {
              "properties": {
                "languageDescriptor": {
                  "description": "A specification of which written or spoken communication is being used.",
                  "type": "string"
                },
                "uses": {
                  "items": {
                    "properties": {
                      "languageUseDescriptor": {
                        "description": "An Ed-Fi Descriptor",
                        "type": "string"
                      }
                    },
                    "required": [
                      "languageUseDescriptor"
                    ],
                    "type": "object"
                  },
                  "minItems": 0,
                  "type": "array",
                  "uniqueItems": false
                }
              },
              "required": [
                "languageDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "lastSurname": {
            "description": "The name borne in common by members of a family.",
            "maxLength": 75,
            "type": "string"
          },
          "limitedEnglishProficiencyDescriptor": {
            "description": "An indication that the student has been identified as limited English proficient by the Language Proficiency Assessment Committee (LPAC), or English proficient.",
            "type": "string"
          },
          "maidenName": {
            "description": "The individual's maiden name.",
            "maxLength": 75,
            "type": "string"
          },
          "middleName": {
            "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony.",
            "maxLength": 75,
            "type": "string"
          },
          "multipleBirthStatus": {
            "description": "Indicator of whether the student was born with other siblings (i.e., twins, triplets, etc.)",
            "type": "boolean"
          },
          "otherNames": {
            "items": {
              "properties": {
                "firstName": {
                  "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
                  "maxLength": 75,
                  "type": "string"
                },
                "generationCodeSuffix": {
                  "description": "An appendage, if any, used to denote an individual's generation in his family (e.g., Jr., Sr., III).",
                  "maxLength": 10,
                  "type": "string"
                },
                "lastSurname": {
                  "description": "The name borne in common by members of a family.",
                  "maxLength": 75,
                  "type": "string"
                },
                "middleName": {
                  "description": "A secondary name given to an individual at birth, baptism, or during another naming ceremony.",
                  "maxLength": 75,
                  "type": "string"
                },
                "otherNameTypeDescriptor": {
                  "description": "The types of alternate names for an individual.",
                  "type": "string"
                },
                "personalTitlePrefix": {
                  "description": "A prefix used to denote the title, degree, position, or seniority of the individual.",
                  "maxLength": 30,
                  "type": "string"
                }
              },
              "required": [
                "firstName",
                "lastSurname",
                "otherNameTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "personReference": {
            "$ref": "#/components/schemas/EdFi_Person_Reference"
          },
          "personalIdentificationDocuments": {
            "items": {
              "properties": {
                "documentExpirationDate": {
                  "description": "The day when the document  expires, if null then never expires.",
                  "format": "date",
                  "type": "string"
                },
                "documentTitle": {
                  "description": "The title of the document given by the issuer.",
                  "maxLength": 60,
                  "type": "string"
                },
                "identificationDocumentUseDescriptor": {
                  "description": "The primary function of the document used for establishing identity.",
                  "type": "string"
                },
                "issuerCountryDescriptor": {
                  "description": "Country of origin of the document. It is strongly recommended that entries use only ISO 3166 2-letter country codes.",
                  "type": "string"
                },
                "issuerDocumentIdentificationCode": {
                  "description": "The unique identifier on the issuer's identification system.",
                  "maxLength": 60,
                  "type": "string"
                },
                "issuerName": {
                  "description": "Name of the entity or institution that issued the document.",
                  "maxLength": 150,
                  "type": "string"
                },
                "personalInformationVerificationDescriptor": {
                  "description": "The category of the document relative to its purpose.",
                  "type": "string"
                }
              },
              "required": [
                "personalInformationVerificationDescriptor",
                "identificationDocumentUseDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "personalTitlePrefix": {
            "description": "A prefix used to denote the title, degree, position, or seniority of the individual.",
            "maxLength": 30,
            "type": "string"
          },
          "preferredFirstName": {
            "description": "The first name the individual prefers, if different from their legal first name",
            "maxLength": 75,
            "type": "string"
          },
          "preferredLastSurname": {
            "description": "The last name the individual prefers, if different from their legal last name",
            "maxLength": 75,
            "type": "string"
          },
          "races": {
            "items": {
              "properties": {
                "raceDescriptor": {
                  "description": "An Ed-Fi Descriptor",
                  "type": "string"
                }
              },
              "required": [
                "raceDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "sexDescriptor": {
            "description": "The sex of the candidate.",
            "type": "string"
          },
          "telephones": {
            "items": {
              "properties": {
                "doNotPublishIndicator": {
                  "description": "An indication that the telephone number should not be published.",
                  "type": "boolean"
                },
                "orderOfPriority": {
                  "description": "The order of priority assigned to telephone numbers to define which number to attempt first, second, etc.",
                  "minimum": 1,
                  "type": "integer"
                },
                "telephoneNumber": {
                  "description": "The telephone number including the area code, and extension, if applicable.",
                  "maxLength": 24,
                  "type": "string"
                },
                "telephoneNumberTypeDescriptor": {
                  "description": "The type of communication number listed for an individual or organization.",
                  "type": "string"
                },
                "textMessageCapabilityIndicator": {
                  "description": "An indication that the telephone number is technically capable of sending and receiving Short Message Service (SMS) text messages.",
                  "type": "boolean"
                }
              },
              "required": [
                "telephoneNumber",
                "telephoneNumberTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          }
        },
        "required": [
          "candidateIdentifier",
          "firstName",
          "lastSurname",
          "birthDate"
        ],
        "type": "object"
      },
      "TPDM_CandidateEducatorPreparationProgramAssociation": {
        "description": "Information about the association between the Teacher Candidate and the EducatorPreparationProgram",
        "properties": {
          "beginDate": {
            "description": "The begin date for the association.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
            "format": "date",
            "type": "string"
          },
          "candidateReference": {
            "$ref": "#/components/schemas/TPDM_Candidate_Reference"
          },
          "cohortYears": {
            "items": {
              "properties": {
                "cohortYearTypeDescriptor": {
                  "description": "The type of cohort year (9th grade, graduation).",
                  "type": "string"
                },
                "schoolYearTypeReference": {
                  "description": "A school year enumeration",
                  "properties": {
                    "schoolYear": {
                      "description": "A school year between 1900 and 2100",
                      "maximum": 2100,
                      "minimum": 1900,
                      "type": "integer"
                    }
                  },
                  "type": "object"
                },
                "termDescriptor": {
                  "description": "The term associated with the cohort year; for example, the intended term of graduation.",
                  "type": "string"
                }
              },
              "required": [
                "schoolYearTypeReference",
                "cohortYearTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "degreeSpecializations": {
            "items": {
              "properties": {
                "beginDate": {
                  "description": "The month, day, and year on which the Teacher Candidate first declared specialization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
                  "format": "date",
                  "type": "string"
                },
                "endDate": {
                  "description": "The month, day, and year on which the Teacher Candidate exited the declared specialization.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
                  "format": "date",
                  "type": "string"
                },
                "majorSpecialization": {
                  "description": "The major area for a degree or area of specialization for a certificate.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                },
                "minorSpecialization": {
                  "description": "The minor area for a degree or area of specialization for a certificate.",
                  "maxLength": 255,
                  "minLength": 1,
                  "type": "string"
                }
              },
              "required": [
                "majorSpecialization",
                "beginDate"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "educatorPreparationProgramReference": {
            "$ref": "#/components/schemas/TPDM_EducatorPreparationProgram_Reference"
          },
          "endDate": {
            "description": "The end date for the association.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
            "format": "date",
            "type": "string"
          },
          "eppProgramPathwayDescriptor": {
            "description": "The program pathway the candidate is following; for example: Residency, Internship, Traditional",
            "type": "string"
          },
          "reasonExitedDescriptor": {
            "description": "Reason exited for the association.",
            "type": "string"
          }
        },
        "required": [
          "candidateReference",
          "educatorPreparationProgramReference",
          "beginDate"
        ],
        "type": "object"
      },
      "TPDM_CandidateEducatorPreparationProgramAssociation_Reference": {
        "properties": {
          "beginDate": {
            "description": "The begin date for the association.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
            "format": "date",
            "type": "string"
          },
          "candidateIdentifier": {
            "description": "A unique alphanumeric code assigned to a candidate.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          },
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "programName": {
            "description": "The name of the Educator Preparation Program.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "programTypeDescriptor": {
            "description": "The type of program.",
            "type": "string"
          }
        },
        "required": [
          "beginDate",
          "candidateIdentifier",
          "educationOrganizationId",
          "programName",
          "programTypeDescriptor"
        ],
        "type": "object"
      },
      "TPDM_Candidate_Reference": {
        "properties": {
          "candidateIdentifier": {
            "description": "A unique alphanumeric code assigned to a candidate.",
            "maxLength": 32,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "candidateIdentifier"
        ],
        "type": "object"
      },
      "TPDM_EducatorPreparationProgram": {
        "description": "The Educator Preparation Program is designed to prepare students to become licensed educators.",
        "properties": {
          "accreditationStatusDescriptor": {
            "description": "The current accreditation status of the Educator Preparation Program.",
            "type": "string"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/EdFi_EducationOrganization_Reference"
          },
          "gradeLevels": {
            "items": {
              "properties": {
                "gradeLevelDescriptor": {
                  "description": "An Ed-Fi Descriptor",
                  "type": "string"
                }
              },
              "required": [
                "gradeLevelDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "programId": {
            "description": "A unique number or alphanumeric code assigned to a program by a school, school system, a state, or other agency or entity.",
            "maxLength": 20,
            "type": "string"
          },
          "programName": {
            "description": "The name of the Educator Preparation Program.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "programTypeDescriptor": {
            "description": "The type of program.",
            "type": "string"
          }
        },
        "required": [
          "educationOrganizationReference",
          "programName",
          "programTypeDescriptor"
        ],
        "type": "object"
      },
      "TPDM_EducatorPreparationProgram_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "programName": {
            "description": "The name of the Educator Preparation Program.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "programTypeDescriptor": {
            "description": "The type of program.",
            "type": "string"
          }
        },
        "required": [
          "educationOrganizationId",
          "programName",
          "programTypeDescriptor"
        ],
        "type": "object"
      },
      "TPDM_Evaluation": {
        "description": "An evaluation instrument appled to evaluate an educator.  The evaluation could be internally developed, or could be an industry recognized instrument such as TTESS or Marzano.",
        "properties": {
          "evaluationDescription": {
            "description": "The long description of the Evaluation.",
            "maxLength": 255,
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "evaluationTypeDescriptor": {
            "description": "The type of the evaluation (e.g., observation, principal, peer, student survey, student growth).",
            "type": "string"
          },
          "interRaterReliabilityScore": {
            "description": "A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)",
            "type": "integer"
          },
          "maxRating": {
            "description": "The maximum summary numerical rating or score for the evaluation.",
            "type": "number"
          },
          "minRating": {
            "description": "The minimum summary numerical rating or score for the evaluation. If omitted, assumed to be 0.0.",
            "type": "number"
          },
          "performanceEvaluationReference": {
            "$ref": "#/components/schemas/TPDM_PerformanceEvaluation_Reference"
          },
          "ratingLevels": {
            "items": {
              "properties": {
                "evaluationRatingLevelDescriptor": {
                  "description": "The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).",
                  "type": "string"
                },
                "maxRating": {
                  "description": "The maximum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                },
                "minRating": {
                  "description": "The minimum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                }
              },
              "required": [
                "evaluationRatingLevelDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          }
        },
        "required": [
          "performanceEvaluationReference",
          "evaluationTitle"
        ],
        "type": "object"
      },
      "TPDM_EvaluationElement": {
        "description": "The lowest-level Elements or criterion of performance being evaluated by rubric, quantitative measure, or aggregate survey response.",
        "properties": {
          "evaluationElementTitle": {
            "description": "The name or title of the evaluation element.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "evaluationObjectiveReference": {
            "$ref": "#/components/schemas/TPDM_EvaluationObjective_Reference"
          },
          "evaluationTypeDescriptor": {
            "description": "The type of the evaluation (e.g., observation, principal, peer, student survey, student growth).",
            "type": "string"
          },
          "maxRating": {
            "description": "The maximum summary numerical rating or score for the evaluation element.",
            "type": "number"
          },
          "minRating": {
            "description": "The minimum summary numerical rating or score for the evaluation element. If omitted, assumed to be 0.0.",
            "type": "number"
          },
          "ratingLevels": {
            "items": {
              "properties": {
                "evaluationRatingLevelDescriptor": {
                  "description": "The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).",
                  "type": "string"
                },
                "maxRating": {
                  "description": "The maximum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                },
                "minRating": {
                  "description": "The minimum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                }
              },
              "required": [
                "evaluationRatingLevelDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "sortOrder": {
            "description": "The sort order of this Evaluation Element.",
            "type": "integer"
          }
        },
        "required": [
          "evaluationObjectiveReference",
          "evaluationElementTitle"
        ],
        "type": "object"
      },
      "TPDM_EvaluationElementRating": {
        "description": "The lowest-level rating for an Evaluation Element for an individual educator.",
        "properties": {
          "areaOfRefinement": {
            "description": "Area identified for person to refine or improve as part of the evaluation.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "areaOfReinforcement": {
            "description": "Area identified for reinforcement or positive feedback as part of the evaluation.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "comments": {
            "description": "Any comments about the performance evaluation to be captured.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "elementRatingResults": {
            "items": {
              "properties": {
                "rating": {
                  "description": "The numerical summary rating or score for the evaluation.",
                  "type": "number"
                },
                "ratingResultTitle": {
                  "description": "The title of Rating Result.",
                  "maxLength": 50,
                  "minLength": 1,
                  "type": "string"
                },
                "resultDatatypeTypeDescriptor": {
                  "description": "The datatype of the result.",
                  "type": "string"
                }
              },
              "required": [
                "ratingResultTitle",
                "rating",
                "resultDatatypeTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "evaluationElementRatingLevelDescriptor": {
            "description": "The rating level achieved based upon the rating or score.",
            "type": "string"
          },
          "evaluationElementReference": {
            "$ref": "#/components/schemas/TPDM_EvaluationElement_Reference"
          },
          "evaluationObjectiveRatingReference": {
            "$ref": "#/components/schemas/TPDM_EvaluationObjectiveRating_Reference"
          },
          "feedback": {
            "description": "Feedback provided to the evaluated person.",
            "maxLength": 2048,
            "minLength": 1,
            "type": "string"
          }
        },
        "required": [
          "evaluationObjectiveRatingReference",
          "evaluationElementReference"
        ],
        "type": "object"
      },
      "TPDM_EvaluationElementRating_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationDate": {
            "description": "The date for the person's evaluation.",
            "format": "date-time",
            "type": "string"
          },
          "evaluationElementTitle": {
            "description": "The name or title of the evaluation element.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "evaluationObjectiveTitle": {
            "description": "The name or title of the evaluation Objective.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "personId": {
            "description": "A unique alphanumeric code assigned to a person.",
            "maxLength": 32,
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "sourceSystemDescriptor": {
            "description": "This descriptor defines the originating record source system for the person.",
            "type": "string"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "evaluationElementTitle",
          "evaluationTitle",
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor",
          "evaluationObjectiveTitle",
          "evaluationDate",
          "personId",
          "sourceSystemDescriptor"
        ],
        "type": "object"
      },
      "TPDM_EvaluationElement_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationElementTitle": {
            "description": "The name or title of the evaluation element.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "evaluationObjectiveTitle": {
            "description": "The name or title of the evaluation Objective.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "evaluationElementTitle",
          "evaluationTitle",
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor",
          "evaluationObjectiveTitle"
        ],
        "type": "object"
      },
      "TPDM_EvaluationObjective": {
        "description": "A subcomponent of an Evaluation, a specific educator Objective or domain of performance that is being evaluated.",
        "properties": {
          "evaluationObjectiveDescription": {
            "description": "The long description of the Evaluation Objective.",
            "maxLength": 255,
            "type": "string"
          },
          "evaluationObjectiveTitle": {
            "description": "The name or title of the evaluation Objective.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "evaluationReference": {
            "$ref": "#/components/schemas/TPDM_Evaluation_Reference"
          },
          "evaluationTypeDescriptor": {
            "description": "The type of the evaluation Objective (e.g., observation, principal, peer, student survey, student growth).",
            "type": "string"
          },
          "maxRating": {
            "description": "The maximum summary numerical rating or score for the evaluation Objective.",
            "type": "number"
          },
          "minRating": {
            "description": "The minimum summary numerical rating or score for the evaluation Objective. If omitted, assumed to be 0.0.",
            "type": "number"
          },
          "ratingLevels": {
            "items": {
              "properties": {
                "evaluationRatingLevelDescriptor": {
                  "description": "The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).",
                  "type": "string"
                },
                "maxRating": {
                  "description": "The maximum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                },
                "minRating": {
                  "description": "The minimum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                }
              },
              "required": [
                "evaluationRatingLevelDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "sortOrder": {
            "description": "The sort order of this Evaluation Objective.",
            "type": "integer"
          }
        },
        "required": [
          "evaluationReference",
          "evaluationObjectiveTitle"
        ],
        "type": "object"
      },
      "TPDM_EvaluationObjectiveRating": {
        "description": "The rating for the component Evaluation Objective for an individual educator.",
        "properties": {
          "comments": {
            "description": "Any comments about the performance evaluation to be captured.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "evaluationObjectiveReference": {
            "$ref": "#/components/schemas/TPDM_EvaluationObjective_Reference"
          },
          "evaluationRatingReference": {
            "$ref": "#/components/schemas/TPDM_EvaluationRating_Reference"
          },
          "objectiveRatingLevelDescriptor": {
            "description": "The rating level achieved based upon the rating or score.",
            "type": "string"
          },
          "objectiveRatingResults": {
            "items": {
              "properties": {
                "rating": {
                  "description": "The numerical summary rating or score for the evaluation.",
                  "type": "number"
                },
                "ratingResultTitle": {
                  "description": "The title of Rating Result.",
                  "maxLength": 50,
                  "minLength": 1,
                  "type": "string"
                },
                "resultDatatypeTypeDescriptor": {
                  "description": "The datatype of the result.",
                  "type": "string"
                }
              },
              "required": [
                "ratingResultTitle",
                "rating",
                "resultDatatypeTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          }
        },
        "required": [
          "evaluationRatingReference",
          "evaluationObjectiveReference"
        ],
        "type": "object"
      },
      "TPDM_EvaluationObjectiveRating_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationDate": {
            "description": "The date for the person's evaluation.",
            "format": "date-time",
            "type": "string"
          },
          "evaluationObjectiveTitle": {
            "description": "The name or title of the evaluation Objective.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "personId": {
            "description": "A unique alphanumeric code assigned to a person.",
            "maxLength": 32,
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "sourceSystemDescriptor": {
            "description": "This descriptor defines the originating record source system for the person.",
            "type": "string"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "evaluationTitle",
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor",
          "evaluationObjectiveTitle",
          "evaluationDate",
          "personId",
          "sourceSystemDescriptor"
        ],
        "type": "object"
      },
      "TPDM_EvaluationObjective_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationObjectiveTitle": {
            "description": "The name or title of the evaluation Objective.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "evaluationTitle",
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor",
          "evaluationObjectiveTitle"
        ],
        "type": "object"
      },
      "TPDM_EvaluationRating": {
        "description": "The summary weighting for the Evaluation instrument for an individual educator.",
        "properties": {
          "actualDuration": {
            "description": "The actual or estimated number of clock minutes during which the evaluation was conducted.",
            "minimum": 1,
            "type": "integer"
          },
          "comments": {
            "description": "Any comments about the evaluation to be captured.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "evaluationDate": {
            "description": "The date for the person's evaluation.",
            "format": "date-time",
            "type": "string"
          },
          "evaluationRatingLevelDescriptor": {
            "description": "The rating level achieved based upon the rating or score.",
            "type": "string"
          },
          "evaluationRatingStatusDescriptor": {
            "description": "The Status of the poerformance evaluation.",
            "type": "string"
          },
          "evaluationReference": {
            "$ref": "#/components/schemas/TPDM_Evaluation_Reference"
          },
          "performanceEvaluationRatingReference": {
            "$ref": "#/components/schemas/TPDM_PerformanceEvaluationRating_Reference"
          },
          "results": {
            "items": {
              "properties": {
                "rating": {
                  "description": "The numerical summary rating or score for the evaluation.",
                  "type": "number"
                },
                "ratingResultTitle": {
                  "description": "The title of Rating Result.",
                  "maxLength": 50,
                  "minLength": 1,
                  "type": "string"
                },
                "resultDatatypeTypeDescriptor": {
                  "description": "The datatype of the result.",
                  "type": "string"
                }
              },
              "required": [
                "ratingResultTitle",
                "rating",
                "resultDatatypeTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "reviewers": {
            "items": {
              "properties": {
                "firstName": {
                  "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
                  "maxLength": 75,
                  "type": "string"
                },
                "lastSurname": {
                  "description": "The name borne in common by members of a family.",
                  "maxLength": 75,
                  "type": "string"
                },
                "receivedTraining": {
                  "properties": {
                    "interRaterReliabilityScore": {
                      "description": "A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)",
                      "type": "integer"
                    },
                    "receivedTrainingDate": {
                      "description": "The date on which the person administering the performance meausre received training on how to conduct performance measures.",
                      "format": "date",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "reviewerPersonReference": {
                  "$ref": "#/components/schemas/EdFi_Person_Reference"
                }
              },
              "required": [
                "firstName",
                "lastSurname"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "sectionReference": {
            "$ref": "#/components/schemas/EdFi_Section_Reference"
          }
        },
        "required": [
          "performanceEvaluationRatingReference",
          "evaluationReference",
          "evaluationDate"
        ],
        "type": "object"
      },
      "TPDM_EvaluationRating_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationDate": {
            "description": "The date for the person's evaluation.",
            "format": "date-time",
            "type": "string"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "personId": {
            "description": "A unique alphanumeric code assigned to a person.",
            "maxLength": 32,
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "sourceSystemDescriptor": {
            "description": "This descriptor defines the originating record source system for the person.",
            "type": "string"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "evaluationTitle",
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor",
          "evaluationDate",
          "personId",
          "sourceSystemDescriptor"
        ],
        "type": "object"
      },
      "TPDM_Evaluation_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "evaluationTitle",
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor"
        ],
        "type": "object"
      },
      "TPDM_FinancialAid": {
        "description": "This entity represents the financial aid a person is awarded.",
        "properties": {
          "aidAmount": {
            "description": "The amount of financial aid awarded to a person for the term/year.",
            "type": "number"
          },
          "aidConditionDescription": {
            "description": "The description of the condition (e.g., placement in a high need school) under which the aid was given.",
            "maxLength": 1024,
            "type": "string"
          },
          "aidTypeDescriptor": {
            "description": "The classification of financial aid awarded to a person for the academic term/year.",
            "type": "string"
          },
          "beginDate": {
            "description": "The date the award was designated.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
            "format": "date",
            "type": "string"
          },
          "endDate": {
            "description": "The date the award was removed.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
            "format": "date",
            "type": "string"
          },
          "pellGrantRecipient": {
            "description": "Indicates a person who receives Pell Grant aid.",
            "type": "boolean"
          },
          "studentReference": {
            "$ref": "#/components/schemas/EdFi_Student_Reference"
          }
        },
        "required": [
          "studentReference",
          "beginDate",
          "aidTypeDescriptor"
        ],
        "type": "object"
      },
      "TPDM_FinancialAid_Reference": {
        "properties": {
          "aidTypeDescriptor": {
            "description": "The classification of financial aid awarded to a person for the academic term/year.",
            "type": "string"
          },
          "beginDate": {
            "description": "The date the award was designated.  Note: Date interpretation may vary. Ed-Fi recommends inclusive dates, but states may define dates as inclusive or exclusive. For calculations, align with local guidelines.",
            "format": "date",
            "type": "string"
          },
          "studentUniqueId": {
            "description": "A unique alphanumeric code assigned to a student.",
            "maxLength": 32,
            "type": "string"
          }
        },
        "required": [
          "aidTypeDescriptor",
          "beginDate",
          "studentUniqueId"
        ],
        "type": "object"
      },
      "TPDM_PerformanceEvaluation": {
        "description": "A performance evaluation of an educator, typically regularly scheduled and uniformly applied, composed of one or more Evaluations.",
        "properties": {
          "academicSubjectDescriptor": {
            "description": "The description of the content or subject area of a performance evaluation.",
            "type": "string"
          },
          "educationOrganizationReference": {
            "$ref": "#/components/schemas/EdFi_EducationOrganization_Reference"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "gradeLevels": {
            "items": {
              "properties": {
                "gradeLevelDescriptor": {
                  "description": "An Ed-Fi Descriptor",
                  "type": "string"
                }
              },
              "required": [
                "gradeLevelDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "performanceEvaluationDescription": {
            "description": "The long description of the Performance Evaluation.",
            "maxLength": 255,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "ratingLevels": {
            "items": {
              "properties": {
                "evaluationRatingLevelDescriptor": {
                  "description": "The title for a level of rating or evaluation band (e.g., Excellent, Acceptable, Needs Improvement, Unacceptable).",
                  "type": "string"
                },
                "maxRating": {
                  "description": "The maximum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                },
                "minRating": {
                  "description": "The minimum numerical rating or score to achieve the evaluation rating level.",
                  "type": "number"
                }
              },
              "required": [
                "evaluationRatingLevelDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "schoolYearTypeReference": {
            "description": "A school year enumeration",
            "properties": {
              "schoolYear": {
                "description": "A school year between 1900 and 2100",
                "maximum": 2100,
                "minimum": 1900,
                "type": "integer"
              }
            },
            "type": "object"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "performanceEvaluationTitle",
          "termDescriptor",
          "performanceEvaluationTypeDescriptor",
          "schoolYearTypeReference",
          "evaluationPeriodDescriptor",
          "educationOrganizationReference"
        ],
        "type": "object"
      },
      "TPDM_PerformanceEvaluationRating": {
        "description": "The summary rating for a Performance Evaluation across all Evaluation instruments for an individual educator.",
        "properties": {
          "actualDate": {
            "description": "The month, day, and year on which the performance evaluation was conducted.",
            "format": "date",
            "type": "string"
          },
          "actualDuration": {
            "description": "The actual or estimated number of clock minutes during which the performance evaluation was conducted.",
            "minimum": 1,
            "type": "integer"
          },
          "actualTime": {
            "description": "An indication of the the time at which the performance evaluation was conducted.",
            "format": "time",
            "type": "string"
          },
          "announced": {
            "description": "An indicator of whether the performance evaluation was announced or not.",
            "type": "boolean"
          },
          "comments": {
            "description": "Any comments about the performance evaluation to be captured.",
            "maxLength": 1024,
            "minLength": 1,
            "type": "string"
          },
          "coteachingStyleObservedDescriptor": {
            "description": "A type of co-teaching observed as part of the performance evaluation.",
            "type": "string"
          },
          "performanceEvaluationRatingLevelDescriptor": {
            "description": "The rating level achieved based upon the rating or score.",
            "type": "string"
          },
          "performanceEvaluationReference": {
            "$ref": "#/components/schemas/TPDM_PerformanceEvaluation_Reference"
          },
          "personReference": {
            "$ref": "#/components/schemas/EdFi_Person_Reference"
          },
          "results": {
            "items": {
              "properties": {
                "rating": {
                  "description": "The numerical summary rating or score for the evaluation.",
                  "type": "number"
                },
                "ratingResultTitle": {
                  "description": "The title of Rating Result.",
                  "maxLength": 50,
                  "minLength": 1,
                  "type": "string"
                },
                "resultDatatypeTypeDescriptor": {
                  "description": "The datatype of the result.",
                  "type": "string"
                }
              },
              "required": [
                "ratingResultTitle",
                "rating",
                "resultDatatypeTypeDescriptor"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "reviewers": {
            "items": {
              "properties": {
                "firstName": {
                  "description": "A name given to an individual at birth, baptism, or during another naming ceremony, or through legal change.",
                  "maxLength": 75,
                  "type": "string"
                },
                "lastSurname": {
                  "description": "The name borne in common by members of a family.",
                  "maxLength": 75,
                  "type": "string"
                },
                "receivedTraining": {
                  "properties": {
                    "interRaterReliabilityScore": {
                      "description": "A score indicating how much homogeneity, or consensus, there is in the ratings given by judges. Most commonly a percentage scale (1-100)",
                      "type": "integer"
                    },
                    "receivedTrainingDate": {
                      "description": "The date on which the person administering the performance meausre received training on how to conduct performance measures.",
                      "format": "date",
                      "type": "string"
                    }
                  },
                  "type": "object"
                },
                "reviewerPersonReference": {
                  "$ref": "#/components/schemas/EdFi_Person_Reference"
                }
              },
              "required": [
                "firstName",
                "lastSurname"
              ],
              "type": "object"
            },
            "minItems": 0,
            "type": "array",
            "uniqueItems": false
          },
          "scheduleDate": {
            "description": "The month, day, and year on which the performance evaluation was scheduled.",
            "format": "date",
            "type": "string"
          }
        },
        "required": [
          "personReference",
          "performanceEvaluationReference",
          "actualDate"
        ],
        "type": "object"
      },
      "TPDM_PerformanceEvaluationRating_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "personId": {
            "description": "A unique alphanumeric code assigned to a person.",
            "maxLength": 32,
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "sourceSystemDescriptor": {
            "description": "This descriptor defines the originating record source system for the person.",
            "type": "string"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor",
          "personId",
          "sourceSystemDescriptor"
        ],
        "type": "object"
      },
      "TPDM_PerformanceEvaluation_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor"
        ],
        "type": "object"
      },
      "TPDM_RubricDimension": {
        "description": "The cells of a rubric, consisting of a qualitative decription, definition, or exemplar with the associated rubric rating and rating level.",
        "properties": {
          "criterionDescription": {
            "description": "The criterion description for the rubric dimension.",
            "maxLength": 1024,
            "type": "string"
          },
          "dimensionOrder": {
            "description": "The order for the rubric dimension.",
            "type": "integer"
          },
          "evaluationElementReference": {
            "$ref": "#/components/schemas/TPDM_EvaluationElement_Reference"
          },
          "rubricRating": {
            "description": "The rating achieved for the rubric dimension.",
            "type": "integer"
          },
          "rubricRatingLevelDescriptor": {
            "description": "The rating level achieved for the rubric dimension.",
            "type": "string"
          }
        },
        "required": [
          "evaluationElementReference",
          "rubricRating",
          "criterionDescription"
        ],
        "type": "object"
      },
      "TPDM_RubricDimension_Reference": {
        "properties": {
          "educationOrganizationId": {
            "description": "The identifier assigned to an education organization.",
            "type": "integer"
          },
          "evaluationElementTitle": {
            "description": "The name or title of the evaluation element.",
            "maxLength": 255,
            "minLength": 1,
            "type": "string"
          },
          "evaluationObjectiveTitle": {
            "description": "The name or title of the evaluation Objective.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "evaluationPeriodDescriptor": {
            "description": "The period for the evaluation.",
            "type": "string"
          },
          "evaluationTitle": {
            "description": "The name or title of the evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTitle": {
            "description": "An assigned unique identifier for the performance evaluation.",
            "maxLength": 50,
            "minLength": 1,
            "type": "string"
          },
          "performanceEvaluationTypeDescriptor": {
            "description": "The type of performance evaluation conducted.",
            "type": "string"
          },
          "rubricRating": {
            "description": "The rating achieved for the rubric dimension.",
            "type": "integer"
          },
          "schoolYear": {
            "description": "A school year between 1900 and 2100",
            "maximum": 2100,
            "minimum": 1900,
            "type": "integer"
          },
          "termDescriptor": {
            "description": "The term for the session during the school year.",
            "type": "string"
          }
        },
        "required": [
          "evaluationElementTitle",
          "evaluationTitle",
          "educationOrganizationId",
          "evaluationPeriodDescriptor",
          "performanceEvaluationTitle",
          "performanceEvaluationTypeDescriptor",
          "schoolYear",
          "termDescriptor",
          "evaluationObjectiveTitle",
          "rubricRating"
        ],
        "type": "object"
      },
      "TPDM_SurveyResponsePersonTargetAssociation": {
        "description": "The association provides information about the survey being taken and who the survey is about.",
        "properties": {
          "personReference": {
            "$ref": "#/components/schemas/EdFi_Person_Reference"
          },
          "surveyResponseReference": {
            "$ref": "#/components/schemas/EdFi_SurveyResponse_Reference"
          }
        },
        "required": [
          "surveyResponseReference",
          "personReference"
        ],
        "type": "object"
      },
      "TPDM_SurveyResponsePersonTargetAssociation_Reference": {
        "properties": {
          "namespace": {
            "description": "Namespace for the survey.",
            "maxLength": 255,
            "minLength": 5,
            "type": "string"
          },
          "personId": {
            "description": "A unique alphanumeric code assigned to a person.",
            "maxLength": 32,
            "type": "string"
          },
          "sourceSystemDescriptor": {
            "description": "This descriptor defines the originating record source system for the person.",
            "type": "string"
          },
          "surveyIdentifier": {
            "description": "The unique survey identifier from the survey tool.",
            "maxLength": 60,
            "type": "string"
          },
          "surveyResponseIdentifier": {
            "description": "The identifier of the survey typically from the survey application.",
            "maxLength": 60,
            "type": "string"
          }
        },
        "required": [
          "personId",
          "sourceSystemDescriptor",
          "namespace",
          "surveyIdentifier",
          "surveyResponseIdentifier"
        ],
        "type": "object"
      },
      "TPDM_SurveySectionResponsePersonTargetAssociation": {
        "description": "This association provides information about the survey section and the person the survey section is about.",
        "properties": {
          "personReference": {
            "$ref": "#/components/schemas/EdFi_Person_Reference"
          },
          "surveySectionResponseReference": {
            "$ref": "#/components/schemas/EdFi_SurveySectionResponse_Reference"
          }
        },
        "required": [
          "surveySectionResponseReference",
          "personReference"
        ],
        "type": "object"
      },
      "TPDM_SurveySectionResponsePersonTargetAssociation_Reference": {
        "properties": {
          "namespace": {
            "description": "Namespace for the survey.",
            "maxLength": 255,
            "minLength": 5,
            "type": "string"
          },
          "personId": {
            "description": "A unique alphanumeric code assigned to a person.",
            "maxLength": 32,
            "type": "string"
          },
          "sourceSystemDescriptor": {
            "description": "This descriptor defines the originating record source system for the person.",
            "type": "string"
          },
          "surveyIdentifier": {
            "description": "The unique survey identifier from the survey tool.",
            "maxLength": 60,
            "type": "string"
          },
          "surveyResponseIdentifier": {
            "description": "The identifier of the survey typically from the survey application.",
            "maxLength": 60,
            "type": "string"
          },
          "surveySectionTitle": {
            "description": "The title or label for the survey section.",
            "maxLength": 255,
            "type": "string"
          }
        },
        "required": [
          "personId",
          "sourceSystemDescriptor",
          "surveyResponseIdentifier",
          "namespace",
          "surveyIdentifier",
          "surveySectionTitle"
        ],
        "type": "object"
      }
    }
  },
  "info": {
    "description": "Ed-Fi Alliance Data Management Service",
    "title": "Ed-Fi Alliance Data Management Service",
    "version": "0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/tpdm/candidateEducatorPreparationProgramAssociations": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCandidateEducatorPreparationProgramAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_CandidateEducatorPreparationProgramAssociation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "candidateEducatorPreparationProgramAssociations"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postCandidateEducatorPreparationProgramAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_CandidateEducatorPreparationProgramAssociation"
              }
            }
          },
          "description": "The JSON representation of the CandidateEducatorPreparationProgramAssociation resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "candidateEducatorPreparationProgramAssociations"
        ]
      }
    },
    "/tpdm/candidateEducatorPreparationProgramAssociations/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/candidates": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getCandidate",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_Candidate"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "candidates"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postCandidate",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_Candidate"
              }
            }
          },
          "description": "The JSON representation of the Candidate resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "candidates"
        ]
      }
    },
    "/tpdm/candidates/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/educatorPreparationPrograms": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEducatorPreparationProgram",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_EducatorPreparationProgram"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "educatorPreparationPrograms"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postEducatorPreparationProgram",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_EducatorPreparationProgram"
              }
            }
          },
          "description": "The JSON representation of the EducatorPreparationProgram resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "educatorPreparationPrograms"
        ]
      }
    },
    "/tpdm/educatorPreparationPrograms/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/evaluationElementRatings": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEvaluationElementRating",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_EvaluationElementRating"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "evaluationElementRatings"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postEvaluationElementRating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_EvaluationElementRating"
              }
            }
          },
          "description": "The JSON representation of the EvaluationElementRating resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "evaluationElementRatings"
        ]
      }
    },
    "/tpdm/evaluationElementRatings/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/evaluationElements": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEvaluationElement",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_EvaluationElement"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "evaluationElements"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postEvaluationElement",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_EvaluationElement"
              }
            }
          },
          "description": "The JSON representation of the EvaluationElement resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "evaluationElements"
        ]
      }
    },
    "/tpdm/evaluationElements/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/evaluationObjectiveRatings": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEvaluationObjectiveRating",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_EvaluationObjectiveRating"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "evaluationObjectiveRatings"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postEvaluationObjectiveRating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_EvaluationObjectiveRating"
              }
            }
          },
          "description": "The JSON representation of the EvaluationObjectiveRating resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "evaluationObjectiveRatings"
        ]
      }
    },
    "/tpdm/evaluationObjectiveRatings/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/evaluationObjectives": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEvaluationObjective",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_EvaluationObjective"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "evaluationObjectives"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postEvaluationObjective",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_EvaluationObjective"
              }
            }
          },
          "description": "The JSON representation of the EvaluationObjective resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "evaluationObjectives"
        ]
      }
    },
    "/tpdm/evaluationObjectives/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/evaluationRatings": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEvaluationRating",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_EvaluationRating"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "evaluationRatings"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postEvaluationRating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_EvaluationRating"
              }
            }
          },
          "description": "The JSON representation of the EvaluationRating resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "evaluationRatings"
        ]
      }
    },
    "/tpdm/evaluationRatings/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/evaluations": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getEvaluation",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_Evaluation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "evaluations"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_Evaluation"
              }
            }
          },
          "description": "The JSON representation of the Evaluation resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "evaluations"
        ]
      }
    },
    "/tpdm/evaluations/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/financialAids": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getFinancialAid",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_FinancialAid"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "financialAids"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postFinancialAid",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_FinancialAid"
              }
            }
          },
          "description": "The JSON representation of the FinancialAid resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "financialAids"
        ]
      }
    },
    "/tpdm/financialAids/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/performanceEvaluationRatings": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getPerformanceEvaluationRating",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_PerformanceEvaluationRating"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "performanceEvaluationRatings"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postPerformanceEvaluationRating",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_PerformanceEvaluationRating"
              }
            }
          },
          "description": "The JSON representation of the PerformanceEvaluationRating resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "performanceEvaluationRatings"
        ]
      }
    },
    "/tpdm/performanceEvaluationRatings/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/performanceEvaluations": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getPerformanceEvaluation",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_PerformanceEvaluation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "performanceEvaluations"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postPerformanceEvaluation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_PerformanceEvaluation"
              }
            }
          },
          "description": "The JSON representation of the PerformanceEvaluation resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "performanceEvaluations"
        ]
      }
    },
    "/tpdm/performanceEvaluations/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/rubricDimensions": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getRubricDimension",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_RubricDimension"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "rubricDimensions"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postRubricDimension",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_RubricDimension"
              }
            }
          },
          "description": "The JSON representation of the RubricDimension resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "rubricDimensions"
        ]
      }
    },
    "/tpdm/rubricDimensions/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/surveyResponsePersonTargetAssociations": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getSurveyResponsePersonTargetAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_SurveyResponsePersonTargetAssociation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "surveyResponsePersonTargetAssociations"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postSurveyResponsePersonTargetAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_SurveyResponsePersonTargetAssociation"
              }
            }
          },
          "description": "The JSON representation of the SurveyResponsePersonTargetAssociation resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "surveyResponsePersonTargetAssociations"
        ]
      }
    },
    "/tpdm/surveyResponsePersonTargetAssociations/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    },
    "/tpdm/surveySectionResponsePersonTargetAssociations": {
      "get": {
        "description": "This GET operation provides access to resources using the \"Get\" search pattern.  The values of any properties of the resource that are specified will be used to return all matching results (if it exists).",
        "operationId": "getSurveySectionResponsePersonTargetAssociation",
        "parameters": [
          {
            "$ref": "#/components/parameters/offset"
          },
          {
            "$ref": "#/components/parameters/limit"
          },
          {
            "$ref": "#/components/parameters/MinChangeVersion"
          },
          {
            "$ref": "#/components/parameters/MaxChangeVersion"
          },
          {
            "$ref": "#/components/parameters/totalCount"
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/TPDM_SurveySectionResponsePersonTargetAssociation"
                  },
                  "type": "array"
                }
              }
            },
            "description": "The requested resource was successfully retrieved."
          },
          "304": {
            "$ref": "#/components/responses/NotModified"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "404": {
            "$ref": "#/components/responses/NotFoundUseSnapshot"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Retrieves specific resources using the resource's property values (using the \"Get\" pattern).",
        "tags": [
          "surveySectionResponsePersonTargetAssociations"
        ]
      },
      "post": {
        "description": "The POST operation can be used to create or update resources. In database terms, this is often referred to as an \"upsert\" operation (insert + update). Clients should NOT include the resource \"id\" in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.",
        "operationId": "postSurveySectionResponsePersonTargetAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TPDM_SurveySectionResponsePersonTargetAssociation"
              }
            }
          },
          "description": "The JSON representation of the SurveySectionResponsePersonTargetAssociation resource to be created or updated.",
          "required": true
        },
        "responses": {
          "200": {
            "$ref": "#/components/responses/Updated"
          },
          "201": {
            "$ref": "#/components/responses/Created"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "403": {
            "$ref": "#/components/responses/Forbidden"
          },
          "405": {
            "description": "Method Is Not Allowed. When the Use-Snapshot header is set to true, the method is not allowed."
          },
          "409": {
            "$ref": "#/components/responses/Conflict"
          },
          "412": {
            "$ref": "#/components/responses/PreconditionFailed"
          },
          "500": {
            "$ref": "#/components/responses/Error"
          }
        },
        "summary": "Creates or updates resources based on the natural key values of the supplied resource.",
        "tags": [
          "surveySectionResponsePersonTargetAssociations"
        ]
      }
    },
    "/tpdm/surveySectionResponsePersonTargetAssociations/{id}": {
      "delete": {
      },
      "get": {
      },
      "put": {
      }
    }
  },
  "servers": [
    {
      "url": "http://localhost:5198/"
    }
  ]
}